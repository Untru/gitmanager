// @strict-types


#Область ПрограммныйИнтерфейс

Функция ПолучитьОписаниеОбъектаМетаданныхПоИмениФайл(Файл) Экспорт	
	
	Описание = Неопределено;
	ТипОбъекта = ТипОбъектаПоФайлу(Файл);
	Файл = СтрЗаменить(Файл, "src/epf", "src/cf/epf");
	Файл = СтрЗаменить(Файл, "src/cfe/ToolsWorld", "src/cf");
	Файл = СтрЗаменить(Файл, "src/cfe/Aelita", "src/cf");
	
	ИнициализированныеКартинки = Новый Структура;
	ИнициализированныеКартинки.Вставить("КартинкаПодсистема", КартинкаИзМакета("КартинкаПодсистема"));
	ИнициализированныеКартинки.Вставить("КартинкаПодписка", КартинкаИзМакета("КартинкаПодписка"));
	ИнициализированныеКартинки.Вставить("КартинкаИнтернет", КартинкаИзМакета("КартинкаИнтернет"));
	ИнициализированныеКартинки.Вставить("КартинкаРоль", КартинкаИзМакета("КартинкаРоль"));	
	
	КаталогКонфигурации = ОпределитьКаталогКонфигурации();
	Путь = ПолучитьПутьИзмененийПоИмениФайла(Файл, КаталогКонфигурации);
	
	ЧастиПути = СтрРазделить(Путь, ".");
	Если ЧастиПути.Количество() < 2 Тогда
		Возврат Описание;
	КонецЕсли;
	
	ВидОбъекта = ЧастиПути[0];
	НазваниеОбъекта =  ЧастиПути[1];
	
	ИмяОбъекта = ОпределитьИмяОбъектаМетаданных(ВидОбъекта);
	
	Если Не ЗначениеЗаполнено(ИмяОбъекта) Тогда

		Если ЗначениеЗаполнено(КаталогКонфигурации) Тогда
			// todo
			//Элементы.Коммиты.ТекущиеДанные.КаталогКонфигурации = КаталогКонфигурации;
			ТекущийКаталогКонфигурации = КаталогКонфигурации;
			Путь = ПолучитьПутьИзмененийПоИмениФайла(Файл, КаталогКонфигурации);
			ЧастиПути = СтрРазделить(Путь, ".");
			ВидОбъекта = ЧастиПути[0];
			НазваниеОбъекта =  ЧастиПути[1];
			ИмяОбъекта = СтрШаблон("60.%1", ВидОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяОбъекта) Тогда
		
		ИмяДляСортировки = ИмяОбъекта;
		ИмяОбъекта = Сред(ИмяОбъекта, 4);
		//ИзмененияСвойств = ПолучитьИзмененияСвойствОбъекта(Файл, КоммитыДляСравнения);
		Картинка = ПолучитьКартинкуОбъектаМетаданных(ИмяОбъекта, ИнициализированныеКартинки);
		
		ИмяОбъекта = СтрШаблон("%1.%2", ИмяОбъекта, НазваниеОбъекта);
		Описание = Новый Структура();
		Описание.Вставить("ИмяОбъекта", ИмяОбъекта);
		Описание.Вставить("ИмяДляСортировки", ИмяДляСортировки);
		Описание.Вставить("Файл", Файл);
		Описание.Вставить("Путь", Путь);
		Описание.Вставить("Картинка", Картинка);
		Описание.Вставить("Составляющие", Новый Массив);
		Описание.Вставить("ТипОбъекта", ТипОбъекта);
		
		//Описание.Вставить("ИзмененияСвойств", ИзмененияСвойств);
		
		Картинка = Неопределено;
		
		Для Индекс = 2 По ЧастиПути.Количество() - 1 Цикл
			
			Часть = ЧастиПути[Индекс];
			
			Если Часть = "ManagerModule" Тогда
				Имя = "Модуль менеджера";
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли Часть = "ObjectModule" Тогда
				Имя = "Модуль объекта";
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли Часть = "Subsystems" Тогда
				Картинка = ИнициализированныеКартинки.КартинкаПодсистема;
				Продолжить;
			ИначеЕсли Часть = "Module" Или Часть = "CommandModule" Тогда
				Продолжить;
			ИначеЕсли Часть = "Forms" Тогда
				Картинка = БиблиотекаКартинок.Форма;
				Продолжить;
			ИначеЕсли Часть = "Commands" Тогда
				Имя = "Команды";
				Картинка = БиблиотекаКартинок.КомандаМенюФункций;
			ИначеЕсли Часть = "Templates" Тогда
				Имя = "Макеты";
				Картинка = БиблиотекаКартинок.ТабличныйДокументОтображатьЗаголовки;
			Иначе
				Если 0 < СтрНайти(Часть, "Форма") Тогда
					Картинка = БиблиотекаКартинок.Форма;
				КонецЕсли;
				Имя = Часть;
			КонецЕсли;
			
			Описание.Составляющие.Добавить(Новый Структура("Имя, Картинка", Имя, Картинка));
			Картинка = Неопределено;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьНомерВерсииОбработкамЗадачи(Задача, Ответстенный, Комментарий) Экспорт

	ОбъектыРазработки = Справочники.Задачи.ОбъектыРазработки(Задача);
	Для Каждого ОбъектРазработки Из ОбъектыРазработки Цикл
		Справочники.ОбъектыРазработки.ДобавитьВерсию(ОбъектРазработки, Задача, Ответстенный, Комментарий);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксированныеОбработкиЗаПериод() Экспорт

	МаксимальнаяДатаОбработки = РегистрыСведений.ЗафиксированныеОбработки.МаксимальнаяДатаОбработки();

	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	
	НастройкаПроектов = Справочники.Проекты.НастройкиПроектов();
	Для Каждого НастройкиПроекта Из НастройкаПроектов Цикл
		МерджРеквестовJSON = РаботаСGitLab.ТаблицаМерджРеквестовПоПроекту(НастройкиПользователя,
			НастройкиПроекта, МаксимальнаяДатаОбработки, ТекущаяДатаСеанса()
		);
		ТаблицаМерджРеквестов  = РаботаСGitLab.ТаблицаЗначенийМерджРеквестовИзМассива(МерджРеквестовJSON);
		
		СкомпилироватьОбработкиПоМерджРеквестам(ТаблицаМерджРеквестов, НастройкиПроекта);
	КонецЦикла;

КонецПроцедуры

Процедура СкомпилироватьОбработкиПоМерджРеквестам(ТаблицаМерджРеквестов, НастройкиПроекта)

	Задачи = ТаблицаМерджРеквестов.ВыгрузитьКолонку("Задача");
	СписокОбновляемыхОбработок = Справочники.Задачи.ОбъектыРазработкиПоЗадачам(Задачи);
	ФорматироватьСписокОбновляемыхОбработок(СписокОбновляемыхОбработок);

	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(НастройкиПроекта.БазаДляАктуализацииОбработок());

	КомандаЗапуска  = КомандыЗапускаПриложения.НовыйКомандаСборкаОбработок(ПараметрыБазы, НастройкиПроекта, СписокОбновляемыхОбработок);
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(
		НастройкиПроекта.БазаДляАктуализацииОбработок(), КомандаЗапуска);
		
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	ВыводКоманды = ДанныеЛогов.ПодробныйЛогСтрокой;
	
КонецПроцедуры

Процедура СкомпилироватьОбработкуПоВетке(ИмяВетки, Обработка, НастройкиПроекта, База) Экспорт

	СписокОбновляемыхОбработок = Строка(Обработка);
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	
	КомандаЗапуска  = КомандыЗапускаПриложения.НовыйКомандаСборкаОбработок(ПараметрыБазы, НастройкиПроекта, СписокОбновляемыхОбработок, ИмяВетки);
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(
		База, КомандаЗапуска);
		
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	ВыводКоманды = ДанныеЛогов.ПодробныйЛогСтрокой;
	
КонецПроцедуры

Процедура ФорматироватьСписокОбновляемыхОбработок(СписокОбновляемыхОбработок) Экспорт
	
	СписокОбновляемыхОбработок = СтрСоединить(СписокОбновляемыхОбработок, ",");
	
КонецПроцедуры

Функция ТипОбъектаПоФайлу(Файл) Экспорт
	
	Если СтрНайти(Файл, "src/epf") Тогда
		Возврат ВнешняяОбработка();
	ИначеЕсли СтрНайти(Файл, "src/cf/") Тогда
		Возврат ОсновнаяКонфигурация();
	ИначеЕсли СтрНайти(Файл, "src/cfe/ToolsWorld") Тогда
		Возврат Toolsworld();
	ИначеЕсли СтрНайти(Файл, "src/cfe/Aelita") Тогда
		Возврат Aelita();
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ВнешняяОбработка() Экспорт
	
	Возврат "ВнешняяОбработка";
	
КонецФункции

Функция ОсновнаяКонфигурация() Экспорт
	
	Возврат "ОсновнаяКонфигурация";
	
КонецФункции

Функция Toolsworld() Экспорт
	
	Возврат "Toolsworld";
	
КонецФункции

Функция Aelita() Экспорт
	
	Возврат "Aelita";
	
КонецФункции

Функция ТипОбъектаРазработкиПоФайлу(Файл) Экспорт
	
	Результат = Перечисления.ТипыОбъектовРазработки.Обработка;
	Если Файл.Расширение = ".erf" Тогда
		Результат = Перечисления.ТипыОбъектовРазработки.Отчет;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Функция - Регулярное выражение поиска версии
// 
// Возвращаемое значение:
//   - пример итога поиска .Версия = "01012011
//
Функция РегулярноеВыражениеПоискаВерсии() Экспорт
	
	Возврат ".Версия\s*=\s*""\d+(\.\d+)?";
	
КонецФункции

Процедура СоздатьОбъектРазработки(Проект, Файл) Экспорт

	ОбработкаСсылка = Справочники.ОбъектыРазработки.НайтиПоНаименованию(Файл.ИмяБезРасширения);
	
	Если ОбработкаСсылка.Пустая() Тогда
		
		НовыйОбъект = Справочники.ОбъектыРазработки.СоздатьЭлемент();
		НовыйОбъект.Заполнить(Неопределено);
		НовыйОбъект.Владелец = Проект;
		НовыйОбъект.ТипОбъектаРазработки = ТипОбъектаПоФайлу(Файл);
		НовыйОбъект.Наименование = Файл.ИмяБезРасширения;
		НовыйОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьИмяОбъектаМетаданных(Имя)
	
	СоответствиеИмен = Новый Соответствие();
	СоответствиеИмен.Вставить("Subsystems", "01.Подсистема");
	СоответствиеИмен.Вставить("CommonModules", "02.ОбщийМодуль");
	СоответствиеИмен.Вставить("SessionParameters", "03.ПараметрСеанса");
	СоответствиеИмен.Вставить("Roles", "04.Роль");
	СоответствиеИмен.Вставить("ExchangePlans", "05.ПланОбмена");
	СоответствиеИмен.Вставить("FilterCriteria", "06.КритерийОтбора");
	СоответствиеИмен.Вставить("EventSubscriptions", "07.ПодпискаНаСобытие");
	СоответствиеИмен.Вставить("ScheduledJobs", "08.РегламентноеЗадание");
	СоответствиеИмен.Вставить("FunctionalOptions", "09.ФункциональнаяОпция");
	СоответствиеИмен.Вставить("FunctionalOptionsParameters", "10.ПараметрФункциональнойОпции");
	СоответствиеИмен.Вставить("DefinedTypes", "11.ОпределяемыйТип");
	СоответствиеИмен.Вставить("SettingsStorages", "12.ХранилищеНастроек");
	СоответствиеИмен.Вставить("CommonCommands", "13.ОбщаяКоманда");
	СоответствиеИмен.Вставить("CommandGroups", "14.ГруппаКоманд");
	СоответствиеИмен.Вставить("CommonForms", "15.ОбщаяФорма");
	СоответствиеИмен.Вставить("CommonTemplates", "16.ОбщийМакет");
	СоответствиеИмен.Вставить("CommonPictures", "17.ОбщаяКартинка");
	СоответствиеИмен.Вставить("XDTOPackages", "18.XDTOПакет");
	СоответствиеИмен.Вставить("WebServices", "19.WebСервис");
	СоответствиеИмен.Вставить("HTTPServices", "20.HTTPСервис");
	СоответствиеИмен.Вставить("WSReferences", "21.WSСсылка");
	СоответствиеИмен.Вставить("StyleItems", "22.ЭлементСтиля");
	СоответствиеИмен.Вставить("Styles", "23.Стиль");
	СоответствиеИмен.Вставить("Languages", "24.Язык");
	СоответствиеИмен.Вставить("Constants", "25.Константа");
	СоответствиеИмен.Вставить("Catalogs", "26.Справочник");
	СоответствиеИмен.Вставить("Documents", "27.Документ");
	СоответствиеИмен.Вставить("DocumentNumerators", "28.Нумератор");
	СоответствиеИмен.Вставить("Sequences", "29.Последовательность");
	СоответствиеИмен.Вставить("DocumentJournals", "30.ЖурналДокументов");
	СоответствиеИмен.Вставить("Enums", "31.Перечисление");
	СоответствиеИмен.Вставить("Reports", "32.Отчет");
	СоответствиеИмен.Вставить("DataProcessors", "33.Обработка");
	СоответствиеИмен.Вставить("ChartsOfCharacteristicTypes", "34.ПланВидовХарактеристик");
	СоответствиеИмен.Вставить("ChartsOfAccounts", "35.ПланСчетов");
	СоответствиеИмен.Вставить("ChartsOfCalculationTypes", "36.ПланВидовРасчета");
	СоответствиеИмен.Вставить("InformationRegisters", "37.РегистрСведений");
	СоответствиеИмен.Вставить("CommonAttributes", "38.РегистрНакопления");
	СоответствиеИмен.Вставить("AccountingRegisters", "39.РегистрБухгалтерии");
	СоответствиеИмен.Вставить("AccumulationRegisters", "40.РегистрНакопления");
	СоответствиеИмен.Вставить("CalculationRegisters", "41.РегистрРасчета");
	СоответствиеИмен.Вставить("BusinessProcesses", "42.БизнесПроцесс");
	СоответствиеИмен.Вставить("Tasks", "43.Задача");
	СоответствиеИмен.Вставить("ExternalDataSources", "44.ВнешнийИсточникДанных");
	СоответствиеИмен.Вставить("epf", "45.Внешние обработки");
	
	Возврат СоответствиеИмен[Имя];
	
КонецФункции

Функция ОпределитьКаталогКонфигурации()
	
	//todo
	КаталогКонфигурации = "src/cf/";
	Возврат КаталогКонфигурации;
	
КонецФункции

Функция ПолучитьПутьИзмененийПоИмениФайла(Файл, КаталогКонфигурации)
	
	Путь = СтрЗаменить(Файл, КаталогКонфигурации, "");
	Путь = Лев(Путь, СтрДлина(Путь) - 4);
	
	ЧастиПути = СтрРазделить(Путь, "/");
	ЧастиБезИмени = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ЧастиПути);
	ЧастиБезИмени.Удалить(0);
	//ЧастиБезИмени.Удалить(0);
	
	Если 0 < ЧастиБезИмени.Количество() Тогда
		ПутьБезИмени = СтрСоединить(ЧастиБезИмени, ".");
		ПутьБезИмени = СтрЗаменить(ПутьБезИмени, "Form.", "");
		ПутьБезИмени = СтрЗаменить(ПутьБезИмени, "Ext.", "");
		Возврат СтрШаблон("%1.%2.%3", ЧастиПути[0], ЧастиПути[1], ПутьБезИмени);
	Иначе
		Возврат СтрЗаменить(Путь, "/", ".");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКартинкуОбъектаМетаданных(ИмяОбъекта, ИнициализированныеКартинки)
	
	Картинка = Неопределено;
	
	
	Если ИмяОбъекта = "Подсистема" Тогда
		Картинка = ИнициализированныеКартинки.КартинкаПодсистема;
	ИначеЕсли ИмяОбъекта = "ОбщаяФорма" Тогда
		Картинка = БиблиотекаКартинок.Форма;
	ИначеЕсли ИмяОбъекта = "ОпределяемыйТип" Тогда
		Картинка = БиблиотекаКартинок.ОформлениеКвадратыЗаполненныеОдин;
	ИначеЕсли ИмяОбъекта = "ОбщийМакет" Тогда
		Картинка = БиблиотекаКартинок.ТабличныйДокументОтображатьЗаголовки;
	ИначеЕсли ИмяОбъекта = "ПодпискаНаСобытие" Тогда
		Картинка = ИнициализированныеКартинки.КартинкаПодписка;
	ИначеЕсли ИмяОбъекта = "ОбщаяКоманда" Тогда
		Картинка = БиблиотекаКартинок.КомандаМенюФункций;
	ИначеЕсли ИмяОбъекта = "ОбщаяКартинка" Тогда
		Картинка = БиблиотекаКартинок.Картинка;
	ИначеЕсли ИмяОбъекта = "HTTPСервис" Или ИмяОбъекта = "WebСервис" Или ИмяОбъекта = "WSСсылка" Тогда
		Картинка = ИнициализированныеКартинки.КартинкаИнтернет;
	Иначе
		Попытка
			Картинка = БиблиотекаКартинок[ИмяОбъекта];
		Исключение
			Если ИмяОбъекта = "ОбщийМодуль" Тогда
				Картинка = БиблиотекаКартинок.РежимПросмотраСпискаСписок;
			ИначеЕсли ИмяОбъекта = "Роль" Тогда
				Картинка = ИнициализированныеКартинки.КартинкаРоль;
			Иначе
				Картинка = БиблиотекаКартинок.ОформлениеКвадратыПустые;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

Функция КартинкаИзМакета(ИмяМакета)
	
	Возврат Новый Картинка(ПолучитьОбщийМакет(ИмяМакета));
	
КонецФункции
#КонецОбласти


