// @strict-types

#Область ПрограммныйИнтерфейс

// Конструктор параметров для ЗапуститьПрограмму.
//
// Возвращаемое значение:
//  Структура:
//    * ТекущийКаталог - Строка - задает текущий каталог запускаемого приложения.
//    * ДождатьсяЗавершения - Булево - Ложь - дожидаться завершения запущенного приложения 
//         перед продолжением работы.
//    * ПолучитьПотокВывода - Булево - Ложь - результат, направленный в поток stdout,
//         если не указан ДождатьсяЗавершения - игнорируется.
//    * ПолучитьПотокОшибок - Булево - Ложь - ошибки, направленные в поток stderr,
//         если не указан ДождатьсяЗавершения - игнорируется.
//    * КодировкаПотоков - КодировкаТекста
//                       - Строка - кодировка, используемая для чтения stdout и stderr.
//         По умолчанию используется для Windows "CP866", для остальных - "UTF-8".
//    * КодировкаИсполнения - Строка
//                          - Число - кодировка, устанавливаемая в Windows с помощью команды chcp,
//             возможные значения: "OEM", "CP866", "UTF8" или номер кодовой страницы.
//         В Linux устанавливается переменной окружения "LANGUAGE" для конкретной команды,
//             возможные значения можно определить выполнив команду "locale -a", например "ru_RU.UTF-8".
//         В MacOS игнорируется.
//    * ЮРЛАгента - Путь к базе которая запускает скрипт на удаленном сервере.
//
Функция ПараметрыЗапускаПрограммы() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("КомандаЗапуска", "");
	Параметры.Вставить("СтрокаКоманды", "");
	Параметры.Вставить("ТекущийКаталог", "");
	Параметры.Вставить("ДождатьсяЗавершения", Истина);
	Параметры.Вставить("ПолучитьПотокВывода", Истина);
	Параметры.Вставить("ПолучитьПотокОшибок", Истина);
	Параметры.Вставить("КодировкаПотоков", Неопределено);
	Параметры.Вставить("КодировкаИсполнения", Неопределено); 
	Параметры.Вставить("ИмяФайлаПотокаВывода", ""); 
	Параметры.Вставить("ИмяФайлаПотокаВыводаНаСервере", ""); 
	Параметры.Вставить("ИмяФайлаПотокаОшибок", ""); 
	Параметры.Вставить("ПутьКПапкеДевопс", "");
	Параметры.Вставить("ЮРЛАгентаБазы", "");
	Параметры.Вставить("ЮРЛАгентаДженкинс", "");
	Параметры.Вставить("НомерJob" "");
	Параметры.Вставить("ПараметрыЗапроса", Новый Структура);
	Параметры.Вставить("ДополнительныеПараметрыЗапроса", Новый Структура);
	Параметры.Вставить("СтратегияЗапуска", Строка(Константы.СтратегияЗапускаСкрипта.Получить()));
	Параметры.Вставить("URLJenkins", "");
	Параметры.Вставить("UID", "");
	Параметры.Вставить("ИмяJobJenkins", "");
	Параметры.Вставить("ДополнительнаяКоманда", "");
	
	Возврат Параметры;
	
КонецФункции

Процедура ЗапускПриложения(ПараметрыЗапускаПрограммы) Экспорт
	
	МенеджерЗапускаСкрипта = СтратегияЗапускаСкрипта(ПараметрыЗапускаПрограммы);
	МенеджерЗапускаСкрипта.ЗапускПриложения(ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

Функция ПодготовкаПараметровИЗапускПриложения(База, Команда, ТекущийКаталог = Неопределено, ДополнительнаяКоманда = "") Экспорт
	
	СтрокаКоманды = СобраннаяСтрокаКоманды(Команда);
		
	НастройкиБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	ЗначениеКластераСерверов = Неопределено;
	Если Не НастройкиБазы.Свойство("КластерСерверов", ЗначениеКластераСерверов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ЗначениеКластераСерверов) Тогда 
		ОбщегоНазначения.СообщитьПользователю("Ошибка: у базы не указан кластер серверов!");
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыЗапуска = ПараметрыЗапускаПрограммы();
	ПараметрыЗапуска.КомандаЗапуска = Команда;
	ПараметрыЗапуска.СтрокаКоманды = СтрокаКоманды;
	Если Не ЗначениеЗаполнено(ТекущийКаталог) Тогда
		ПараметрыЗапуска.ТекущийКаталог = НастройкиБазы.КаталогБазы;
	Иначе
		ПараметрыЗапуска.ТекущийКаталог = ТекущийКаталог;
	КонецЕсли;
	ПараметрыЗапуска.ЮРЛАгентаБазы = Справочники.Базы.ЮРЛАгентаБазы(База);
	ПараметрыЗапуска.ПутьКПапкеДевопс = НастройкиБазы.ПутьКПапкеДевопс;
	
	Если Не ПустаяСтрока(ДополнительнаяКоманда) Тогда
		ПараметрыЗапуска.СтрокаКоманды = СтрШаблон("%1 && %2", ДополнительнаяКоманда, ПараметрыЗапуска.СтрокаКоманды);
	КонецЕсли;
	
	
	ЗапускПриложения(ПараметрыЗапуска);
	Возврат ПараметрыЗапуска;
	
КонецФункции

Процедура ПолучитьВывод(ДанныеЛогов) Экспорт

	МенеджерЗапускаСкрипта = СтратегияЗапускаСкрипта(ДанныеЛогов);
	МенеджерЗапускаСкрипта.ПолучитьВывод(ДанныеЛогов);
	
КонецПроцедуры

Функция ДанныеЛогов(ПараметрыЗапуска, ПолучатьВывод = Истина) Экспорт
	
	КлассРаботаСЛогами = Обработки.РаботаСЛогами.Создать();
	Если ПолучатьВывод Тогда
		ПолучитьВывод(ПараметрыЗапуска);
	КонецЕсли;
	ДанныеЛогов = РаботаСЛогами.НовыйДанныеЛогов();
	ДанныеЛогов.ИмяФайлаПотокаВывода = ПараметрыЗапуска.ИмяФайлаПотокаВыводаНаСервере;
	Попытка
		
		ДанныеЛогов = КлассРаботаСЛогами.ПроверкаФайлаЛогов(ДанныеЛогов)
			.ОпределитьИзмененияВФайлеЛогов("cp866")
			.РазложитьСтрокиПодменитьТекст()
			.ПолучитьТекстСтатусаВыполнения()
			.ПриложениеЗавершено()
			.РазложитьЛоги()
			.ЕстьОшибки()
			.ДанныеЛогов();
			
	Исключение
		//Есть ситуация когда файла логов еще нет
		//Кидается исключение, потом с этим надо поработать
	КонецПопытки;
	
	Возврат ДанныеЛогов;
	
КонецФункции

Функция ДанныеЛоговСОжиданием(ПараметрыЗапуска) Экспорт
	
	Пока Истина Цикл
		ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛогов(ПараметрыЗапуска);
		
		Если ДанныеЛогов.Выполнено Тогда
			Прервать;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазыСлужебный.Пауза(1);
	КонецЦикла;
	
	Возврат ДанныеЛогов;
	
КонецФункции

Функция ДанныеЛоговБезОжидания(ПараметрыЗапуска) Экспорт
	
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛогов(ПараметрыЗапуска);
	
	Возврат ДанныеЛогов;
	
КонецФункции

Функция ИмяВременногоФайла(ПутьКПапке) Экспорт
	
	НужнаОтладка = Константы.ОтладкаЛогов.Получить();
	Если НужнаОтладка Тогда
		УИД = Строка(Новый УникальныйИдентификатор);
		ИмяФайла = СтрШаблон("%1\Логи\%2.txt", ПутьКПапке, УИД);
	Иначе
		ИмяФайла = ПолучитьИмяВременногоФайла("log")
	КонецЕсли;

	Возврат ИмяФайла;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция СтратегияЗапускаСкрипта(ПараметрыЗапуска)
	
	Стратегия = Перечисления.СтратегияЗапускаСкрипта[ПараметрыЗапуска.СтратегияЗапуска];
	
	Если Не ЗначениеЗаполнено(Стратегия) Тогда
		ВызватьИсключение НСтр("ru='Не выбранна стратегия'");	
	КонецЕсли;
	//Выбор нужного общего модуля
	Стратегии = Новый Соответствие;
	Стратегии.Вставить(Перечисления.СтратегияЗапускаСкрипта.CMD    , ЗапускПриложенийЧерезCMD);
	Стратегии.Вставить(Перечисления.СтратегияЗапускаСкрипта.Shell  , ЗапускПриложенийЧерезShell);
	Стратегии.Вставить(Перечисления.СтратегияЗапускаСкрипта.HTTP   , ЗапускПриложенияЧерезHTTP);
	Стратегии.Вставить(Перечисления.СтратегияЗапускаСкрипта.Jenkins, ЗапускПриложенияЧерезJENKINS);
	
	Возврат Стратегии[Стратегия];
	
КонецФункции

Функция СобраннаяСтрокаКоманды(Команда)
	
	Результат = "";
	Если ТипЗнч(Команда) = Тип("Строка") Тогда
		Результат = СтрСоединить(Команда, " ");
		Результат = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(Результат);		
	Иначе
		Если ТипЗнч(Команда[0]) = Тип("Строка") Тогда
			Результат = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(СтрСоединить(Команда, " "));				
		Иначе
			ПервыйПроход = Истина;
			Для Каждого Элемент Из Команда Цикл		
				СтрокаКоманды = ОбщегоНазначенияСлужебныйКлиентСервер.БезопаснаяСтрокаКоманды(Элемент);				
			
				Если ПервыйПроход Тогда
					Результат = СтрокаКоманды;
					ПервыйПроход = Ложь;
				Иначе	
					Результат = СтрШаблон("%1 && %2", Результат, СтрокаКоманды);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;

КонецФункции

#КонецОбласти

