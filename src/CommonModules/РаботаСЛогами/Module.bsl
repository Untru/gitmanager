// @strict-types

#Область ПрограммныйИнтерфейс

Функция ПодменыВыводаЛога() Экспорт
	
	//Очередность не менять! На очередность завязан индикатор
	СписокПодмены = Новый СписокЗначений;
	СписокПодмены.Добавить("cluster list",                               "[RAC] Получение информации о кластере");
	СписокПодмены.Добавить("infobase summary list",                      "[RAC] Получение списка баз кластера");
	СписокПодмены.Добавить("pull",                                       "[GIT] Получаем изменения репозитория");
	СписокПодмены.Добавить(" symbolic-ref --short",                      "[GIT] Получаем информацию о текущей ветке");
	СписокПодмены.Добавить("--version",                                  "[IBCMD] Получение версии 1с");
	СписокПодмены.Добавить(" add ",                                      "[GIT] Добавление изменений к фиксации");
	СписокПодмены.Добавить(" branch ",                                   "[GIT] Переход на ветку");
	СписокПодмены.Добавить(" checkout ",                                 "[GIT] Проверка ветки");
	СписокПодмены.Добавить("-sessions-deny=on",                          "[RAC] Блокировка базы");
	СписокПодмены.Добавить("session list",                               "[RAC] Получаем список сеансов в базе");
	СписокПодмены.Добавить("connection list",                            "[RAC] Получаем список соединений в базе");
	СписокПодмены.Добавить("session terminate",                          "[RAC] Завершаем сеансы");
	СписокПодмены.Добавить("LoadConfigFromFiles",                        "[1CV8] Загрузка конфигурации из файлов");
	СписокПодмены.Добавить("infobase config export",                     "[IBCMD] Экспортируем конфигурацию из базы в файлы");
	СписокПодмены.Добавить(" infobase config import ",                   "[IBCMD] Загрузка конфигурации в базу");
	СписокПодмены.Добавить("-Extension",                                 "[1CV8] Работа с расширением");
	СписокПодмены.Добавить("LoadExternalDataProcessorOrReportFromFiles", "[1CV8] Загрузка внешней обработки");
	СписокПодмены.Добавить("DumpExternalDataProcessorOrReportToFiles",   "[1CV8] Вызрузка внешней обработки");
	СписокПодмены.Добавить(" infobase config apply ",                    "[IBCMD] Применение изменений в базе");;
	СписокПодмены.Добавить("ОбновлениеОбработок#",                       "[1CV8] Загрузка обработок в базу");
	СписокПодмены.Добавить(" push ",                                     "[GIT] Отправка изменений на сервер");
	СписокПодмены.Добавить("sessions-deny=off",                          "[RAC] Снятие блокировки базы");
	
	Возврат СписокПодмены;
	
КонецФункции

Функция НовыйДанныеЛогов() Экспорт
	
	ДанныеЛогов = Новый Структура;
	ДанныеЛогов.Вставить("ИмяФайлаПотокаВывода", "");
	ДанныеЛогов.Вставить("ИмяФайлаПотокаОшибок", "");
	ДанныеЛогов.Вставить("ДлинаПодробногоЛога", 0); //
	ДанныеЛогов.Вставить("КраткийЛог", Новый Массив);
	ДанныеЛогов.Вставить("ПодробныйЛог", Новый Массив);
	ДанныеЛогов.Вставить("КраткийЛогСтрокой", "");
	ДанныеЛогов.Вставить("ПодробныйЛогСтрокой", "");
	ДанныеЛогов.Вставить("ЛогИндикатора", Новый Массив);
	ДанныеЛогов.Вставить("ИзмененияПодробныйЛог", "");
	ДанныеЛогов.Вставить("ПодменыВыводаЛога", ПодменыВыводаЛога());
	ДанныеЛогов.Вставить("МаксимумИндикатора", ДанныеЛогов.ПодменыВыводаЛога.Количество());
	ДанныеЛогов.Вставить("Индикатор", 0);
	ДанныеЛогов.Вставить("ИзмененияЛогов", Ложь);
	ДанныеЛогов.Вставить("ЕстьОшибки", Ложь);
	ДанныеЛогов.Вставить("СтатусВыполнения", "");
	ДанныеЛогов.Вставить("АдресМерджРеквеста", "");
	ДанныеЛогов.Вставить("Выполнено", Ложь);
	
	Возврат ДанныеЛогов;
КонецФункции

Функция УдалитьВременныеФайлы(ДанныеЛогов) Экспорт
	УдалитьВременныйФайл(ДанныеЛогов.ИмяФайлаПотокаВывода);
КонецФункции

Процедура УдалитьОсновнойФайлЛоговПриВыполненииОперации(ПутьКФайлу) Экспорт	
	
	ДанныеЛогов = РаботаСЛогами.НовыйДанныеЛогов();
	ДанныеЛогов.ИмяФайлаПотокаВывода = ПутьКФайлу;
	
	КлассРаботаСЛогами = Обработки.РаботаСЛогами.Создать();
	
	ДанныеЛогов = КлассРаботаСЛогами.ПроверкаФайлаЛогов(ДанныеЛогов)
		.ОпределитьИзмененияВФайлеЛогов("cp866")
		.РазложитьСтрокиПодменитьТекст()
		.ПолучитьТекстСтатусаВыполнения()
		.ПриложениеЗавершено()
		.ДанныеЛогов();		
	
	Если ДанныеЛогов.Выполнено Тогда
		УдалитьФайлы(ПутьКФайлу);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьВременныйФайл(ИмяФайлаЛогов)
	
	Попытка
		ФайлЛогов = Новый Файл(ИмяФайлаЛогов);
		Если ФайлЛогов.Существует() Тогда 
			ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаЛогов);
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти