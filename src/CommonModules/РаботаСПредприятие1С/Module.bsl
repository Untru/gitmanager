// @strict-types


#Область ПрограммныйИнтерфейс

Процедура ДобавитьРезультатЗадачи(РезультатЗадачи, НомерЗадачи) Экспорт

	СсылкаBitrix = РаботаСBitrix.СсылкаBitrixПользователя();
	Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(СсылкаBitrix, НомерЗадачи, РезультатЗадачи);
	OPI_Bitrix24.СоздатьРезультатИзКомментария(СсылкаBitrix, Ответ["result"]);
	OPI_Bitrix24.ЗавершитьЗадачу(СсылкаBitrix, НомерЗадачи);
	
КонецПроцедуры

Функция СоответствиеСостоянийКанбан() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("Беклог", "1653");
	Результат.Вставить("Анализ", "535");
	Результат.Вставить("ОжидаетАналитики", "10329");
	Результат.Вставить("СогласованиеФТ", "10328");
	Результат.Вставить("ОжидаетРазработки", "10330");
	Результат.Вставить("Разработка", "302");
	Результат.Вставить("CodeReview", "10331");
	Результат.Вставить("Тестирование", "303");
	Результат.Вставить("ФормированиеИнструкций", "10332");
	Результат.Вставить("ПриемкаЗаказчиком", "543");
	Результат.Вставить("ВОчередиНаРелиз", "594");
	Результат.Вставить("Отменено", "863");
	Результат.Вставить("Выполнено", "304");
	
	Возврат Результат;
КонецФункции

Функция СоздатьЗадачуНаРевьюКЗадаче(Задача) Экспорт

	Возврат Задача;
	
КонецФункции

Функция ТокенBitrix() Экспорт
	
	Возврат Константы.ТокенBitrix.Получить();
	
КонецФункции

Функция ТокенBitrixТекущегоПользователя() Экспорт
		
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	Возврат НастройкиПользователя.ТокенBitrix;
	
КонецФункции

Процедура ОбновитьДанныеЗадач() Экспорт
	
	ТаблицаЗадач = Справочники.Задачи.НеЗакрытыеЗадачи();
	ОбновитьДанныеЗадачПоТаблице(ТаблицаЗадач);
	
КонецПроцедуры

Процедура ОбновитьДанныеЗадачПоТаблице(ТаблицаЗадач) Экспорт
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	Если НастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнены настройки пользователя!'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗадачи Из ТаблицаЗадач Цикл
		Попытка
			ДанныеЗаполнения = СтруктурированныеДанныеПоЗадаче(СтрокаЗадачи.НомерЗадачи, СтрокаЗадачи.Проект.ТаскТрекер);
			
			ЗадачаОбъект = СтрокаЗадачи.Задача.ПолучитьОбъект();
			ЗадачаОбъект.Заблокировать();
			ЗадачаОбъект.ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения);
			Если ЗадачаОбъект.ПроверитьЗаполнение() Тогда
				ЗадачаОбъект.Записать();
			КонецЕсли;
		Исключение
			ТекстСообщения = ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон("%1 Не загрузилась
				|%2", СтрокаЗадачи.НомерЗадачи, ТекстСообщения);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ВидЗадачи(Код) Экспорт
	
	Возврат Код;
	
КонецФункции

Функция ТипЗаявки(Код) Экспорт
	
	Возврат Код;
	
КонецФункции

Процедура ИзменитьУЗадачиКонтрольныйСрокИСРМ(Задача) Экспорт
	
	

КонецПроцедуры

Функция ДанныеЗадачи(НомерЗадачи, ТаскТрекер) Экспорт
	
	//todo
	УстановитьПривилегированныйРежим(Истина);
	Пароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(ТаскТрекер, "Пароль");
	УстановитьПривилегированныйРежим(Ложь);
	
	Аутентификация = Новый Структура("Пользователь, Пароль", ТаскТрекер.Логин, Пароль);
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("id", НомерЗадачи);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL", Ложь);
	ДополнительныеПараметры.Вставить("Аутентификация", Аутентификация);
	
	Возврат КоннекторHTTP.GetJson(ТаскТрекер.URL, ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецФункции

// Функция - Структурированные данные по задаче
//
//Работа со структурой
//{
//  "Исполнитель": "",
//  "Трудозатраты_часов": 0,
//  "Статус": "",
//  "ДатаПринятияВРаботу": "",
//  "Описание_Задачи": "",
//  "Описание_Решения": "",
//  "Приоритет": ,
//  "Очередь": 
//}
// Параметры:
//  НомерЗадачи
// 
// Возвращаемое значение:
// Задача - СправочникСсылка.Задачи
//
Функция СтруктурированныеДанныеПоЗадаче(НомерЗадачи, ТаскТрекер) Экспорт
	
	ДанныеЗаполнения = Новый Структура();

	Задача = ДанныеЗадачи(НомерЗадачи, ТаскТрекер);
	
	ДанныеЗаполнения.Вставить("Наименование", Задача["Название"]);
	Если ДанныеЗаполнения.Наименование = "" Тогда
		ДанныеЗаполнения.Наименование = Задача["ОписаниеЗадачи"];
	КонецЕсли;
	ДанныеЗаполнения.Вставить("ПодробноеОписание", Задача["ОписаниеЗадачи"]);
	
	Ответственный = НайтиСоздатьПользователя(Задача["Исполнитель"], Задача["Исполнитель"]);
	ДанныеЗаполнения.Вставить("Ответственный", Ответственный);
	Автор = НайтиСоздатьПользователя(Задача["Автор"], Задача["Автор"]);
	ДанныеЗаполнения.Вставить("Постановщик", Автор);
	ДанныеЗаполнения.Вставить("ПлановоеВремя", Задача["ТрудозатратыЧасов"] * 60);
	ДанныеЗаполнения.Вставить("СтатусЗадачи", СопоставленныйСтатус(Задача["Статус"])); 
	ДанныеЗаполнения.Вставить("Статус", СопоставленныйСтатус(Задача["Статус"])); 
	ДанныеЗаполнения.Вставить("НомерЗадачи", НомерЗадачи);
	ДанныеЗаполнения.Вставить("ИмяВетки", СтрШаблон("%1", НомерЗадачи));
	ДанныеЗаполнения.Вставить("КрайнийСрок", ПрочитатьДатуJSON(Задача["КрайнийСрок"], ФорматДатыJSON.ISO));
	
	//todo
	ДанныеЗаполнения.Вставить("Владелец", Справочники.Проекты.НайтиПоНаименованию("УНФ"));
		
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция СопоставленныйСтатус(Статус)
	
	Статусы = Новый Соответствие();
	Статусы.Вставить("Принята", Перечисления.СтатусыЗадач.Завершена);
	Статусы.Вставить("В работе", Перечисления.СтатусыЗадач.Выполняется);
	Статусы.Вставить("Отменена", Перечисления.СтатусыЗадач.Завершена);
	Статусы.Вставить("Запланирована", Перечисления.СтатусыЗадач.ЖдетВыполнения);
	Статусы.Вставить("РевьюКода", Перечисления.СтатусыЗадач.ЖдетКонтроля);
	Статусы.Вставить("Проверка выполенной работы", Перечисления.СтатусыЗадач.ЖдетКонтроля);
	Статусы.Вставить("В оценке разработчика", Перечисления.СтатусыЗадач.НаОценке);
	Статусы.Вставить("Новая", Перечисления.СтатусыЗадач.Новая);

	Возврат Статусы[Статус];
	
КонецФункции


Функция НайтиСоздатьПользователя(ИмяПользователя, IDПользователяBitrix)
	
	УстановитьПривилегированныйРежим(Истина);

	ТекПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	ПользовательСуществует = ЗначениеЗаполнено(ТекПользователь);
	
	Если НЕ ПользовательСуществует Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Пользователь.Наименование = ИмяПользователя;
		Пользователь.Записать();
		ТекПользователь = Пользователь.Ссылка;
	КонецЕсли;
	
	Возврат ТекПользователь;
	
КонецФункции

Функция ПолучитьСписокТрудозатратЗадачи(НомерЗадачи) Экспорт
	
	Возврат OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(СсылкаBitrixПользователя(), НомерЗадачи);
	
КонецФункции

Функция СсылкаBitrix() Экспорт
	
	ИДПользователя = "1"; // Администратор
	СсылкаBitrix = СтрШаблон("https://b24/rest/%1/%2", ИДПользователя, ТокенBitrix());
	
	Возврат СсылкаBitrix;
	
КонецФункции

Функция СсылкаBitrixПользователя(Пользователь = Неопределено) Экспорт
	
	НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
	
	СсылкаBitrix = СтрШаблон("https://b24/rest/%1/%2",
		НастройкаПользователя.IDПользователяBitrix,
		НастройкаПользователя.ТокенBitrix
	);
	
	Возврат СсылкаBitrix;

КонецФункции

Функция СтрокаЗапроса() Экспорт
	
	Возврат "http://localhost/work/hs/tasks/task";
	
КонецФункции

Процедура ДобавитьСпринтВБазовуюЗадачу(Задача) Экспорт
	
	
КонецПроцедуры

Процедура ЗавершитьРабочийДеньПользователей() Экспорт
	
	ПользователиСАвтотрудозатратами = Справочники.НастройкиПользователей.ПользователиСАвтотрудозатратами();
	ДанныеРаспределенныхТрудозатратПользователей = ДанныеРаспределенныхТрудозатратПользователей(ПользователиСАвтотрудозатратами);
	
	ОтправитьДанныеРаспределенныхТрудозатратПользователейВБитрикс(ДанныеРаспределенныхТрудозатратПользователей);
	ОтправитьКонецРабочегоДняПользователей(ПользователиСАвтотрудозатратами);
	
КонецПроцедуры

Процедура НачатьРабочийДеньПользователей() Экспорт
	
	ПользователиСАвтотрудозатратами = Справочники.НастройкиПользователей.ПользователиСАвтотрудозатратами();
	ОтправитьНачалоРабочегоДняПользователей(ПользователиСАвтотрудозатратами);
	
КонецПроцедуры

Процедура ДобавитьКомментариемРезультатыТестов(СсылкаНаТест, Удачные, Неудачные, Задача) Экспорт

	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОРезультатахТеста(), 
		СсылкаНаТест, Удачные, Неудачные, ОбщегоНазначенияУправлениеРазработкой.СимволКакашки()
	);
	
	СсылкаBitrix = РаботаСBitrix.СсылкаBitrixПользователя();
	Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(СсылкаBitrix, Задача.НомерЗадачи, ТекстКомментария);
	
КонецПроцедуры

Функция СвязанныеЗадачи(НомерЗадачи) Экспорт

	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("taskId", НомерЗадачи);
	ПараметрыЗапроса.Вставить("filter[FIELD]", "DEPENDS_ON");

	Ответ = КоннекторHTTP.GetJson(РаботаСBitrix.СсылкаBitrixПользователя() + "/tasks.task.history.list.json", 
		ПараметрыЗапроса
	);
	
	ЗадачиСтрокой = ""; 
	Попытка
		СписокИзменений = Ответ["result"]["list"];
		Если СписокИзменений.Количество() = 0 Тогда
			Возврат Новый Массив;
		КонецЕсли;
		Запись = СписокИзменений[СписокИзменений.ВГраница()];
		ЗадачиСтрокой = Запись["value"]["to"];
	Исключение
		ЗаписьЖурналаРегистрации("РаботаСBitrix.СвязанныеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, 
			СтрШаблон(НСтр("ru='Ошибка загрузки связанных задач к задаче %1
			|%2'"), НомерЗадачи, ОписаниеОшибки())
		);
	КонецПопытки;
	МассивЗадач = СтрРазделить(ЗадачиСтрокой, ",", Ложь);
	МассивЗадач = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗадач);
	Возврат МассивЗадач;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаИзJSON(ДатаJSON)

	Если ДатаJSON = Неопределено Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат ПрочитатьДатуJSON(ДатаJSON, ФорматДатыJSON.ISO);
	КонецЕсли;
	
КонецФункции

// Функция - Шаблон сообщения о результатах теста
// 
//** 1 Параметр - Ссылка на аллур
//** 2 Параметр - Удачные тесты
//** 3 Параметр - Неудачные тесты
//
Функция ШаблонСообщенияОРезультатахТеста() Экспорт
	
	Результат = "
	|[IMG WIDTH=152 HEIGHT=151]https://i.playground.ru/p/C78G5UkOUEH-MD5OmwQspA.png?760xauto[/IMG]
	|[URL=%1]
	|[SIZE=20pt]Результаты тестов[/SIZE][/URL]
	|[TABLE][TR][TD][SIZE=24pt]❤️ [/SIZE][/TD][TD][SIZE=24pt] %2 удачных [/SIZE][/TD][/TR]
	|[TR][TD][SIZE=24pt]%4[/SIZE][/TD][TD][SIZE=24pt][/SIZE][SIZE=24pt] %3 неудачных[/SIZE][/TD][/TR][/TABLE]";
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьКонецРабочегоДняПользователей(ПользователиСАвтотрудозатратами)
	
	Для Каждого Пользователь Из ПользователиСАвтотрудозатратами Цикл
		
		URL = СсылкаBitrixПользователя(Пользователь);
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
		
		OPI_Bitrix24.ЗавершитьУчетВремени(URL, НастройкаПользователя.IDПользователяBitrix);
		
		Комментарий = СтрШаблон("Отправлен учет времени по пользователю %1",
			Пользователь
		);	
		
		ЗаписьЖурналаРегистрации("Отправка учета времени b24",,,, Комментарий);		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьНачалоРабочегоДняПользователей(ПользователиСАвтотрудозатратами)
	
	Для Каждого Пользователь Из ПользователиСАвтотрудозатратами Цикл
		
		URL = СсылкаBitrixПользователя(Пользователь);
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
		
		OPI_Bitrix24.НачатьУчетВремени(URL, НастройкаПользователя.IDПользователяBitrix);
		
		Комментарий = СтрШаблон("Отправлен учет времени по пользователю %1",
			Пользователь
		);	
		
		ЗаписьЖурналаРегистрации("Отправка учета времени b24",,,, Комментарий);		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаНачалаРабочегоДня()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 32400; 
КонецФункции

Функция ДатаКонецРабочегоДня()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 64800; 
КонецФункции

Функция ДанныеРаспределенныхТрудозатратПользователей(ПользователиСАвтотрудозатратами)
	
	ТаблицаРаспределяемоеКоличество = Справочники.НастройкиПользователей.ТаблицаКоличествоНераспределенныхМинут(
		ПользователиСАвтотрудозатратами
	);
	
	ТекущийСпринт = Справочники.Спринты.ТекущийСпринт();
	
	ТаблицаЗадач = Справочники.Задачи.ТаблицаОткрытыхЗадач(ПользователиСАвтотрудозатратами, ТекущийСпринт);
	
	Для Каждого ПользовательСАвтотрудозатратами Из ПользователиСАвтотрудозатратами Цикл
		
		СтрокаРаспределяемогоКоличества = ТаблицаРаспределяемоеКоличество.Найти(ПользовательСАвтотрудозатратами, "Пользователь");
		Если СтрокаРаспределяемогоКоличества = Неопределено Тогда
			РаспределяемоеКоличество = 480;
		Иначе
			РаспределяемоеКоличество = СтрокаРаспределяемогоКоличества.РаспределяемоеКоличество;
		КонецЕсли;
		
		Если РаспределяемоеКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пользователь", ПользовательСАвтотрудозатратами);
		
		СтрокиТаблицыЗадач = ТаблицаЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТаблицыЗадач Из СтрокиТаблицыЗадач Цикл
			
			Если СтрокаТаблицыЗадач.ПлановоеВремя <= СтрокаТаблицыЗадач.ЗатраченноеВремя Тогда
				Продолжить;		
			КонецЕсли;
			
			ОставшеесяКоличествоОтПлана = СтрокаТаблицыЗадач.ПлановоеВремя - СтрокаТаблицыЗадач.ЗатраченноеВремя;
			ДобавляемоеКоличество = Мин(ОставшеесяКоличествоОтПлана, РаспределяемоеКоличество);
			
			СтрокаТаблицыЗадач.ЗатраченноеВремя = СтрокаТаблицыЗадач.ЗатраченноеВремя + ДобавляемоеКоличество;				
			РаспределяемоеКоличество = РаспределяемоеКоличество - ДобавляемоеКоличество;
			СтрокаТаблицыЗадач.ДобавленноеВремя = СтрокаТаблицыЗадач.ДобавленноеВремя + ДобавляемоеКоличество;
			
			Если РаспределяемоеКоличество <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокиТаблицыЗадач.Количество() > 0 Тогда
			СтрокаТаблицыЗадач.ЗатраченноеВремя = СтрокаТаблицыЗадач.ЗатраченноеВремя + РаспределяемоеКоличество;
			СтрокаТаблицыЗадач.ДобавленноеВремя = СтрокаТаблицыЗадач.ДобавленноеВремя + РаспределяемоеКоличество;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Процедура ОтправитьДанныеРаспределенныхТрудозатратПользователейВБитрикс(ДанныеРаспределенныхТрудозатратПользователей)
	
	Для каждого СтрокаДанных Из ДанныеРаспределенныхТрудозатратПользователей Цикл
		
		Если СтрокаДанных.ДобавленноеВремя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		IDЗадачи = СтрокаДанных.НомерЗадачи;
		Время = СтрокаДанных.ДобавленноеВремя * 60;
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(СтрокаДанных.Пользователь);
		
		
		Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(СсылкаBitrixПользователя(СтрокаДанных.Пользователь),
			IDЗадачи,
			Время,
			НастройкаПользователя.IDПользователяBitrix,
			,
			ДатаУстановкиВремениТрудозатрат()		
		);
		
		Комментарий = СтрШаблон("Отправлены трудозатраты по задаче %1 по пользователю %2 в минутах %3",
			СтрокаДанных.НомерЗадачи,
			СтрокаДанных.Пользователь,
			СтрокаДанных.ДобавленноеВремя
		);	
		
		ЗаписьЖурналаРегистрации("Отправка трудозатрат b24",,,, Комментарий); 
	
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаУстановкиВремениТрудозатрат()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 40200;
КонецФункции

Функция ПривестиКЧислу(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура ЗагрузкаЗадач() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Владелец КАК Пользователь,
		|	НастройкиПользователей.IDПользователяBitrix КАК IDПользователяBitrix
		|ИЗ
		|	Справочник.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.IDПользователяBitrix <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЗадачПользователя(Выборка.Пользователь, Выборка.IDПользователяBitrix);
	КонецЦикла;

КонецПроцедуры

Процедура СписокЗадачПользователя(Пользователь, IDПользователяBitrix)
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("RESPONSIBLE_ID", Число(IDПользователяBitrix));

	МассивФильтров = Новый Массив;
	МассивФильтров.Добавить("2");
	МассивФильтров.Добавить("3");
	
	ПараметрыЗапроса.Вставить("REAL_STATUS", МассивФильтров);
	
	Ответ = OPI_Bitrix24.ПолучитьСписокЗадач(РаботаСBitrix.СсылкаBitrixПользователя(Пользователь), ПараметрыЗапроса, 0);
	
	Если Ответ["result"] = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	СписокЗадач = Ответ["result"]["tasks"];
	
	Для Каждого Задача Из СписокЗадач Цикл
		
		ЗадачаПользователя = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", Задача["id"]);
		Если ЗадачаПользователя = Справочники.Задачи.ПустаяСсылка() Тогда
			Попытка
				Справочники.Задачи.НоваяЗадача(Задача["id"]);
				ЗаписьЖурналаРегистрации("ЗагрузкаЗадач", УровеньЖурналаРегистрации.Информация,,, 
					"Загружена задача " + Задача.НомерБитрикс
				);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибкиДляПользователя = ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнформацияОбОшибке);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(СтрШаблон("ru='Не удалось записать задачу %1
					|%2'", Задача["id"], ТекстОшибкиДляПользователя)
				);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЗадачиПоРеестру() Экспорт
	
	НомераЗадач = РегистрыСведений.ЗадачиКЗагрузке.СписокЗадачКЗагрузке();
	
	Для Каждого Элемент Из НомераЗадач Цикл
		Попытка
			Задача = Справочники.Задачи.НоваяЗадача(Элемент);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ДанныеЗаполнения = РаботаСBitrix.СтруктурированныеДанныеПоЗадачеИзБитрикс(Элемент);
			Если ЗадачаОбъект.ПрефиксВетки = Справочники.ПрефиксыЗадач.hotfix Тогда
				ЗадачаОбъект.ПоменятьСтатусыЗадачи(ДанныеЗаполнения);
			Иначе
				ЗадачаОбъект.Заполнить(ДанныеЗаполнения);
			КонецЕсли;
			ЗадачаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузкаЗадач'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		РегистрыСведений.ЗадачиКЗагрузке.УдалитьЗадачу(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗадачамБазовую(НомерЗадачи, Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.НомерЗадачиБазовой = &НомерЗадачиБазовой
		|	И Задачи.ОсновнаяЗадача = ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НомерЗадачиБазовой", НомерЗадачи);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗадачаДляУстановки = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаДляУстановки.Заблокировать();
			ЗадачаДляУстановки.ОсновнаяЗадача = Задача;
			ЗадачаДляУстановки.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проблема записи задачи'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
