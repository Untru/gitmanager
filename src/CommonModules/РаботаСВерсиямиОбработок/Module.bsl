Процедура ИзменитьВерсииОбработок(ТелоЗапроса) Экспорт
	
	ДанныеДляСменыВерсии = ОбщегоНазначения.JSONВЗначение(ТелоЗапроса,, Ложь);
	
	ПроставитьВерсииОбработкам(ДанныеДляСменыВерсии);
	
КонецПроцедуры	
	
Функция ПроставитьВерсииОбработкам(ДанныеДляСменыВерсии) Экспорт
	
	//Перейти на main
	//Создать ветку по релизу
	//Поправить файлы
	//Сделать add и комитт
	
	//Результат = Новый Структура("");
	//
	//
	//ОписаниеВерсии = "
	//	|Разработчик p.chegodaev@instrument.ru, версия:
	//	|20241225 - Доработана логика планирования ячеек
	//	|20241215 - Доработана логика установки флага не работает в состояниях сотрудника
	//	|20241122 - Переписана логика подбора ячеек в транзите";

	//
	//ОбработкиСписок = Новый Массив;
	//ОбработкиСписок.Добавить(Новый Структура("EPFName, NumberVersion, ChangeLog, ThisReport", 
	//	"МИ_РабочееМестоУпаковки", "1212992",  ОписаниеВерсии, Ложь)); 
	//
	//
	//ДанныеДляСменыВерсии = Новый Соответствие;
	//ДанныеДляСменыВерсии.Вставить("Repositories", "E:\Users\!DEVOps\Repositories\DEV_WMSRUSTL_CPS");
	//ДанныеДляСменыВерсии.Вставить("Release", "11");
	//ДанныеДляСменыВерсии.Вставить("EPF", ОбработкиСписок);
	ПутьКРепозиторию = ДанныеДляСменыВерсии.Repositories;
	
	//	Запуск с ожиданием завершения и получением потока вывода и с конкатенацией команды запуска
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	ПараметрыЗапускаПрограммы.ТекущийКаталог = ПутьКРепозиторию;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаПерейтиНаВеткуЛокально("main"), 
		ПараметрыЗапускаПрограммы
	);
	ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаОбновитьРепозиторийИзУдаленного(), 
		ПараметрыЗапускаПрограммы
	);
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаПерейтиНаНовуюВетку(ДанныеДляСменыВерсии.Release), 
		ПараметрыЗапускаПрограммы
	);
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаПерейтиНаНовуюВетку(ДанныеДляСменыВерсии.Release), 
		ПараметрыЗапускаПрограммы
	);
	
	Для Каждого Элемент Из ДанныеДляСменыВерсии.EPF Цикл
		
		ИмяОбработки = Элемент.EPFName;
		Расширение = ?(Элемент.ThisReport, "erf","epf");
		МодульОбъекта = СтрШаблон("%1/src/epf/%2/Ext/ObjectModule.bsl", ПутьКРепозиторию, ИмяОбработки);
		МакетВерсий = СтрШаблон("%1/src/epf/%2/Templates/ОписаниеИзменений/Ext/Template.txt", ПутьКРепозиторию, ИмяОбработки);
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(МакетВерсий);
		ТекстПолученный = Текст.ПолучитьТекст();

		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.УстановитьТекст(Элемент.ChangeLog);
		ТекстовыйФайл.ДобавитьСтроку(ТекстПолученный);
		ТекстовыйФайл.Записать(МакетВерсий, КодировкаТекста.UTF8, Символы.ПС);
		
		ПоменятьВерсиюОбработки(МодульОбъекта, Элемент.NumberVersion);
		

	КонецЦикла;
	Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаИндексироватьВсе(), 
		ПараметрыЗапускаПрограммы
	);
	//Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаКоммит(ДанныеДляСменыВерсии.Release), 
	//	ПараметрыЗапускаПрограммы
	//);
	//
	//Результат = ФайловаяСистема.ЗапуститьПрограмму(КомандыЗапускаПриложения.НовыйКомандаОтправить(), 
	//	ПараметрыЗапускаПрограммы
	//);
	
	
	Возврат Результат;
	
КонецФункции

Процедура ПоменятьВерсиюОбработки(ПутьКМодулюОбъекта, НоваяВерсия)
	
	СтрокаНоваяВерсия = СтрШаблон("Регистрация.Версия = ""%1""", НоваяВерсия);
	Текст = Новый ЧтениеТекста();
	Текст.Открыть(ПутьКМодулюОбъекта, КодировкаТекста.UTF8);
	
	ТекстМодуля = Текст.Прочитать();
	ТекстМодуля = СокрЛП(ТекстМодуля);
	Текст.Закрыть();
	
	РегулярноеДляПоискаВерсий = "Регистрация\.Версия\s*=\s*""\d+(\.\d+)?";
		
	ГруппаРезультатаПоискаПоРегулярномуВыражению = СтрНайтиПоРегулярномуВыражению(
		ТекстМодуля, РегулярноеДляПоискаВерсий);
	
	НовыйТекстМодуля = СтрЗаменить(ТекстМодуля, ГруппаРезультатаПоискаПоРегулярномуВыражению.Значение, СтрокаНоваяВерсия);
	
	ТекстовыйФайл = Новый ТекстовыйДокумент;
	ТекстовыйФайл.УстановитьТекст(НовыйТекстМодуля);
	ТекстовыйФайл.Записать(ПутьКМодулюОбъекта, КодировкаТекста.UTF8, Символы.ПС);

КонецПроцедуры

Процедура ИзменитьВерсииПоРелизу(Релиз) Экспорт
	
	ОбработкиСписок = Новый Массив;
	Для Каждого Элемент Из Релиз.ОбъектыРазработки Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ОбъектРазработки", Элемент.ОбъектРазработки);
		НайденныеСтроки = Релиз.Версии.НайтиСтроки(ПараметрыОтбора);
		ОписаниеВерсии = "";
		Для Каждого СтрокаВерсии Из НайденныеСтроки Цикл
			ОписаниеВерсии = ОписаниеВерсии + Символы.ПС + СтрокаВерсии.ОписаниеИзменения;
		КонецЦикла;
		ОбработкиСписок.Добавить(Новый Структура("EPFName, NumberVersion, ChangeLog, ThisReport", 
			СтрокаВерсии.ОбъектРазработки.Наименование, 
			Элемент.ВерсияОбъектаРазработки,  
			ОписаниеВерсии, 
			СтрокаВерсии.ОбъектРазработки.ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Отчет)
		); 
	
	КонецЦикла;
	ДанныеДляСменыВерсии = Новый Соответствие;
	НастройкиБазы = Справочники.Базы.НастройкиБазы(Релиз.Проект.БазаДляАктуализацииОбработок);
	
	ДанныеДляСменыВерсии.Вставить("Repositories", НастройкиБазы.КаталогБазы);
	ДанныеДляСменыВерсии.Вставить("Release", Релиз.НомерРелиза);
	ДанныеДляСменыВерсии.Вставить("EPF", ОбработкиСписок);
	
	ЮРЛАгентаБазы = НастройкиБазы.ИмяАгентаБазы + "/ChangeVersion";
	СменаОбработки = КоннекторHTTP.PostJson(ЮРЛАгентаБазы, ДанныеДляСменыВерсии);
	
КонецПроцедуры

