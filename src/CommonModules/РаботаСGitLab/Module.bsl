#Область ПрограммныйИнтерфейс

// Функция - Мердж реквесты
//
// Параметры:
//  URLGitLab		 - Строка 
//  ТокенГитлаб		 - Строка 
//  Статус			 - Строка - merged, opened, closed
//  НачалоПериода	 - Дата - Пример: "2024-07-24T08:00:00Z"
//  КонецПериода	 - Дата - Пример: "2024-08-24T08:00:00Z"
// 
// Возвращаемое значение:
//  Массив:
//		* Соответствие:
//			** "has_conflicts"
//			** "task_completion_status"
//			** "squash"
//			** "time_stats"
//			** "references"
//			** "reference"
//			** "web_url"
//			** "should_remove_source_branch"
//			** "discussion_locked"
//			** "merge_commit_sha"
//			** "detailed_merge_status"
//			** "work_in_progress"
//			** "labels"
//			** "reviewers"
//			** "assignee"
//			** "assignees"
//			** "merge_status"
//			** "author"
//			** "source_branch"
//			** "merge_when_pipeline_succeeds"
//			** "user_notes_count"
//			** "merged_at"
//			** "merged_by"
//			** "sha"
//			** "squash_commit_sha"
//			** "draft"
//			** "prepared_at"
//			** "closed_at"
//			** "upvotes"
//			** "updated_at"
//			** "blocking_discussions_resolved"
//			** "target_branch"
//			** "created_at"
//			** "closed_by"
//			** "state"
//			** "description"
//			** "title"
//			** "downvotes"
//			** "milestone"
//			** "force_remove_source_branch"
//			** "source_project_id"
//			** "project_id"
//			** "squash_on_merge"
//			** "iid"
//			** "target_project_id"
//			** "merge_user"
//			** "id"
//
Функция МерджРеквесты(URLGitLab, ТокенГитлаб, Статус, НачалоПериода, КонецПериода, ИДПроекта, Страница) Экспорт
		
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("scope", "all");
	ПараметрыЗапроса.Вставить("created_after", НачалоПериода);
	ПараметрыЗапроса.Вставить("created_before", КонецПериода);
	ПараметрыЗапроса.Вставить("page", Страница);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	ЮрлПоискМерджРеквестов = СтрШаблон("%1/api/v4/projects/%2/merge_requests", URLGitLab, ИДПроекта);

	МерджРеквесты = КоннекторHTTP.GetJson(ЮрлПоискМерджРеквестов, ПараметрыЗапроса, ДополнительныеПараметры);
	
	Возврат МерджРеквесты;
	
КонецФункции


Функция СписокКоммитовПоМерджРеквесту(URLGitLab, ИДПроекта, ИДМерджРеквеста, ТокенГитлаб) Экспорт
	
	ИдентификаторыКоммитов = Новый Массив;

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");
	
	Страница = 0;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	Пока Истина Цикл
		Страница = Страница + 1;
	
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("page", Страница);

		ЮрлИзмененияМерджРеквестов = СтрШаблон("%1/api/v4/projects/%2/merge_requests/%3/commits",
			URLGitLab, ИДПроекта, ИДМерджРеквеста
		);

		СписокКоммитов = КоннекторHTTP.GetJson(ЮрлИзмененияМерджРеквестов,
			ПараметрыЗапроса, ДополнительныеПараметры
		);
		
		Если СписокКоммитов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Для Каждого Элемент Из СписокКоммитов Цикл
			ИдентификаторыКоммитов.Добавить(Элемент["id"]);
		КонецЦикла;

	КонецЦикла;
	
	Возврат ИдентификаторыКоммитов;
	
КонецФункции

Функция ИзмененияПоКоммиту(URLGitLab, ИДПроекта, ИДМерджРеквеста, ТокенГитлаб, СписокКоммитов) Экспорт
	
	ТаблицаОбъектовПоИзменениямСпагинированная = НовыйТаблицаОбъектовПоИзменениям();

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");
	
	ПараметрыЗапроса = Новый Соответствие;
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	Для Каждого Элемент Из СписокКоммитов Цикл
		ЮРЛИзмененияПоКоммиту = СтрШаблон("%1/api/v4/projects/%2/repository/commits/%3/diff",
			URLGitLab, ИДПроекта, Элемент
		);
		
		ИзмененияПоКоммиту = КоннекторHTTP.GetJson(ЮРЛИзмененияПоКоммиту,
			ПараметрыЗапроса, ДополнительныеПараметры
		);
		
		ЮрлИнформацияОКоммите = СтрШаблон("%1/api/v4/projects/%2/repository/commits/%3",
			URLGitLab, ИДПроекта, Элемент
		);
		
		ОтветИнформацияОКоммите = КоннекторHTTP.GetJson(ЮрлИнформацияОКоммите,
			ПараметрыЗапроса, ДополнительныеПараметры
		);
		ИнформацияОВерсии = Новый Структура;
		ИнформацияОВерсии.Вставить("ДатаКоммита", ОтветИнформацияОКоммите["authored_date"]); 
		ИнформацияОВерсии.Вставить("ЗаголовокКоммита", ОтветИнформацияОКоммите["title"]); 
		ИнформацияОВерсии.Вставить("Автор", ОтветИнформацияОКоммите["committer_email"]); 
		
		Коммит = Новый Соответствие();
		Коммит.Вставить(Элемент, ИнформацияОВерсии);
	
		ТаблицаОбъектовПоИзменениям = ТаблицаОбъектовПоИзменениямПоDiff(ИзмененияПоКоммиту, Коммит);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОбъектовПоИзменениям, ТаблицаОбъектовПоИзменениямСпагинированная);	

	КонецЦикла;
	
	Возврат ТаблицаОбъектовПоИзменениямСпагинированная;
	
КонецФункции

Функция ПутьКАпиGitLab(ИДПроекта) Экспорт
	
	Возврат СтрШаблон("https://gitlabprojects.toolsworld.root.local/api/v4/projects/%1", ИДПроекта);
	
КонецФункции

Функция ИзмененияПоМерджРеквесту(URLGitLab, ИДПроекта, ИДМерджРеквеста, ТокенГитлаб) Экспорт
	
	ТаблицаОбъектовПоИзменениямСпагинированная = НовыйТаблицаОбъектовПоИзменениям();
	//todo
//	Заголовки = Новый Соответствие;
//	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
//	Заголовки.Вставить("content-type", "application/json");
//	
//	Страница = 0;
//		
//	ДополнительныеПараметры = Новый Структура;
//	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
//	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
//	
//	Пока Истина Цикл
//		Страница = Страница + 1;
//	
//		ПараметрыЗапроса = Новый Структура;
//		ПараметрыЗапроса.Вставить("page", Страница);

//		ЮрлИзмененияМерджРеквестов = СтрШаблон("%1/api/v4/projects/%2/merge_requests/%3/diffs",
//			URLGitLab, ИДПроекта, ИДМерджРеквеста
//		);

//		ИзмененияПоМерджРеквесту = КоннекторHTTP.GetJson(ЮрлИзмененияМерджРеквестов,
//			ПараметрыЗапроса, ДополнительныеПараметры
//		);
//		ЮрлИнформацияОКоммите = СтрШаблон("%1/api/v4/projects/%2/repository/commits/%3",
//			URLGitLab, ИДПроекта, Элемент
//		);
//		
//		ОтветИнформацияОКоммите = КоннекторHTTP.GetJson(ЮрлИзмененияМерджРеквестов,
//			ПараметрыЗапроса, ДополнительныеПараметры
//		);

//		ИнформацияОВерсии = Новый Структура;
//		ИнформацияОВерсии.Вставить("ДатаКоммита", ОтветИнформацияОКоммите["authored_date"]); 
//		ИнформацияОВерсии.Вставить("ЗаголовокКоммита", ОтветИнформацияОКоммите["title"]); 
//		ИнформацияОВерсии.Вставить("Автор", ОтветИнформацияОКоммите["committer_email"]); 
//		
//		ТаблицаОбъектовПоИзменениям = ТаблицаОбъектовПоИзменениямПоDiff(ИзмененияПоМерджРеквесту, ИнформацияОВерсии);
//		Если ТаблицаОбъектовПоИзменениям.Количество() = 0 Тогда
//			Прервать;
//		КонецЕсли;

//		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОбъектовПоИзменениям, ТаблицаОбъектовПоИзменениямСпагинированная);	

//	КонецЦикла;
//	
	Возврат ТаблицаОбъектовПоИзменениямСпагинированная;
	
КонецФункции

// Функция - Данные апрува мердж реквеста
//
// Параметры:
//  URLGitLab		 	- Строка 
//  ТокенГитлаб		 	- Строка 
//  НомерМерджРеквеста 	- Число
//  НомерПроекта	 	- Число
// 
// Возвращаемое значение:
//	Соответствие:
//		* "approved_by"
//		* "approved"
//		* "user_can_approve"
//		* "user_has_approved"
//
Функция ДанныеАпруваМерджРеквеста(URLGitLab, ТокенГитлаб, НомерМерджРеквеста, НомерПроекта) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	ЮрлПоискМерджРеквестов = СтрШаблон("%1/api/v4/projects/%2/merge_requests/%3/approvals",
		URLGitLab,
		НомерПроекта,
		НомерМерджРеквеста
	);

	Ответ = КоннекторHTTP.Get(ЮрлПоискМерджРеквестов,, ДополнительныеПараметры);	
	МерджРеквесты = КоннекторHTTP.КакJson(Ответ);
	
	Возврат МерджРеквесты;	
	
КонецФункции

Функция ОдобритьЗаявкуНаСлияние(URLGitLab, ТокенГитлаб, НомерМерджРеквеста, НомерПроекта) Экспорт
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
		
	ЮрлЗапросаНаОдобрение = СтрШаблон("%1/api/v4/projects/%2/merge_requests/%3/approve",
		URLGitLab,
		НомерПроекта,
		НомерМерджРеквеста
	);

	КоннекторHTTP.Post(ЮрлЗапросаНаОдобрение,, ДополнительныеПараметры);		
	
КонецФункции

// Функция - Таблица значений мердж реквестов из массива
//
// Параметры:
//  МерджРеквесты	 - см. МерджРеквесты 
// 
// Возвращаемое значение:
//   ТаблицаЗначений:
//		* НомерВетки - Строка
//		* Задача - СправочникСсылка.Задачи
//		* СсылкаМерджРеквест - Строка
//		* СтатусМерджРеквеста - Строка
//
Функция ТаблицаЗначенийМерджРеквестовИзМассива(МерджРеквесты, ДобавлятьНеНайденныеЗадачи = Ложь) Экспорт
	
	ТаблицаЗначений = НовыйТаблицаЗначенийМерджРеквестов();
	ЗаполнитьТаблицуЗначенийМерджРеквестовИзМассива(ТаблицаЗначений, МерджРеквесты, ДобавлятьНеНайденныеЗадачи);
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция ТаблицаМерджРеквестовПоПроекту(НастройкиПользователя, НастройкиПроекта, ДатаНачала, ДатаОкончания) Экспорт

	ТаблицаМерджРеквестовСпагинированная = НовыйТаблицаЗначенийМерджРеквестов();
	
	СтраницаМерджРеквестов = 0;
	Пока Истина Цикл
		
		СтраницаМерджРеквестов = СтраницаМерджРеквестов + 1;
		
		МерджРеквесты = МерджРеквесты(НастройкиПроекта.URLGitLab,
			НастройкиПользователя.ТокенGitLab,
			"merged",
			XMLСтрока(ДатаНачала),
			XMLСтрока(ДатаОкончания),
			НастройкиПроекта.ИДПроектаGitLab,
			СтраницаМерджРеквестов
		);
		
		ТаблицаМерджРеквестов = РаботаСGitLab.ТаблицаЗначенийМерджРеквестовИзМассива(МерджРеквесты);
		
		Если ТаблицаМерджРеквестов.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаМерджРеквестов, ТаблицаМерджРеквестовСпагинированная);	
		
	КонецЦикла;
	
	Возврат ТаблицаМерджРеквестовСпагинированная;
	
КонецФункции

Функция НовыйТаблицаЗначенийМерджРеквестов() Экспорт
		
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("НомерВетки",          Новый ОписаниеТипов("Строка"));	
	ТаблицаЗначений.Колонки.Добавить("Задача",              Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	ТаблицаЗначений.Колонки.Добавить("СсылкаМерджРеквест",  Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("СтатусМерджРеквеста", Новый ОписаниеТипов("Строка"));
	ТаблицаЗначений.Колонки.Добавить("НомерМерджРеквеста",  Новый ОписаниеТипов("Строка"));

	Возврат ТаблицаЗначений;
	
КонецФункции

Процедура СоздатьМерджРеквест(URLGitLab, ИДПроекта, ТокенГитлаб, ДанныеМерджРеквеста) Экспорт 
		
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", ТокенГитлаб);
	Заголовки.Вставить("content-type", "application/json");	

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);	
	
	URLЗапроса = СтрШаблон("%1/api/v4/projects/%2/merge_requests", URLGitLab,
			ИДПроекта);
	
	ОтветЗапроса = КоннекторHTTP.PostJson(URLЗапроса, ДанныеМерджРеквеста, ДополнительныеПараметры);
	
	Попытка
		ТекстСообщенияМерджРеквест = СтрШаблон("Создан мердж реквест: %1", Строка(ОтветЗапроса["web_url"]));
		Сообщить(ТекстСообщенияМерджРеквест);
	Исключение
		Сообщить("Мерджреквест не создан. Исключительная ошибка!");
	КонецПопытки;
		
КонецПроцедуры

Функция НовыйДанныеМерджРеквеста() Экспорт
	
	ДанныеМерджРеквеста = Новый Структура;
	ДанныеМерджРеквеста.Вставить("id", "");
	ДанныеМерджРеквеста.Вставить("source_branch", "");
	ДанныеМерджРеквеста.Вставить("target_branch", "");
	ДанныеМерджРеквеста.Вставить("title", "");
	ДанныеМерджРеквеста.Вставить("description", "");
	
	Возврат ДанныеМерджРеквеста;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТаблицуЗначенийМерджРеквестовИзМассива(ТаблицаЗначений, МерджРеквесты, ДобавлятьНеНайденныеЗадачи = Ложь)
	
	Для Каждого МерджРеквест Из МерджРеквесты Цикл
		
		НомерЗадачи = РаботаСGit.РазобраннаяВетка(МерджРеквест["source_branch"]).НомерЗадачиРазработки;
		Задача = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", НомерЗадачи);
		Если Задача.Пустая() И Не ДобавлятьНеНайденныеЗадачи Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаТаблицыЗначений = ТаблицаЗначений.Добавить();
		СтрокаТаблицыЗначений.НомерВетки = НомерВеткиБезПрефикса(МерджРеквест["source_branch"]);
		СтрокаТаблицыЗначений.Задача = Задача;
		СтрокаТаблицыЗначений.СсылкаМерджРеквест = МерджРеквест["web_url"];
		СтрокаТаблицыЗначений.СтатусМерджРеквеста = МерджРеквест["state"];
		СтрокаТаблицыЗначений.НомерМерджРеквеста = МерджРеквест["iid"];
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомерВеткиБезПрефикса(НомерВетки)
	
	МассивСтрок = СтрРазделить(НомерВетки, "/");
	Возврат МассивСтрок[МассивСтрок.ВГраница()];
	
КонецФункции

Функция ТаблицаОбъектовПоИзменениям(ИзмененияПоМерджРеквесту)
	
	ТаблицаОбъектовПоИзменениям = НовыйТаблицаОбъектовПоИзменениям();
	Если ИзмененияПоМерджРеквесту["changes"] = Неопределено Тогда 
		Возврат ТаблицаОбъектовПоИзменениям;	
	КонецЕсли;
	
	Для Каждого Изменение Из ИзмененияПоМерджРеквесту["changes"]  Цикл
				
		ДанныеОбъекта = РаботаСОбъектами.ПолучитьОписаниеОбъектаМетаданныхПоИмениФайл(Изменение["new_path"]);
		Если ДанныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТаблицаОбъектовПоИзменениям.Найти(ДанныеОбъекта.ИмяОбъекта, "Объект") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаОбъектовПоИзменениям.Добавить();
		СтрокаТаблицы.Объект = ДанныеОбъекта.ИмяОбъекта;
		СтрокаТаблицы.Картинка = ДанныеОбъекта.Картинка;
		СтрокаТаблицы.ТипОбъекта = ДанныеОбъекта.ТипОбъекта;
		
	КонецЦикла;
		
	Возврат ТаблицаОбъектовПоИзменениям;
	
КонецФункции

Функция ТаблицаОбъектовПоИзменениямПоDiff(ИзмененияПоМерджРеквесту, Коммит)
	
	ТаблицаОбъектовПоИзменениям = НовыйТаблицаОбъектовПоИзменениям();
	СписокПутей = Новый Массив;
	Для Каждого Изменение Из ИзмененияПоМерджРеквесту  Цикл
		СписокПутей.Добавить(Изменение["new_path"]);
	КонецЦикла;
	
	ИзмененыеФайлы = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СписокПутей);
	
	Для Каждого Изменение Из ИзмененыеФайлы  Цикл
		
		Попытка
			ДанныеОбъекта = РаботаСОбъектами.ПолучитьОписаниеОбъектаМетаданныхПоИмениФайл(Изменение);
		Исключение
			Продолжить;
		КонецПопытки;
		Если ДанныеОбъекта = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаОбъектовПоИзменениям.Найти(ДанныеОбъекта.ИмяОбъекта, "Объект");
		Если СтрокаТаблицы <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СтрокаТаблицы.ИнформацияОВерсии, Коммит, Истина);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаОбъектовПоИзменениям.Добавить();
		СтрокаТаблицы.Объект = ДанныеОбъекта.ИмяОбъекта;
		СтрокаТаблицы.Картинка = ДанныеОбъекта.Картинка;
		СтрокаТаблицы.ТипОбъекта = ДанныеОбъекта.ТипОбъекта;
		
		СтрокаТаблицы.ИнформацияОВерсии = Новый Соответствие();
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(СтрокаТаблицы.ИнформацияОВерсии, Коммит, Истина);
		
	КонецЦикла;
		
	Возврат ТаблицаОбъектовПоИзменениям;
	
КонецФункции

Функция НовыйТаблицаОбъектовПоИзменениям()
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("Картинка", Новый ОписаниеТипов("Картинка"));
	ТаблицаОбъектов.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка"));
	ТаблицаОбъектов.Колонки.Добавить("ИнформацияОВерсии", Новый ОписаниеТипов("Соответствие"));
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

#КонецОбласти