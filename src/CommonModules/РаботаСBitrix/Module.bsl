
#Область ПрограммныйИнтерфейс

Процедура ДобавитьРезультатЗадачи(РезультатЗадачи, НомерЗадачи) Экспорт

	СсылкаBitrix = РаботаСBitrix.СсылкаBitrixПользователя();
	Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(СсылкаBitrix, НомерЗадачи, РезультатЗадачи);
	OPI_Bitrix24.СоздатьРезультатИзКомментария(СсылкаBitrix, Ответ["result"]);
	OPI_Bitrix24.ЗавершитьЗадачу(СсылкаBitrix, НомерЗадачи);
	
КонецПроцедуры

Функция СоответствиеСостоянийКанбан() Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("Беклог", "1653");
	Результат.Вставить("Анализ", "535");
	Результат.Вставить("ОжидаетАналитики", "10329");
	Результат.Вставить("СогласованиеФТ", "10328");
	Результат.Вставить("ОжидаетРазработки", "10330");
	Результат.Вставить("Разработка", "302");
	Результат.Вставить("CodeReview", "10331");
	Результат.Вставить("Тестирование", "303");
	Результат.Вставить("ФормированиеИнструкций", "10332");
	Результат.Вставить("ПриемкаЗаказчиком", "543");
	Результат.Вставить("ВОчередиНаРелиз", "594");
	Результат.Вставить("Отменено", "863");
	Результат.Вставить("Выполнено", "304");
	
	Возврат Результат;
КонецФункции

Функция СоздатьЗадачуНаРевьюКЗадаче(Задача) Экспорт
	//todo это не очень хорошо,переделать что бы вх параметры были НомерЗадачи, ОтветственныйID
	ДанныеИЗЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Ответственный, НомерЗадачи");
	НомерЗадачи = ДанныеИЗЗадачи.НомерЗадачи;
	
	НастройкиПользователей = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(ДанныеИЗЗадачи.Ответственный);

	ДанныеЗадачиБитрикс = РаботаСBitrix.ДанныеЗадачиБитрикс(НомерЗадачи);

	НазваниеЗадачи = СтрШаблон("Code Review к задача %1", НомерЗадачи);
	DEADLINE = ТекущаяДатаСеанса() + 60*60*24;	
	ДанныеЗадачи = ДанныеЗадачиБитрикс["result"]["task"];
	
	ПоляЗадачи = Новый Соответствие;
	ПоляЗадачи.Вставить("TITLE", НазваниеЗадачи);
	ПоляЗадачи.Вставить("DESCRIPTION", НазваниеЗадачи);
	ПоляЗадачи.Вставить("CREATED_BY", ДанныеЗадачи["responsible"]["id"]);	
	ПоляЗадачи.Вставить("RESPONSIBLE_ID", НастройкиПользователей.IDТимЛидBitrix);
	ПоляЗадачи.Вставить("GROUP_ID", ДанныеЗадачи["groupId"]);
	ПоляЗадачи.Вставить("UF_STREAM_BUSINESS", ДанныеЗадачи["ufStreamBusiness"]);
	ПоляЗадачи.Вставить("UF_AUTO_PRODUCT", ДанныеЗадачи["ufAutoProduct"]);
	ПоляЗадачи.Вставить("DEADLINE", DEADLINE); 
	ПоляЗадачи.Вставить("PARENT_ID", НомерЗадачи); 
	
	Ответ = OPI_Bitrix24.СоздатьЗадачу(РаботаСBitrix.СсылкаBitrix(), ПоляЗадачи);
	Если Ответ["error_description"] <> Неопределено Тогда
		ВызватьИсключение(Ответ["error_description"]);
	КонецЕсли;
	ИДНовойЗадачи = Ответ["result"]["task"]["id"];
	Возврат ИДНовойЗадачи;
	
КонецФункции

Функция ТокенBitrix() Экспорт
	
	Возврат Константы.ТокенBitrix.Получить();
	
КонецФункции

Функция ТокенBitrixТекущегоПользователя() Экспорт
		
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	Возврат НастройкиПользователя.ТокенBitrix;
	
КонецФункции

Процедура ОбновитьДанныеЗадач() Экспорт
	
	ТаблицаЗадач = Справочники.Задачи.НеЗакрытыеЗадачи();
	ОбновитьДанныеЗадачПоТаблице(ТаблицаЗадач);
	
КонецПроцедуры

Процедура ОбновитьДанныеЗадачПоТаблице(ТаблицаЗадач) Экспорт
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	Если НастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнены настройки пользователя!'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗадачи Из ТаблицаЗадач Цикл
		Попытка
			//todo перенести
			//ДанныеЗаполнения = СтруктурированныеДанныеПоЗадачеИзБитрикс(СтрокаЗадачи.НомерЗадачи);
			ДанныеЗаполнения = РаботаСПредприятие1С.СтруктурированныеДанныеПоЗадаче(СтрокаЗадачи.НомерЗадачи);
			
			ЗадачаОбъект = СтрокаЗадачи.Задача.ПолучитьОбъект();
			ЗадачаОбъект.ЗаполнитьПоДаннымЗаполнения(ДанныеЗаполнения);
			ЗадачаОбъект.ПолучитьСписокТрудозатратЗадачи();
			Если ЗадачаОбъект.ПроверитьЗаполнение() Тогда
				ЗадачаОбъект.Записать();
			КонецЕсли;
		Исключение
			ТекстСообщения = ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнформацияОбОшибке());
			ТекстСообщения = СтрШаблон("%1 Не загрузилась
				|%2", СтрокаЗадачи.НомерЗадачи, ТекстСообщения);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Функция ВидЗадачи(Код) Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("857", Перечисления.ТипыЗадач.Разработка);
	Возврат Результат[Код];
	
КонецФункции

Функция ТипЗаявки(Код) Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить("611", Перечисления.ТипыЗадач.ЗНИ);
	Результат.Вставить("610", Перечисления.ТипыЗадач.Инцидент);
	Возврат Результат[Код];
	
КонецФункции

Процедура ИзменитьУЗадачиКонтрольныйСрокИСРМ(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задача.Спринт.Код КАК СпринтКод,
	|	Задача.НомерЗадачи КАК НомерЗадачи,
	|	Задача.КрайнийСрок КАК КрайнийСрок,
	|	Задача.ПлановоеВремя * 60 КАК ПлановоеВремя,
	|	ЕСТЬNULL(НастройкиПользователей.IDПользователяBitrix, """") КАК IDПользователяBitrix,
	|	НЕ Задача.НеИзменятьКрайнийСрок КАК МожноИзменятьКрайнийСрок,
	|	Задача.НомерЗадачиБазовой КАК НомерЗадачиБазовой
	|ИЗ
	|	Справочник.Задачи КАК Задача	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиПользователей КАК НастройкиПользователей
	|		ПО Задача.Ответственный = НастройкиПользователей.Владелец
	|ГДЕ
	|	Задача.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	ТаблицаПоЗадаче = Запрос.Выполнить().Выгрузить();
	Если ТаблицаПоЗадаче.Количество() Тогда
		ПерваяСтрока = ТаблицаПоЗадаче[0];
		
		СтруктураЗадачи = Новый Структура;
		Если ПерваяСтрока.МожноИзменятьКрайнийСрок Тогда
			СтруктураЗадачи.Вставить("DEADLINE", ПерваяСтрока.КрайнийСрок);
		КонецЕсли;
		СтруктураЗадачи.Вставить("TIME_ESTIMATE", ПерваяСтрока.ПлановоеВремя);
		Если ЗначениеЗаполнено(ПерваяСтрока.СпринтКод) Тогда
			UF_CRM_TASK = Новый Массив;
			UF_CRM_TASK.Добавить(ПерваяСтрока.СпринтКод);
			СтруктураЗадачи.Вставить("UF_CRM_TASK", UF_CRM_TASK);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПерваяСтрока.IDПользователяBitrix) Тогда
			СтруктураЗадачи.Вставить("RESPONSIBLE_ID", ПерваяСтрока.IDПользователяBitrix);
		КонецЕсли;
		IDЗадачи = ПерваяСтрока.НомерЗадачи;
		
		Результат = OPI_Bitrix24.ИзменитьЗадачу(СсылкаBitrixПользователя(), IDЗадачи, СтруктураЗадачи);
		
	КонецЕсли;

КонецПроцедуры

Функция ДанныеЗадачиБитрикс(НомерЗадачи) Экспорт
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("taskId", НомерЗадачи);
	ПараметрыЗапроса.Вставить("select[result]", "*");
	ПараметрыЗапроса.Вставить("select[]", "UF_CRM_TASK");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL", Ложь);
	Возврат КоннекторHTTP.GetJson(СтрокаЗапросаBitrix(), ПараметрыЗапроса, ДополнительныеПараметры);
КонецФункции

Функция СтруктурированныеДанныеПоЗадачеИзБитрикс(НомерЗадачи) Экспорт
	
	ДанныеЗаполнения = Новый Структура();

	Если Константы.ТаскТрекер.Получить() <> Перечисления.ТаскТрекеры.Bitrix Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	ИнформацияОЗадаче = ДанныеЗадачиБитрикс(НомерЗадачи);
	
	Если ИнформацияОЗадаче["error_description"] <> Неопределено Тогда
		ВызватьИсключение(ИнформацияОЗадаче["error_description"]);
	КонецЕсли;
	Если Не ИнформацияОЗадаче["result"].Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ИнформацияОЗадаче["error"] = Неопределено Тогда
		
		Задача = ИнформацияОЗадаче["result"]["task"];
		ДанныеЗаполнения.Вставить("Наименование", Задача["title"]);
		ДанныеЗаполнения.Вставить("ПодробноеОписание", Задача["description"]);
		
		Ответственный = НайтиСоздатьПользователя(Задача["responsible"]["name"], Задача["responsible"]["id"]);
		ДанныеЗаполнения.Вставить("Ответственный", Ответственный);
		
		Постановщик = НайтиСоздатьПользователя(Задача["creator"]["name"], Задача["creator"]["id"]);
		ДанныеЗаполнения.Вставить("Постановщик", Постановщик);
		
		ДанныеЗаполнения.Вставить("Статус", Задача["status"]);
		ДанныеЗаполнения.Вставить("Стадия", Справочники.СтадииКанбан.СтадияПоКодуBitrix(Задача["stageId"]));
		
		ДанныеЗаполнения.Вставить("НомерЗадачиБазовой", Задача["parentId"]);
		Если ЗначениеЗаполнено(Задача["parentId"]) Тогда
			ОсновнаяЗадача = Справочники.Задачи.НайтиПоКоду(Задача["parentId"]);
			Если ЗначениеЗаполнено(ОсновнаяЗадача) Тогда
				ДанныеЗаполнения.Вставить("ОсновнаяЗадача", ОсновнаяЗадача);
			Иначе
				РегистрыСведений.ЗадачиКЗагрузке.ДобавитьЗадачу(Задача["parentId"]);
				РегистрыСведений.ЗадачиКЗагрузке.ДобавитьЗадачу(НомерЗадачи);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеЗаполнения.Вставить("КрайнийСрок", ДатаИзJSON(Задача["deadline"]));
		ДанныеЗаполнения.Вставить("ПлановоеВремя", ПривестиКЧислу(Задача["timeEstimate"]) / 60); //Секунды привнел в минуты
		ДанныеЗаполнения.Вставить("ЗатраченноеВремя", ПривестиКЧислу(Задача["timeSpentInLogs"]) / 60); //Минуты
		ДанныеЗаполнения.Вставить("ДатаСоздания", ПрочитатьДатуJSON(Задача["createdDate"], ФорматДатыJSON.ISO));
		ДанныеЗаполнения.Вставить("НомерЗадачи", НомерЗадачи);
		ДанныеЗаполнения.Вставить("ИмяВетки", СтрШаблон("%1_%2", Задача["parentId"], НомерЗадачи));
		ДанныеЗаполнения.Вставить("НомерЗадачиИтилиум", Задача["ufAuto127235159559"]);
		
		ДанныеЗаполнения.Вставить("ПлановаяДатаРелиза", ДатаИзJSON(Задача["ufPlanReleaseDate"]));
		
		Спринты = Новый ТаблицаЗначений;
		Спринты.Колонки.Добавить("Спринт",,"Спринт");
		Если ТипЗнч(Задача["ufCrmTask"]) = Тип("Массив") Тогда
			Для Каждого Спринт Из Задача["ufCrmTask"] Цикл
				СтрокаТаблицы = Спринты.Добавить();
				СтрокаТаблицы.Спринт = Справочники.Спринты.СпринтПоКоду(Спринт);
			КонецЦикла;
		КонецЕсли;
		ДанныеЗаполнения.Вставить("Спринты", Спринты);

		Если ЗначениеЗаполнено(Задача["ufEssence"]) Тогда
			ДанныеЗаполнения.Вставить("ТипЗадачи", РаботаСBitrix.ТипЗаявки(Задача["ufEssence"]));
		Иначе
			ДанныеЗаполнения.Вставить("ТипЗадачи", РаботаСBitrix.ВидЗадачи(Задача["ufTaskType"]));
		КонецЕсли;

		ДанныеЗаполнения.Вставить("Владелец", РегистрыСведений.ПродуктыКПроектам.ПроектПоПродукту(Задача["ufAutoProduct"]));

		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(ДанныеЗаполнения.Ответственный);
		
		Если ЗначениеЗаполнено(НастройкаПользователя) Тогда
			ДанныеЗаполнения.Вставить("СсылкаBitrix", СтрШаблон("https://b24/company/personal/user/%1/tasks/task/view/%2/", 
				НастройкаПользователя.IDПользователяBitrix, НомерЗадачи));
			КонецЕсли;
			
		Если ЗначениеЗаполнено(ДанныеЗаполнения.НомерЗадачиБазовой) Тогда
			ИнформацияОБазовойЗадаче = ДанныеЗадачиБитрикс(ДанныеЗаполнения.НомерЗадачиБазовой);
			Если ИнформацияОБазовойЗадаче["error_description"] = Неопределено 
				И ИнформацияОБазовойЗадаче["result"].Количество() 
				И ИнформацияОБазовойЗадаче["error"] = Неопределено Тогда
				БазоваяЗадача = ИнформацияОБазовойЗадаче["result"]["task"];
				ДанныеЗаполнения.Вставить("ДатаСозданияБазовойЗадачи", ПрочитатьДатуJSON(БазоваяЗадача["createdDate"], ФорматДатыJSON.ISO));
				Если ЗначениеЗаполнено(БазоваяЗадача["ufEssence"]) Тогда
					ДанныеЗаполнения.Вставить("ТипБазовойЗадачи", РаботаСBitrix.ТипЗаявки(БазоваяЗадача["ufEssence"]));
				Иначе
					ДанныеЗаполнения.Вставить("ТипБазовойЗадачи", РаботаСBitrix.ВидЗадачи(БазоваяЗадача["ufTaskType"]));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеЗаполнения.Вставить("Наименование", "Не смогли получить задачу из Bitrix");
		ДанныеЗаполнения.Вставить("Описание", ИнформацияОЗадаче["error_description"]);
		ДанныеЗаполнения.Вставить("СсылкаBitrix", ""); 
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция НайтиСоздатьПользователя(ИмяПользователя, IDПользователяBitrix)
	
	УстановитьПривилегированныйРежим(Истина);

	ТекПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	ПользовательСуществует = ЗначениеЗаполнено(ТекПользователь);
	
	Если НЕ ПользовательСуществует Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Пользователь.Наименование = ИмяПользователя;
		Пользователь.Записать();
		ТекПользователь = Пользователь.Ссылка;
	КонецЕсли;
	
	Возврат ТекПользователь;
	
КонецФункции

Функция ПолучитьСписокТрудозатратЗадачи(НомерЗадачи) Экспорт
	
	Возврат OPI_Bitrix24.ПолучитьСписокТрудозатратЗадачи(СсылкаBitrixПользователя(), НомерЗадачи);
	
КонецФункции

Функция СсылкаBitrix() Экспорт
	
	ИДПользователя = "1"; // Администратор
	СсылкаBitrix = СтрШаблон("https://b24/rest/%1/%2", ИДПользователя, ТокенBitrix());
	
	Возврат СсылкаBitrix;
	
КонецФункции

Функция СсылкаBitrixПользователя(Пользователь = Неопределено) Экспорт
	
	НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
	
	СсылкаBitrix = СтрШаблон("https://b24/rest/%1/%2",
		НастройкаПользователя.IDПользователяBitrix,
		НастройкаПользователя.ТокенBitrix
	);
	
	Возврат СсылкаBitrix;

КонецФункции

Функция СтрокаЗапросаBitrix() Экспорт
	
	Возврат СтрШаблон("https://b24/rest/1/%1/tasks.task.get.json", ТокенBitrix());
	
КонецФункции

Процедура ДобавитьСпринтВБазовуюЗадачу(Задача) Экспорт
	
	сткЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Спринт.Код, НомерЗадачиБазовой");
	СпринтКод          = сткЗадачи.СпринтКод;
	НомерЗадачиБазовой = сткЗадачи.НомерЗадачиБазовой;
	Если ПустаяСтрока(НомерЗадачиБазовой) Или ПустаяСтрока(СпринтКод) Тогда
		Возврат;
	КонецЕсли;
	ИнформацияОБазовойЗадаче = ДанныеЗадачиБитрикс(НомерЗадачиБазовой);
	Если ИнформацияОБазовойЗадаче["error_description"] <> Неопределено 
		Или ИнформацияОБазовойЗадаче["result"].Количество() = 0
		Или ИнформацияОБазовойЗадаче["error"] <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	СРМЗадачи = ИнформацияОБазовойЗадаче["result"]["task"]["ufCrmTask"];
	Если ТипЗнч(СРМЗадачи) <> Тип("Массив") Тогда
		СРМЗадачи = Новый Массив;
	КонецЕсли;
	Если СРМЗадачи.Найти(СпринтКод) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	СРМЗадачи.Добавить(СпринтКод);
	СтруктураЗадачи = Новый Структура;
	СтруктураЗадачи.Вставить("UF_CRM_TASK", СРМЗадачи);
	Результат = OPI_Bitrix24.ИзменитьЗадачу(СсылкаBitrix(), НомерЗадачиБазовой, СтруктураЗадачи);
	
КонецПроцедуры

Процедура ЗавершитьРабочийДеньПользователей() Экспорт
	
	ПользователиСАвтотрудозатратами = Справочники.НастройкиПользователей.ПользователиСАвтотрудозатратами();
	ДанныеРаспределенныхТрудозатратПользователей = ДанныеРаспределенныхТрудозатратПользователей(ПользователиСАвтотрудозатратами);
	
	ОтправитьДанныеРаспределенныхТрудозатратПользователейВБитрикс(ДанныеРаспределенныхТрудозатратПользователей);
	ОтправитьКонецРабочегоДняПользователей(ПользователиСАвтотрудозатратами);
	
КонецПроцедуры

Процедура НачатьРабочийДеньПользователей() Экспорт
	
	ПользователиСАвтотрудозатратами = Справочники.НастройкиПользователей.ПользователиСАвтотрудозатратами();
	ОтправитьНачалоРабочегоДняПользователей(ПользователиСАвтотрудозатратами);
	
КонецПроцедуры

Процедура ДобавитьКомментариемРезультатыТестов(СсылкаНаТест, Удачные, Неудачные, Задача) Экспорт

	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщенияОРезультатахТеста(), 
		СсылкаНаТест, Удачные, Неудачные, ОбщегоНазначенияУправлениеРазработкой.СимволКакашки()
	);
	
	СсылкаBitrix = РаботаСBitrix.СсылкаBitrixПользователя();
	Ответ = OPI_Bitrix24.ДобавитьКомментарийЗадачи(СсылкаBitrix, Задача.НомерЗадачи, ТекстКомментария);
	
КонецПроцедуры

Функция СвязанныеЗадачи(НомерЗадачи) Экспорт

	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("taskId", НомерЗадачи);
	ПараметрыЗапроса.Вставить("filter[FIELD]", "DEPENDS_ON");

	Ответ = КоннекторHTTP.GetJson(РаботаСBitrix.СсылкаBitrixПользователя() + "/tasks.task.history.list.json", 
		ПараметрыЗапроса
	);
	
	ЗадачиСтрокой = ""; 
	Попытка
		СписокИзменений = Ответ["result"]["list"];
		Если СписокИзменений.Количество() = 0 Тогда
			Возврат Новый Массив;
		КонецЕсли;
		Запись = СписокИзменений[СписокИзменений.ВГраница()];
		ЗадачиСтрокой = Запись["value"]["to"];
	Исключение
		ЗаписьЖурналаРегистрации("РаботаСBitrix.СвязанныеЗадачи", УровеньЖурналаРегистрации.Ошибка,,, 
			СтрШаблон(НСтр("ru='Ошибка загрузки связанных задач к задаче %1
			|%2'"), НомерЗадачи, ОписаниеОшибки())
		);
	КонецПопытки;
	МассивЗадач = СтрРазделить(ЗадачиСтрокой, ",", Ложь);
	МассивЗадач = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЗадач);
	Возврат МассивЗадач;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДатаИзJSON(ДатаJSON)

	Если ДатаJSON = Неопределено Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат ПрочитатьДатуJSON(ДатаJSON, ФорматДатыJSON.ISO);
	КонецЕсли;
	
КонецФункции

// Функция - Шаблон сообщения о результатах теста
// 
//** 1 Параметр - Ссылка на аллур
//** 2 Параметр - Удачные тесты
//** 3 Параметр - Неудачные тесты
//
Функция ШаблонСообщенияОРезультатахТеста() Экспорт
	
	Результат = "
	|[IMG WIDTH=152 HEIGHT=151]https://i.playground.ru/p/C78G5UkOUEH-MD5OmwQspA.png?760xauto[/IMG]
	|[URL=%1]
	|[SIZE=20pt]Результаты тестов[/SIZE][/URL]
	|[TABLE][TR][TD][SIZE=24pt]❤️ [/SIZE][/TD][TD][SIZE=24pt] %2 удачных [/SIZE][/TD][/TR]
	|[TR][TD][SIZE=24pt]%4[/SIZE][/TD][TD][SIZE=24pt][/SIZE][SIZE=24pt] %3 неудачных[/SIZE][/TD][/TR][/TABLE]";
	
	Возврат Результат;
	
КонецФункции

Процедура ОтправитьКонецРабочегоДняПользователей(ПользователиСАвтотрудозатратами)
	
	Для Каждого Пользователь Из ПользователиСАвтотрудозатратами Цикл
		
		URL = СсылкаBitrixПользователя(Пользователь);
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
		
		OPI_Bitrix24.ЗавершитьУчетВремени(URL, НастройкаПользователя.IDПользователяBitrix);
		
		Комментарий = СтрШаблон("Отправлен учет времени по пользователю %1",
			Пользователь
		);	
		
		ЗаписьЖурналаРегистрации("Отправка учета времени b24",,,, Комментарий);		
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьНачалоРабочегоДняПользователей(ПользователиСАвтотрудозатратами)
	
	Для Каждого Пользователь Из ПользователиСАвтотрудозатратами Цикл
		
		URL = СсылкаBitrixПользователя(Пользователь);
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
		
		OPI_Bitrix24.НачатьУчетВремени(URL, НастройкаПользователя.IDПользователяBitrix);
		
		Комментарий = СтрШаблон("Отправлен учет времени по пользователю %1",
			Пользователь
		);	
		
		ЗаписьЖурналаРегистрации("Отправка учета времени b24",,,, Комментарий);		
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаНачалаРабочегоДня()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 32400; 
КонецФункции

Функция ДатаКонецРабочегоДня()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 64800; 
КонецФункции

Функция ДанныеРаспределенныхТрудозатратПользователей(ПользователиСАвтотрудозатратами)
	
	ТаблицаРаспределяемоеКоличество = Справочники.НастройкиПользователей.ТаблицаКоличествоНераспределенныхМинут(
		ПользователиСАвтотрудозатратами
	);
	
	ТекущийСпринт = Справочники.Спринты.ТекущийСпринт();
	
	ТаблицаЗадач = Справочники.Задачи.ТаблицаОткрытыхЗадач(ПользователиСАвтотрудозатратами, ТекущийСпринт);
	
	Для Каждого ПользовательСАвтотрудозатратами Из ПользователиСАвтотрудозатратами Цикл
		
		СтрокаРаспределяемогоКоличества = ТаблицаРаспределяемоеКоличество.Найти(ПользовательСАвтотрудозатратами, "Пользователь");
		Если СтрокаРаспределяемогоКоличества = Неопределено Тогда
			РаспределяемоеКоличество = 480;
		Иначе
			РаспределяемоеКоличество = СтрокаРаспределяемогоКоличества.РаспределяемоеКоличество;
		КонецЕсли;
		
		Если РаспределяемоеКоличество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Пользователь", ПользовательСАвтотрудозатратами);
		
		СтрокиТаблицыЗадач = ТаблицаЗадач.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТаблицыЗадач Из СтрокиТаблицыЗадач Цикл
			
			Если СтрокаТаблицыЗадач.ПлановоеВремя <= СтрокаТаблицыЗадач.ЗатраченноеВремя Тогда
				Продолжить;		
			КонецЕсли;
			
			ОставшеесяКоличествоОтПлана = СтрокаТаблицыЗадач.ПлановоеВремя - СтрокаТаблицыЗадач.ЗатраченноеВремя;
			ДобавляемоеКоличество = Мин(ОставшеесяКоличествоОтПлана, РаспределяемоеКоличество);
			
			СтрокаТаблицыЗадач.ЗатраченноеВремя = СтрокаТаблицыЗадач.ЗатраченноеВремя + ДобавляемоеКоличество;				
			РаспределяемоеКоличество = РаспределяемоеКоличество - ДобавляемоеКоличество;
			СтрокаТаблицыЗадач.ДобавленноеВремя = СтрокаТаблицыЗадач.ДобавленноеВремя + ДобавляемоеКоличество;
			
			Если РаспределяемоеКоличество <= 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокиТаблицыЗадач.Количество() > 0 Тогда
			СтрокаТаблицыЗадач.ЗатраченноеВремя = СтрокаТаблицыЗадач.ЗатраченноеВремя + РаспределяемоеКоличество;
			СтрокаТаблицыЗадач.ДобавленноеВремя = СтрокаТаблицыЗадач.ДобавленноеВремя + РаспределяемоеКоличество;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Процедура ОтправитьДанныеРаспределенныхТрудозатратПользователейВБитрикс(ДанныеРаспределенныхТрудозатратПользователей)
	
	Для каждого СтрокаДанных Из ДанныеРаспределенныхТрудозатратПользователей Цикл
		
		Если СтрокаДанных.ДобавленноеВремя = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		IDЗадачи = СтрокаДанных.НомерЗадачи;
		Время = СтрокаДанных.ДобавленноеВремя * 60;
		НастройкаПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(СтрокаДанных.Пользователь);
		
		
		Результат = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(СсылкаBitrixПользователя(СтрокаДанных.Пользователь),
			IDЗадачи,
			Время,
			НастройкаПользователя.IDПользователяBitrix,
			,
			ДатаУстановкиВремениТрудозатрат()		
		);
		
		Комментарий = СтрШаблон("Отправлены трудозатраты по задаче %1 по пользователю %2 в минутах %3",
			СтрокаДанных.НомерЗадачи,
			СтрокаДанных.Пользователь,
			СтрокаДанных.ДобавленноеВремя
		);	
		
		ЗаписьЖурналаРегистрации("Отправка трудозатрат b24",,,, Комментарий); 
	
	КонецЦикла;
	
КонецПроцедуры

Функция ДатаУстановкиВремениТрудозатрат()
	Возврат НачалоДня(ТекущаяДатаСеанса()) + 40200;
КонецФункции

Функция ПривестиКЧислу(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

Процедура ЗагрузкаЗадач() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Владелец КАК Пользователь,
		|	НастройкиПользователей.IDПользователяBitrix КАК IDПользователяBitrix
		|ИЗ
		|	Справочник.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.IDПользователяBitrix <> """"";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокЗадачПользователя(Выборка.Пользователь, Выборка.IDПользователяBitrix);
	КонецЦикла;

КонецПроцедуры

Процедура СписокЗадачПользователя(Пользователь, IDПользователяBitrix)
	
	ПараметрыЗапроса = Новый Соответствие;
	ПараметрыЗапроса.Вставить("RESPONSIBLE_ID", Число(IDПользователяBitrix));

	МассивФильтров = Новый Массив;
	МассивФильтров.Добавить("2");
	МассивФильтров.Добавить("3");
	
	ПараметрыЗапроса.Вставить("REAL_STATUS", МассивФильтров);
	
	Ответ = OPI_Bitrix24.ПолучитьСписокЗадач(РаботаСBitrix.СсылкаBitrixПользователя(Пользователь), ПараметрыЗапроса, 0);
	
	Если Ответ["result"] = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	СписокЗадач = Ответ["result"]["tasks"];
	
	Для Каждого Задача Из СписокЗадач Цикл
		
		ЗадачаПользователя = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", Задача["id"]);
		Если ЗадачаПользователя = Справочники.Задачи.ПустаяСсылка() Тогда
			Попытка
				Справочники.Задачи.НоваяЗадача(Задача["id"]);
				ЗаписьЖурналаРегистрации("ЗагрузкаЗадач", УровеньЖурналаРегистрации.Информация,,, 
					"Загружена задача " + Задача.НомерБитрикс
				);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстОшибкиДляПользователя = ОбработкаОшибок.СообщениеОбОшибкеДляПользователя(ИнформацияОбОшибке);
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр(СтрШаблон("ru='Не удалось записать задачу %1
					|%2'", Задача["id"], ТекстОшибкиДляПользователя)
				);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузитьЗадачиПоРеестру() Экспорт
	
	НомераЗадач = РегистрыСведений.ЗадачиКЗагрузке.СписокЗадачКЗагрузке();
	
	Для Каждого Элемент Из НомераЗадач Цикл
		Попытка
			Задача = Справочники.Задачи.НоваяЗадача(Элемент);
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ДанныеЗаполнения = РаботаСBitrix.СтруктурированныеДанныеПоЗадачеИзБитрикс(Элемент);
			Если ЗадачаОбъект.ПрефиксВетки = Справочники.ПрефиксыЗадач.hotfix Тогда
				ЗадачаОбъект.ПоменятьСтатусыЗадачи(ДанныеЗаполнения);
			Иначе
				ЗадачаОбъект.Заполнить(ДанныеЗаполнения);
			КонецЕсли;
			ЗадачаОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗагрузкаЗадач'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
		РегистрыСведений.ЗадачиКЗагрузке.УдалитьЗадачу(Элемент);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗадачамБазовую(НомерЗадачи, Задача)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.НомерЗадачиБазовой = &НомерЗадачиБазовой
		|	И Задачи.ОсновнаяЗадача = ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("НомерЗадачиБазовой", НомерЗадачи);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ЗадачаДляУстановки = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаДляУстановки.Заблокировать();
			ЗадачаДляУстановки.ОсновнаяЗадача = Задача;
			ЗадачаДляУстановки.Записать();
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Проблема записи задачи'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
			);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
