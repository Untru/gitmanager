// @strict-types

#Область ПрограммныйИнтерфейс

// Функция - Путь к серверу git
//
// Параметры:
//  АдресСервера - 	 - 
//  Проект		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьКСерверуGit(Знач АдресСервера, Знач ВладелецПроекта) Экспорт
	
	АдресСервера = СтрЗаменить(АдресСервера, 
		"%username%", Пользователи.ТекущийПользователь().ИмяПользователяGit);
	АдресСервера = СтрЗаменить(АдресСервера,
		"%password%", Пользователи.ТекущийПользователь().ПарольПользователяGit);
	АдресСервера = СтрЗаменить(АдресСервера,
		"%owner%", ВладелецПроекта.ИмяПользователяGit);
	
	Возврат АдресСервера;
	
КонецФункции

// Функция - Json в структуру
//
// Параметры:
//  ТекстJson	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция JsonВСоответсвие(Знач ТекстJson, Знач ИменаСвойствСоЗначениямиДата = Неопределено) Экспорт
	
	ЧтениеJSOn = Новый ЧтениеJSON;
	ЧтениеJSOn.УстановитьСтроку(ТекстJson);
	Возврат ПрочитатьJSON(ЧтениеJSOn, Истина, ИменаСвойствСоЗначениямиДата);
	
КонецФункции

// Функция - Получить имя сервера из строки URL
//
// Параметры:
//  АдресWebGitLab	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьИмяСервераИзСтрокиURL(Знач АдресWebGitLab) Экспорт
	
	//АдресWebGitLab = Константы.АдресWebGitLab.Получить();
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "http://", "");
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "https://", "");
	АдресWebGitLab = СтрЗаменить(АдресWebGitLab, "/", "");

	Возврат АдресWebGitLab;
	
КонецФункции

// Функция - Имя файла без расширения
//
// Параметры:
//  ИмяФайла - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ИмяФайлаБезРасширения(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ИмяБезРасширения;
	
КонецФункции 

// Функция - Путь к каталогу репозитория
//
// Параметры:
//  ИмяПроектаНаGitLab	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьККаталогуРепозитория(Знач ИмяПроектаНаGitLab) Экспорт
	
	Возврат СтрШаблон("%1\%2",
			Константы.ПутьКПапкеСРепозиториями.Получить(), 
			ИмяПроектаНаGitLab)
	
КонецФункции

// Функция - Корректное имя репозитория
//
// Параметры:
//  ИмяРепозитория	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция КорректноеИмяРепозитория(Знач ИмяРепозитория) Экспорт
	
	RegExp = Новый COMОбъект("VBScript.RegExp");// создаем объект для работы с регулярными выражениями
	RegExp.MultiLine = Истина;  // истина — текст многострочный, ложь — одна строка
	RegExp.Global = Истина;     // истина — поиск по всей строке, ложь — до первого совпадения
	RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске
	RegExp.Pattern = "[А-Яа-я]+";
	
	Возврат Не RegExp.Test(ИмяРепозитория);
	
КонецФункции

// Функция - Путь к каталогу репозитория ветки разработки проектов EPF
//
// Параметры:
//  ВеткаРазработкиПроектовEPF	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПутьККаталогуРепозиторияВеткиРазработкиПроектовEPF(Знач ВеткаРазработкиПроектовEPF) Экспорт
	
	Возврат СтрШаблон("%1\%2\%3", 
		Константы.ПутьКПапкеСРепозиториямиВетокРазработки.Получить(),
		ИмяФайлаБезРасширения(ВеткаРазработкиПроектовEPF.Владелец.ИмяФайла),
		ВеткаРазработкиПроектовEPF.Код);
	
КонецФункции

// Функция - Данные версий ветки разработки
//
// Параметры:
//  ВеткаПроекта		 - 	 - 
//  КоличествоЗаписей	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ДанныеВерсийВеткиРазработки(Знач ВеткаПроекта, Знач КоличествоЗаписей = 10) Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bat");
	ИмяВременногоФайлаLog = ПолучитьИмяВременногоФайла("log");
	ЗаписьТекса = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.OEM);
	ЗаписьТекса.Записать(СтрШаблон("git log -n %2 > %1", ИмяВременногоФайлаLog, КоличествоЗаписей));
	ЗаписьТекса.Закрыть();
	ЗаписьТекса = Неопределено;
	
	ЗапуститьПриложение(ИмяВременногоФайла,
		РаботаСGit.ПутьККаталогуРепозиторияВеткиРазработкиПроектовEPF(ВеткаПроекта), Истина);
		
	ДанныеКВозврату = "";
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайлаLog, КодировкаТекста.UTF8);
		ДанныеКВозврату = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		УдалитьФайлы(ИмяВременногоФайлаLog);
	Исключение
		// 
	КонецПопытки;
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ДанныеКВозврату;

КонецФункции

Функция РольДоступнаЗапросСервера(Знач ИмяРоли) Экспорт
	Попытка
		Возврат РольДоступна(ИмяРоли);
	Исключение
	КонецПопытки;
	Возврат Ложь;
КонецФункции

// Процедура - Выполнить комманду GIT
//
// Параметры:
//  Комманда		 - 	 - 
//  ТекущийКаталог	 - 	 - 
//
Функция ЗапуститьПрограмму(Знач Комманда, Знач ТекущийКаталог) Экспорт
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	Результат = ФайловаяСистема.ЗапуститьПрограмму(
		Комманда, ПараметрыЗапускаПрограммы);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда
		ЗаписьЖурналаРегистрации("GIT", УровеньЖурналаРегистрации.Ошибка, , , Результат.ПотокОшибок);
	КонецЕсли;
	Если ЗначениеЗаполнено(Результат.ПотокВывода) Тогда
		ЗаписьЖурналаРегистрации("GIT", УровеньЖурналаРегистрации.Информация, , , Результат.ПотокВывода);
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ИзвлечениеИзменений(КаталогРепозиторияБазы, База) Экспорт

	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаИзвлечениеИзменений();
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);
	
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
КонецПроцедуры

Функция ТаблицаВетокРепозитория(НастройкиПользователя, КаталогРепозиторияБазы, ПоказыватьЗавершенныеЗадачи, ПоказыватьЧужиеЗадачи, База) Экспорт
	
	ТаблицаВеток = НовыйТаблицаВеток();

	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаПолученияВеток();
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);
	
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат ТаблицаВеток;
	КонецЕсли;
	
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	ВыводКоманды = ДанныеЛогов.ПодробныйЛогСтрокой;
	
	ЧислоСтрок = СтрЧислоСтрок(ВыводКоманды);
	
	Для Счетчик = 1 По ЧислоСтрок Цикл
		
		Ветка = СокрЛП(СтрПолучитьСтроку(ВыводКоманды, Счетчик));

		ЭтоТекущаяВетка = Лев(Ветка, 1) = "*";

		//Обработка веток по задачам
		СтруктураВетки = РазобраннаяВетка(Ветка);
		РазбираяВетка = СтрРазделить(Ветка, "/");
		ИмяВетки = РазбираяВетка[РазбираяВетка.ВГраница()];
		
		Задача = Справочники.Задачи.ЗадачаПоИмениВетки(ИмяВетки);
		Если Задача.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПоказыватьЗавершенныеЗадачи И Задача.СтатусЗадачи = Перечисления.СтатусыЗадач.Завершена Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПоказыватьЧужиеЗадачи И Задача.Ответственный <> Пользователи.АвторизованныйПользователь() Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаВеток = ТаблицаВеток.Найти(Задача, "Задача");
		Если СтрокаВеток = Неопределено Тогда
			СтрокаВеток = ТаблицаВеток.Добавить();
		КонецЕсли;
		
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, 
			"Наименование, ПодробноеОписание, СтатусЗадачи, ПрефиксВетки");
	
		СтрокаВеток.Номер = ИмяВетки;
		СтрокаВеток.Задача = Задача;
		СтрокаВеток.Статус = РеквизитыЗадачи.СтатусЗадачи;
		СтрокаВеток.ТипЗадачи = РеквизитыЗадачи.ПрефиксВетки;
		//todo запрос в цикле, переосмыслить подход, но данных будет не много и получать их будем редко
		СтрокаВеток.Наименование = РеквизитыЗадачи.Наименование;
		СтрокаВеток.ПодробноеОписание = РеквизитыЗадачи.ПодробноеОписание;
		
		Если Не ЭтоУдаленнаяВетка(Ветка) Тогда
			СтрокаВеток.Локально = Истина;
		КонецЕсли;
			
	КонецЦикла;

	Возврат ТаблицаВеток;
	
КонецФункции

Функция ВнешниеФайлыСРепозитория(Знач ТекущийКаталог) Экспорт

	ВнешниеФайлы = Новый Массив();
	
	Путь = СтрШаблон("%1\%2", ТекущийКаталог, "src\epf");
	Маска = "*.xml";
	
	Файлы = НайтиФайлы(Путь, Маска, Ложь);
	
	Для Каждого Файл Из Файлы Цикл
		
		НомерВерсии = "";
		ИмяОбработки = Файл.ИмяБезРасширения;
		ПутьКМодулюОбъекта = СтрШаблон("%1/%2/Ext/ObjectModule.bsl", Файл.Путь, ИмяОбработки);
		
		Текст = Новый ЧтениеТекста();
		Текст.Открыть(ПутьКМодулюОбъекта, КодировкаТекста.UTF8);
		
		ТекстМодуля = Текст.Прочитать();
		ТекстМодуля = СокрЛП(ТекстМодуля);
		Текст.Закрыть();
		
		RegExp = Новый COMОбъект("VBScript.RegExp");
		RegExp.MultiLine = Истина;
		RegExp.Global = Истина; //Первое совпадение
		RegExp.IgnoreCase = Истина; // истина — игнорировать регистр строки при поиске

		RegExp.Pattern = ".Версия\s*=\s*""\d+(\.\d+)?";
				
		Если ЭтоОбработка(Файл.ПолноеИмя) Тогда
			ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Обработка;
		Иначе
			ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Отчет;
		КонецЕсли;
		
		НомерВерсии = "1.0.0.1";
		ИнформацияОВнешнемФайле = Новый Структура;
		ИнформацияОВнешнемФайле.Вставить("НомерВерсии", НомерВерсии);
		ИнформацияОВнешнемФайле.Вставить("ИмяОбработки", ИмяОбработки);
		ИнформацияОВнешнемФайле.Вставить("ТипОбъектаРазработки", ТипОбъектаРазработки);
		
		РезультатАнализаСтроки  = RegExp.Execute(ТекстМодуля);
		Для Каждого Выражение Из РезультатАнализаСтроки Цикл
			
			RegExp.Pattern = "\d+(\.\d+)?";
			КоллекцияСовпаденийВерсии = RegExp.Execute(Выражение.Value);
			Для Каждого ВыражениеНомерВерсии Из КоллекцияСовпаденийВерсии Цикл
				НомерВерсии = ВыражениеНомерВерсии.Value;
				
				ИнформацияОВнешнемФайле.Вставить("НомерВерсии", НомерВерсии);
				ИнформацияОВнешнемФайле.Вставить("ИмяОбработки", ИмяОбработки);
				ИнформацияОВнешнемФайле.Вставить("ТипОбъектаРазработки", ТипОбъектаРазработки);
				

				Прервать;	
			КонецЦикла;
			Прервать;
		КонецЦикла;
		ВнешниеФайлы.Добавить(ИнформацияОВнешнемФайле);
	КонецЦикла;
	
	Возврат ВнешниеФайлы;
	
КонецФункции

Функция ТекущаяЗадача(База, НастройкиПользователя) Экспорт
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаТекущаяВетка();
	
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);
		
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	ВыводКоманды = ДанныеЛогов.ПодробныйЛогСтрокой;

	Возврат Справочники.Задачи.ЗадачаПоВетке(НастройкиПользователя, , ВыводКоманды, База);
	
КонецФункции

// Функция - Разобранная ветка
//
// Параметры:
//  Ветка	 - 	Строка - Имя ветки
// 
// Возвращаемое значение:
//  РазобраннаяВетка - Структура
//
Функция РазобраннаяВетка(Знач Ветка) Экспорт
	
	РазобраннаяВетка = РазобраннаяВеткаНовыйСтруктура(Ветка);
	
	Ветка = СтрЗаменить(Ветка, "remotes/origin/", "");
	ДанныеИзНазванияВетки = СтрРазделить(Ветка, "/");
	Если ДанныеИзНазванияВетки.Количество() = 1 Тогда
		Возврат РазобраннаяВетка;
	КонецЕсли;
	
	РазобраннаяВетка.Префикс = ПрефиксПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	РазобраннаяВетка.НомерЗадачиБазовой = НомерЗадачиБазовойПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	РазобраннаяВетка.НомерЗадачиРазработки = НомерЗадачиРазработкиПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	РазобраннаяВетка.НомерХотфикса = НомерНомерХотфиксаДаннымИзНазванияВетки(ДанныеИзНазванияВетки);
	
	Возврат РазобраннаяВетка;
		
КонецФункции

Функция ШаблонНомераВетки(СтруктураВетки) Экспорт
	
	ШаблонНомераВетки = "%1_%2";
	Если Не ЗначениеЗаполнено(СтруктураВетки.НомерЗадачиБазовой) Тогда
		ШаблонНомераВетки = "%1%2";
	КонецЕсли;
	
	Возврат ШаблонНомераВетки;
	
КонецФункции

Процедура СоздатьНовуюВеткуВГИТПоЗадаче(Задача, База, НастройкиПользователя) Экспорт
	
	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(Задача);
	Если Не ЗначениеЗаполнено(База) Тогда
		База = Справочники.Базы.БазаТекущегоПользователя(Пользователи.АвторизованныйПользователь());
	КонецЕсли;
	Если Не ЗначениеЗаполнено(База) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить базу текущего пользователя'"));
		Возврат;
	КонецЕсли;
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	Если Не РепозиторийСуществует(ПараметрыБазы.КаталогБазыШара, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаСозданияВетки(ПараметрыБазы, ПараметрыЗадачи);
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);

	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаИзвлечениеИзменений();
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);
	
КонецПроцедуры

Функция РепозиторийСуществует(КаталогРепозиторияБазы, ВыводитьСообщения = Ложь) Экспорт
	
	Если ПустаяСтрока(КаталогРепозиторияБазы) Тогда
		Если ВыводитьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Ошибка: Не указан каталог репозиториев в проекте!"));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РаботаСGit.КаталогРепозиторияСуществует(КаталогРепозиторияБазы) Тогда
		Если ВыводитьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка: Не существует каталог репозитория базы: %1'"), КаталогРепозиторияБазы));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	Если РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазы) Тогда
		Если ВыводитьСообщения Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Ошибка! Пустой каталог репозитория: %1'", КаталогРепозиторияБазы)));
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СоздатьНовыйРепозиторийВГИТ(База, ТекущийПользователь) Экспорт
	
	ПараметрыЗадачи       = Неопределено;
	ПараметрыБазы         = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(ТекущийПользователь);
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаСозданияРепозитория(ПараметрыБазы, НастройкиПользователя, ПараметрыЗадачи);
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска);
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
КонецПроцедуры

Процедура ОбновитьРепозиторийИзУдаленного(База, ТекущийКаталог) Экспорт
	
	ПараметрыЗадачи       = Неопределено;
	ПараметрыБазы         = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаОбновитьРепозиторийИзУдаленного();
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска, ТекущийКаталог);
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДанныеЛогов.ПодробныйЛогСтрокой);
	
КонецПроцедуры

Функция ДанныеЛоговПингаБазы(База) Экспорт
	
	ПараметрыЗадачи       = Неопределено;
	ПараметрыБазы         = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	ТекущийКаталог        = ПараметрыБазы.КаталогDevops;
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаПингБазы(ПараметрыБазы);
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска, ТекущийКаталог);
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);	
	
	Возврат ДанныеЛогов;
	
КонецФункции

Процедура КлонироватьРепозиторий(База, ТекущийКаталог, URLРепозитория) Экспорт

	ПараметрыБазы         = РаботаСGitAPIПовтИсп.НастройкиБазы(База);

	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаКлонироватьРепозиторий(URLРепозитория); //в константу
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска, ТекущийКаталог);
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаНастройкаSSLVerify();
	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска, ТекущийКаталог);
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговСОжиданием(ПараметрыЗапуска);

КонецПроцедуры

Функция КаталогРепозиторияБазыШара(База) Экспорт
	
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат "";
	КонецЕсли;
	НастройкиБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);

	КаталогРепозиторияБазы = СтрШаблон("%1\Repositories\%2", НастройкиБазы.ПутьКШаре, НастройкиБазы.ИмяИнформационнойБазы);
	
	Возврат КаталогРепозиторияБазы;
	
КонецФункции

Функция КаталогРепозиторияБазы(База) Экспорт
	
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат "";
	КонецЕсли;
	НастройкиБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);

	КаталогРепозиторияБазы = СтрШаблон("%1\Repositories\%2", НастройкиБазы.ПутьКПапкеДевопс, НастройкиБазы.ИмяИнформационнойБазы);
	
	Возврат КаталогРепозиторияБазы;
	
КонецФункции

Функция КаталогРепозиторияСуществует(ПолноеИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ПолноеИмяКаталога);
	Возврат КаталогНаДиске.Существует();
	
КонецФункции

Функция СоздатьКаталогРепозитория(ПолноеИмяКаталога) Экспорт
	
	КаталогНаДиске = Новый Файл(ПолноеИмяКаталога);
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		СоздатьКаталог(ПолноеИмяКаталога);
	Исключение
		Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытия(),,,, Ошибка);
	КонецПопытки;
	Если КаталогНаДиске.Существует() Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ИмяСобытия() Экспорт
	
	Возврат "GIT";
	
КонецФункции

Функция ПустойРепозиторий(КаталогРепозиторияБазы) Экспорт
	
	НайденныеФайлы = НайтиФайлы(КаталогРепозиторияБазы, "*.git", Ложь);
	Если НайденныеФайлы.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция КаталогБилдаРепозитория(КаталогРепозиторияБазы) Экспорт
	

	КаталогБилда = СтрШаблон("%1\build\epf", КаталогРепозиторияБазы);
	Если Не КаталогРепозиторияСуществует(КаталогБилда) Тогда
		Если Не СоздатьКаталогРепозитория(КаталогБилда) Тогда
			КаталогБилда = "";
		КонецЕсли;
	КонецЕсли;
	Возврат КаталогБилда;
	
КонецФункции

Функция КаталогБилдаРепозиторияШара(База) Экспорт
	
	КаталогРепозиторияБазы = КаталогРепозиторияБазыШара(База);
	Если Не КаталогРепозиторияСуществует(КаталогРепозиторияБазы) Тогда
		ВызватьИсключение "Каталог репозитория не существует!";
	КонецЕсли;
	КаталогБилда = СтрШаблон("%1\build\epf", КаталогРепозиторияБазы);
	Если Не КаталогРепозиторияСуществует(КаталогБилда) Тогда
		Если Не СоздатьКаталогРепозитория(КаталогБилда) Тогда
			КаталогБилда = "";
		КонецЕсли;
	КонецЕсли;
	Возврат КаталогБилда;
	
КонецФункции

Функция СтандартизацияТекста(ОбрабатываемаяСтрока) Экспорт
	
	ИтоговаяСтрока = "";
	ДлинаСтроки = СтрДлина(ОбрабатываемаяСтрока);
	Если ДлинаСтроки = 0 Тогда
		Возврат ИтоговаяСтрока;
	КонецЕсли;
	РазрешенныеСимволы = "1234567890 АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфхцчшщъыьэюяABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz.,_-+=()[]~<>;:";
	Для Сч = 1 По ДлинаСтроки Цикл
		СимволСтроки = Сред(ОбрабатываемаяСтрока,Сч,1);
		Если СтрНайти(РазрешенныеСимволы, СимволСтроки) = 0 Тогда
			Продолжить;
		КонецЕсли;
		ИтоговаяСтрока = СтрШаблон("%1%2", ИтоговаяСтрока, СимволСтроки);
	КонецЦикла;
	
	Возврат ИтоговаяСтрока;
	
КонецФункции



Функция АвторКоммита(НастройкиПользователя) Экспорт

	Возврат СтрШаблон("%1 <%2>", НастройкиПользователя.ИмяПользователяGit, НастройкиПользователя.ПочтаПользователяGit);
	
КонецФункции

Функция ИмяВеткиDev() Экспорт
	
	Возврат "develop";

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоВеткаРазработка(Ветка)
	Возврат СтрНайти(Ветка, "develop") > 0;	
КонецФункции

Функция ЭтоВеткаГлавная(Ветка)
	Возврат СтрНайти(Ветка, "main") > 0 ИЛИ СтрНайти(Ветка, "master") > 0;	
КонецФункции

Функция ЭтоУдаленнаяВетка(Ветка)
	Возврат СтрНайти(Ветка, "remotes") > 0;	
КонецФункции

Функция ЭтоВеткаЗадачи(Ветка)
	
	Возврат СтрНайти(Ветка, "feature") > 0
		ИЛИ СтрНайти(Ветка, "hotfix") > 0
		;
		
КонецФункции

Функция НевалидноеИмяВетки(Ветка)
	Возврат СтрРазделить(Ветка, "_").Количество() > 3 Или СтрНайти(Ветка, "-") > 0;
КонецФункции

Функция ЭтоВеткаРелиз(Ветка)
	Возврат СтрНайти(Ветка, "release") > 0;	
КонецФункции

Функция НомерЗадачи(Ветка)
	Возврат РазобраннаяВетка(Ветка).НомерЗадачиРазработки;
КонецФункции

Функция НовыйТаблицаВеток()
	
	ТаблицаВеток = Новый ТаблицаЗначений();
	ТаблицаВеток.Колонки.Добавить("Текущая", Новый ОписаниеТипов("Булево"));
	ТаблицаВеток.Колонки.Добавить("ТипЗадачи", Новый ОписаниеТипов("СправочникСсылка.ПрефиксыЗадач"));
	ТаблицаВеток.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка"));
	ТаблицаВеток.Колонки.Добавить("Задача", Новый ОписаниеТипов("СправочникСсылка.Задачи"));
	ТаблицаВеток.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗадач"));
	ТаблицаВеток.Колонки.Добавить("Локально", Новый ОписаниеТипов("Булево"));
	ТаблицаВеток.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаВеток.Колонки.Добавить("ПодробноеОписание", Новый ОписаниеТипов("Строка"));
	Возврат ТаблицаВеток;
	
КонецФункции

Функция ЭтоОбработка(ПутьКФайлу)
	
	Текст = Новый ЧтениеТекста();
	Текст.Открыть(ПутьКФайлу, КодировкаТекста.UTF8);
	
	ТекстМодуля = Текст.Прочитать();
	Текст.Закрыть();
	Возврат СтрНайти(ТекстМодуля, "ExternalDataProcessor") > 0;
	
КонецФункции

Функция РазобраннаяВеткаНовыйСтруктура(Ветка)

	РазобраннаяВеткаНовыйСтруктура = Новый Структура;
	РазобраннаяВеткаНовыйСтруктура.Вставить("Префикс", Справочники.ПрефиксыЗадач.ПустаяСсылка());
	РазобраннаяВеткаНовыйСтруктура.Вставить("НомерЗадачиБазовой", "");
	РазобраннаяВеткаНовыйСтруктура.Вставить("НомерЗадачиРазработки", "");
	РазобраннаяВеткаНовыйСтруктура.Вставить("НомерХотфикса", "");
	РазобраннаяВеткаНовыйСтруктура.Вставить("ИсходноеИмяВетки", Ветка);
	
	Возврат РазобраннаяВеткаНовыйСтруктура;

КонецФункции

Функция ПрефиксПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	Попытка
		Префикс = ДанныеИзНазванияВетки[0];
		Префикс = СтрЗаменить(Префикс, "* ", ""); //Признак текущей ветки
		Возврат Справочники.ПрефиксыЗадач[Префикс];
	Исключение
		Возврат Справочники.ПрефиксыЗадач.ПустаяСсылка();
	КонецПопытки;

КонецФункции

Функция НомерЗадачиБазовойПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	НомерЗадачиБазовой = "";
	
	МассивНазваний = СтрРазделить(ДанныеИзНазванияВетки[1], "_", Ложь);
	Если МассивНазваний.Количество() = 2 ИЛИ МассивНазваний.Количество() = 3 Тогда
		НомерЗадачиБазовой = МассивНазваний[0];
	КонецЕсли;

	Возврат НомерЗадачиБазовой;
	
КонецФункции

Функция НомерЗадачиРазработкиПоДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	НомерЗадачиРазработки = "";
	
	МассивНазваний = СтрРазделить(ДанныеИзНазванияВетки[1], "_", Ложь);
	Если МассивНазваний.Количество() > 0 Тогда
		Если МассивНазваний.Количество() = 3 ИЛИ МассивНазваний.Количество() = 2 Тогда
			НомерЗадачиРазработки = МассивНазваний[1];
		Иначе
			НомерЗадачиРазработки = МассивНазваний[0];
		КонецЕсли;
	КонецЕсли;	

	Возврат НомерЗадачиРазработки;
		
КонецФункции

Функция НомерНомерХотфиксаДаннымИзНазванияВетки(ДанныеИзНазванияВетки)
	
	НомерХотфикса = "";
	
	МассивНазваний = СтрРазделить(ДанныеИзНазванияВетки[1], "_", Ложь);
	Если МассивНазваний.Количество() = 3 Тогда
		НомерХотфикса = МассивНазваний[2];
	КонецЕсли;

	Возврат НомерХотфикса;

КонецФункции

#КонецОбласти
