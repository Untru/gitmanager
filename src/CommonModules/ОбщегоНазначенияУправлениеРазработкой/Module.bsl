
#Область ПрограммныйИнтерфейс

Процедура ОчисткаПапкиЛогов() Экспорт

	ОтладкаЛогов = Константы.ОтладкаЛогов.Получить();
	Если ОтладкаЛогов Тогда
		ПутьКПапке = Константы.ПутьКПапкеДевопсСервера.Получить();
		УдалитьФайлы(ПутьКПапке);
	КонецЕсли;

КонецПроцедуры

Функция ТекстОкончанияКоманды() Экспорт
	Возврат "Запуск приложения завершен";
КонецФункции

// СортироватьСсылкиПоРеквизитам  —  сортирует массив или список значений (ссылок одного типа) по реквизитам соответствующих объектов
// 
// Параметры: 
// КоллекцияСсылок — Массив, СписокЗначений — сортируемая коллекция однотипных ссылок
// РеквизитыСортировки — Строка — Список имен реквизитов, разделенных запятыми, по которым производится сортировка коллекции. 
//								  После каждого имени колонки через пробел может быть указано направление сортировки. 
//								  Направление определяется: "Убыв" ("Desc") - упорядочивать по убыванию; "Возр" ("Asc") - упорядочивать по возрастанию. 
//								  По умолчанию сортировка производится по возрастанию. Порядок указания имен реквизитов определяет порядок сортировки. 
//								  При пустом значении производится автоупорядочивание ссылок.
// Возвращаемое значение: 
//      — Массив — 
//      — СписокЗначений — 
// Пример:
//     СЗ = СортироватьСсылкиПоРеквизитам(СЗ, "Код УБЫВ");
Функция СортироватьСсылкиПоРеквизитам(Знач КоллекцияСсылок, Знач РеквизитыСортировки = Неопределено) Экспорт
	ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
			"ОбщегоНазначения.СортироватьСсылкиПоРеквизитам"
			, "КоллекцияСсылок"
			, КоллекцияСсылок
			, Новый ОписаниеТипов("Массив, СписокЗначений"));
			
	Если Не ЗначениеЗаполнено(КоллекцияСсылок) Тогда
		Если ТипЗнч(КоллекцияСсылок) = Тип("Массив") Тогда
			Возврат Новый Массив;
		ИначеЕсли ТипЗнч(КоллекцияСсылок) = Тип("СписокЗначений") Тогда	
			Возврат Новый СписокЗначений(); 
		КонецЕсли;
	КонецЕсли;           

	Если НЕ ЗначениеЗаполнено(РеквизитыСортировки) Тогда
		РеквизитыСортировки = "Ссылка";
	КонецЕсли;
	
	Если ТипЗнч(КоллекцияСсылок) = Тип("Массив") Тогда
		МассивСсылок = КоллекцияСсылок; 
	ИначеЕсли ТипЗнч(КоллекцияСсылок) = Тип("СписокЗначений") Тогда	
		МассивСсылок = КоллекцияСсылок.ВыгрузитьЗначения(); 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка КАК Ссылка 
		|ИЗ
		|	" + МассивСсылок[0].Метаданные().ПолноеИмя() + " КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)
	    |УПОРЯДОЧИТЬ ПО
	    |	" + РеквизитыСортировки + "
	    |АВТОУПОРЯДОЧИВАНИЕ";

	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);	
	ОтсортированныеСсылки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Если ТипЗнч(КоллекцияСсылок) = Тип("Массив") Тогда
		Возврат ОтсортированныеСсылки;
	ИначеЕсли ТипЗнч(КоллекцияСсылок) = Тип("СписокЗначений") Тогда	  
		СЗ = Новый СписокЗначений();
		Для каждого Ссылка Из ОтсортированныеСсылки Цикл
			Для каждого элСписка Из КоллекцияСсылок Цикл
				Если элСписка.Значение = Ссылка Тогда
					СЗ.Добавить(элСписка.Значение, элСписка.Представление, элСписка.Пометка, элСписка.Картинка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Возврат СЗ; 
	КонецЕсли;
КонецФункции

Процедура УстановитьПараметрыСеансаКомандЗапуска(ИменаПараметровСеанса) Экспорт
	
	Если ИменаПараметровСеанса = Неопределено Тогда
		ПараметрыСеанса.ПараметрыКомандЗапуска = Новый ФиксированнаяСтруктура(НовыйПараметрыКомандЗапуска());
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйПараметрыКомандЗапуска() Экспорт

	Результат = Новый Структура;
	Результат.Вставить("NameDB", "");
	Результат.Вставить("UsrLogin1c", "");
	Результат.Вставить("UsrPswd1c", "");
	Результат.Вставить("PathServer1с", "");
	Результат.Вставить("NumberPlatform", "");
	Результат.Вставить("ServerDB", "");
	Результат.Вставить("TypeDB", "");
	Результат.Вставить("UsrLoginDB", "");
	Результат.Вставить("UsrPswdDB", "");
	Результат.Вставить("PathServerDB", "");
	Результат.Вставить("Репозиторий", "");
	Результат.Вставить("TokenConnectionGitLab", "");
	Результат.Вставить("IdProject", "");
	Результат.Вставить("RunRas", "");
	Результат.Вставить("MethodLoadDB", "");
	Результат.Вставить("NameDBWeb", "");
	Результат.Вставить("CommitAuthor", "");
	Результат.Вставить("LoadDB", "");
	Результат.Вставить("Extensions", "");
	Результат.Вставить("NamesDataProcessors", "");	
	Результат.Вставить("TextCommit", "");
	Результат.Вставить("TokenConnectionGitLab", "");
	Результат.Вставить("UserName", "");
	Результат.Вставить("UserEmail", "");
	Результат.Вставить("IdUserGitlab", "");	
	Результат.Вставить("ServerDBWeb", "");
	Результат.Вставить("PathRelease", "");
	Результат.Вставить("PathStorage", "");
	Результат.Вставить("UserStorage", "");
	Результат.Вставить("PathStorageAelita", "");
	Результат.Вставить("UserStorageAelita", "");
	Результат.Вставить("PathStorageToolsWorld", "");
	Результат.Вставить("UserStorageToolsWorld", "");
	Результат.Вставить("NewBranche", "");
	Результат.Вставить("PathRepository", "");
	Результат.Вставить("PathRepositoryMain", "");
	
	Результат.Вставить("oscript", "");
	Возврат Результат;
	
КонецФункции

Процедура НастроитьПараметрыКомандЗапуска(База = Неопределено, Пользователь = Неопределено, Задача = Неопределено) Экспорт
	
	ПараметрыКомандЗапуска = Новый Структура(ПараметрыСеанса.ПараметрыКомандЗапуска);
	
	Если ЗначениеЗаполнено(База) Тогда
		
		ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
		ПараметрыКомандЗапуска.ServerDB = ПараметрыБазы.ИмяSQL;
		ПараметрыКомандЗапуска.NameDB = ПараметрыБазы.ИмяИнформационнойБазы;
		ПараметрыКомандЗапуска.UsrLogin1c = ПараметрыБазы.ИмяПользователяИнформационнойБазы;
		ПараметрыКомандЗапуска.UsrPswd1c = ПараметрыБазы.ПарольПользователяИнформационнойБазы;
		ПараметрыКомандЗапуска.PathServer1с = ПараметрыБазы.КластерСерверов;
		ПараметрыКомандЗапуска.NumberPlatform = ПараметрыБазы.НомерВерсииПлатформы;
		ПараметрыКомандЗапуска.TypeDB = ПараметрыБазы.ТипSQL;
		ПараметрыКомандЗапуска.UsrLoginDB = ПараметрыБазы.ЛогинSQL;
		ПараметрыКомандЗапуска.UsrPswdDB = ПараметрыБазы.ПарольSQL;
		ПараметрыКомандЗапуска.PathRepositoryMain = ПараметрыБазы.РепозиторийБазы; //ПоправитьНазвания
		ПараметрыКомандЗапуска.PathRepository = ПараметрыБазы.КаталогБазы;
		ПараметрыКомандЗапуска.PathServerDB = ПараметрыБазы.КластерСерверов;
		ПараметрыКомандЗапуска.MethodLoadDB = Строка(ПараметрыБазы.РежимРаботыКонфигурации);
		ПараметрыКомандЗапуска.NameDBWeb = ПараметрыБазы.БазаПубликации;
		ПараметрыКомандЗапуска.IdProject = ПараметрыБазы.ИДПроектаРепозитория;
		ПараметрыКомандЗапуска.Репозиторий = ПараметрыБазы.Репозиторий;		
		ПараметрыКомандЗапуска.ServerDBWeb = ПараметрыБазы.СерверПубликации;
		ПараметрыКомандЗапуска.MethodLoadDB = Строка(ПараметрыБазы.РежимРаботыКонфигурации);
		ПараметрыКомандЗапуска.LoadDB = ПараметрыБазы.СобиратьКонфигурациюВРелиз;
		ПараметрыКомандЗапуска.PathRelease = ПараметрыБазы.КаталогСборкиРелиза;
		ПараметрыКомандЗапуска.PathStorage = ПараметрыБазы.ПутьКХранилищу;
		ПараметрыКомандЗапуска.UserStorage = ПараметрыБазы.ПользовательХранилища;
		ПараметрыКомандЗапуска.PathStorageAelita = ПараметрыБазы.ПутьКХранилищуAelita;
		ПараметрыКомандЗапуска.UserStorageAelita = ПараметрыБазы.ПользовательХранилищаAelita;
		ПараметрыКомандЗапуска.PathStorageToolsWorld = ПараметрыБазы.ПутьКХранилищуToolsWorld;
		ПараметрыКомандЗапуска.UserStorageToolsWorld = ПараметрыБазы.ПользовательХранилищаToolsworld;
		ПараметрыКомандЗапуска.oscript = КомандыЗапускаПриложения.ФайлЗапускаOscript(ПараметрыБазы);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Задача) Тогда
		
		ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(Задача);
		ПараметрыКомандЗапуска.NewBranche = ПараметрыЗадачи.ИмяВетки;
		ПараметрыКомандЗапуска.LoadDB = Формат(ПараметрыЗадачи.ДорабатыватьКонфигурацию, "БЛ=false; БИ=true");
		ПараметрыКомандЗапуска.NamesDataProcessors = ПараметрыЗадачи.ВнешниеФайлы;
		ПараметрыКомандЗапуска.Extensions = ПараметрыЗадачи.Расширения;
		
	КонецЕсли;
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Пользователь);
	ПараметрыКомандЗапуска.CommitAuthor = РаботаСGit.АвторКоммита(НастройкиПользователя);
	ПараметрыКомандЗапуска.TokenConnectionGitLab = НастройкиПользователя.ТокенGitLab;
	ПараметрыКомандЗапуска.UserName = НастройкиПользователя.ИмяПользователяGitLab;
	ПараметрыКомандЗапуска.UserEmail = НастройкиПользователя.ПочтаПользователяGitLab;
	ПараметрыКомандЗапуска.IdUserGitlab = НастройкиПользователя.IDПользователяGitLab;

	ПараметрыСеанса.ПараметрыКомандЗапуска = Новый ФиксированнаяСтруктура(ПараметрыКомандЗапуска);
	
КонецПроцедуры

Процедура ИзменитьЗначенияКлючей(НовыеЗначения) Экспорт
	
	ПараметрыКомандЗапуска = Новый Структура(ПараметрыСеанса.ПараметрыКомандЗапуска);
	Для Каждого Элемент Из НовыеЗначения Цикл
		ПараметрыКомандЗапуска.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	ПараметрыСеанса.ПараметрыКомандЗапуска = Новый ФиксированнаяСтруктура(ПараметрыКомандЗапуска);
	
КонецПроцедуры

Функция ЗначениеПоКлючу(Ключ) Экспорт
	Возврат ПараметрыСеанса.ПараметрыКомандЗапуска[Ключ];	
КонецФункции

Функция СимволКакашки() Экспорт
	
	Пара = ПолучитьСуррогатнуюПару(128169);
	Позиция = ПолучитьКодовуюПозицию(Пара.ВерхняяПара, Пара.НихняяПара);
	Возврат Символ(Пара.ВерхняяПара) + Символ(Пара.НихняяПара); 

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСуррогатнуюПару(КодоваяПозиция)
	
	Результат = Новый Структура("ВерхняяПара, НихняяПара");
	
	Результат.ВерхняяПара = ПобитовыйСдвигВправо(КодоваяПозиция, 10) + (55296 - (ПобитовыйСдвигВправо(65536, 10)));
	Результат.НихняяПара = ПобитовоеИ(КодоваяПозиция, 1023) + 56320;
	
	Возврат Результат;
	
КонецФункции

функция ПолучитьКодовуюПозицию(ВерхняяЧасть, НихняяЧасть)
	
	Возврат (ПобитовыйСдвигВлево(ВерхняяЧасть, 10) + НихняяЧасть) + (65536 - (ПобитовыйСдвигВлево(55296, 10)) - 56320);
	
КонецФункции

#КонецОбласти
