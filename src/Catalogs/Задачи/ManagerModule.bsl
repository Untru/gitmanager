// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Объекты разработки
//
// Параметры:
//  Задача	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОбъектыРазработки(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачиВнешниеФайлы.Обработка КАК Обработка
		|ИЗ
		|	Справочник.Задачи.ВнешниеФайлы КАК ЗадачиВнешниеФайлы
		|ГДЕ
		|	ЗадачиВнешниеФайлы.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	ОбработкиЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Обработка");
	
	Возврат ОбработкиЗадачи;
	
КонецФункции

// Функция - Объекты разработки по задачам
//
// Параметры:
//  Задачи	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ОбъектыРазработкиПоЗадачам(Задачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗадачиВнешниеФайлы.Обработка КАК Обработка
	|ИЗ
	|	Справочник.Задачи.ВнешниеФайлы КАК ЗадачиВнешниеФайлы
	|ГДЕ
	|	ЗадачиВнешниеФайлы.Ссылка В(&Задача)";
	
	Запрос.УстановитьПараметр("Задача", Задачи);
	
	ОбработкиЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Обработка");
	
	Возврат ОбработкиЗадачи;
	
КонецФункции

Функция КоличествоЗадачХотфиксПоЗадаче(НомерЗадачи) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Задачи.Ссылка) КАК КоличествоЗадач
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.НомерЗадачи = &НомерЗадачи
		|	И Задачи.ПрефиксВетки = &ПрефиксВетки";
	
	Запрос.УстановитьПараметр("НомерЗадачи", НомерЗадачи);
	Запрос.УстановитьПараметр("ПрефиксВетки", Справочники.ПрефиксыЗадач.hotfix);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоЗадач;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ЗадачаПоРазобраннойВетке(СтруктураВетки) Экспорт
	
КонецФункции

Функция ЗадачаПоИмениВетки(ИмяВетки) Экспорт	

	Результат = Справочники.Задачи.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.ИмяВетки = &ИмяВетки
		|	И НЕ Задачи.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИмяВетки", ИмяВетки);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыЗадачи(Задача) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ИмяВетки КАК ИмяВетки,
		|	ПРЕДСТАВЛЕНИЕ(Задачи.ПрефиксВетки) КАК ПрефиксВетки,
		|	Задачи.ВнешниеФайлы.(
		|		Обработка КАК Обработка
		|	) КАК ВнешниеФайлы,
		|	Задачи.Расширения.(
		|		Расширение КАК Расширение
		|	) КАК Расширения,
		|	Задачи.ДорабатыватьКонфигурацию КАК ДорабатыватьКонфигурацию,
		|	Задачи.ToolsWorld КАК ToolsWorld,
		|	Задачи.Aelita КАК Aelita
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	РеквизитыЗадачи = Запрос.Выполнить().Выгрузить()[0];
	
	МассивРасширений = Новый Массив;
	Если РеквизитыЗадачи.ToolsWorld Тогда
		МассивРасширений.Добавить("ToolsWorld");
	КонецЕсли;
	
	Если РеквизитыЗадачи.Aelita Тогда
		МассивРасширений.Добавить("Aelita");
	КонецЕсли;
		
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("ВнешниеФайлы", СтрСоединить(РеквизитыЗадачи.ВнешниеФайлы.ВыгрузитьКолонку("Обработка"), ","));
	ПараметрыЗадачи.Вставить("Расширения", СтрСоединить(МассивРасширений, ","));
	ПараметрыЗадачи.Вставить("ИмяВетки", СтрШаблон("%1/%2", РеквизитыЗадачи.ПрефиксВетки, РеквизитыЗадачи.ИмяВетки));
	ПараметрыЗадачи.Вставить("ДорабатыватьКонфигурацию", РеквизитыЗадачи.ДорабатыватьКонфигурацию);
	
	Возврат ПараметрыЗадачи;
		
КонецФункции

Функция СоздатьЗадачуИВеткуКНей(НастройкиПользователя ,База , НомерНовойЗадачи, ВариантСозданияЗадачи) Экспорт
	
	Если ВариантСозданияЗадачи = "ХотфиксКЗадаче" Тогда
		Задача = ХотфиксКЗадаче(НомерНовойЗадачи);
	Иначе
		Если ВариантСозданияЗадачи = "НоваяЗадача" Тогда
			ТипЗадачи = Справочники.ПрефиксыЗадач.feature;
		Иначе	
			ТипЗадачи = Справочники.ПрефиксыЗадач.hotfix;
		КонецЕсли;
		Задача = НоваяЗадача(НомерНовойЗадачи, База.Владелец, ТипЗадачи);
	КонецЕсли;

	РаботаСGit.СоздатьНовуюВеткуВГИТПоЗадаче(Задача, База, НастройкиПользователя);
	Возврат Задача;
	
КонецФункции

Функция ХотфиксКЗадаче(НомерЗадачи) Экспорт
	
	Задача = НайтиПоРеквизиту("НомерЗадачи", НомерЗадачи);
	НоваяЗадача = Задача.Скопировать();
	КоличествоЗадач = КоличествоЗадачХотфиксПоЗадаче(НомерЗадачи);
	НоваяЗадача.ИмяВетки = СтрШаблон("%1_%2_%3", Задача.НомерЗадачиБазовой, НомерЗадачи, КоличествоЗадач + 1);
	НоваяЗадача.Код = НоваяЗадача.ИмяВетки;
	НоваяЗадача.ОсновнаяЗадача = Задача;
	НоваяЗадача.ПрефиксВетки = Справочники.ПрефиксыЗадач.hotfix;
	НоваяЗадача.Наименование = СтрШаблон("%1 Исправление № %2", НоваяЗадача.Наименование, КоличествоЗадач + 1);
	Если Не НоваяЗадача.ПроверитьЗаполнение() Тогда
		ВызватьИсключение(НСтр("ru='Задачу не вышло записать'"));
	КонецЕсли;
	НоваяЗадача.Записать();
	
	Возврат НоваяЗадача.Ссылка;
	
КонецФункции

Функция НоваяЗадача(НомерЗадачи, Проект, ТипЗадачи = Неопределено) Экспорт
	
	Задача = НайтиПоРеквизиту("НомерЗадачи", НомерЗадачи);
	Если Задача = Справочники.Задачи.ПустаяСсылка() Тогда
		ДанныеЗаполнения = ДанныеЗаполненияПоЗадаче(НомерЗадачи, Проект);
		Если ЗначениеЗаполнено(ТипЗадачи) Тогда
			ДанныеЗаполнения.Вставить("ПрефиксВетки", ТипЗадачи);
		КонецЕсли;
		ДозаполнитьДаннымиПоУмолчанию(ДанныеЗаполнения);
		
		ЗадачаОбъект = СоздатьЭлемент();
		ЗадачаОбъект.Заполнить(ДанныеЗаполнения);
		Если Не ЗадачаОбъект.ПроверитьЗаполнение() Тогда
			ВызватьИсключение НСтр("ru='Проверка записи задачи не прошла'");
		КонецЕсли;
		ЗадачаОбъект.Записать();
		Задача = ЗадачаОбъект.Ссылка;
	ИначеЕсли ТипЗадачи <> Неопределено
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ПрефиксВетки") <> ТипЗадачи Тогда
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		ЗадачаОбъект.ПрефиксВетки = ТипЗадачи;
		ЗадачаОбъект.Записать();
	КонецЕсли;
	
	Возврат Задача;
	
КонецФункции

Процедура ДозаполнитьДаннымиПоУмолчанию(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения.Свойство("ПрефиксВетки") Тогда
		ДанныеЗаполнения.Вставить("ПрефиксВетки", Справочники.ПрефиксыЗадач.feature);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЗаполненияПоЗадаче(НомерЗадачи, Проект) Экспорт
	
	ДанныеЗаполнения = Новый Структура();
	ТаскТрекер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ТаскТрекер");
	ТипТаскТрекера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаскТрекер, "ТипТаскТрекера");
	Если ТипТаскТрекера = Перечисления.ТаскТрекеры.Bitrix Тогда
		ДанныеЗаполнения = РаботаСBitrix.СтруктурированныеДанныеПоЗадачеИзБитрикс(НомерЗадачи);
	ИначеЕсли ТипТаскТрекера = Перечисления.ТаскТрекеры.Предприятие1С Тогда
		ДанныеЗаполнения = РаботаСПредприятие1С.СтруктурированныеДанныеПоЗадаче(НомерЗадачи, ТаскТрекер);
	КонецЕсли;

	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПоследнийСпринт(Задача) Экспорт

	Результат = Справочники.Спринты.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачиСпринты.Спринт.ДатаНачала КАК ДатаНачала,
		|	ЗадачиСпринты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Задачи.Спринты КАК ЗадачиСпринты
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКомментарийКЗадаче(Задача, Комментарий, Токен = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Токен) Тогда
		Токен = "1/" +РаботаСBitrix.ТокенBitrix();
	КонецЕсли;
	
	СсылкаBitrix = СсылкаBitrix() + Токен;
	OPI_Bitrix24.ДобавитьКомментарийЗадачи(СсылкаBitrix, Задача.НомерЗадачи, Комментарий);
	
КонецПроцедуры

Процедура ПеревестиЗадачуНаСтадиюТестирования(Задача)
	
	Тестирование = РаботаСBitrix.СоответствиеСостоянийКанбан()["Тестирование"];
	СсылкаBitrix = СсылкаBitrix() + РаботаСBitrix.ТокенBitrix();
	OPI_Bitrix24.ПеренестиЗадачуВСтадиюКанбана(СсылкаBitrix, Задача.НомерЗадачи, Тестирование);

КонецПроцедуры

Функция ВеткаЗадачи(Задача) Экспорт
	
	ДанныеВетки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ПрефиксВетки, ИмяВетки");	
	Возврат СтрШаблон("%1/%2", ДанныеВетки.ПрефиксВетки, ДанныеВетки.ИмяВетки);
	
КонецФункции

Функция КаталогиТестовЧерезЗапятую(Задача) Экспорт
	
	КаталогиТестов = КаталогиТестов(Задача);
	
	КаталогиТестовОтформатированные = Новый Массив;
	КаталогиТестовЧерезЗапятую = "";
	
	Для Каждого КаталогТеста Из КаталогиТестов Цикл
		НомерСимволаСтрокиФича = СтрНайти(КаталогТеста, "\feature");
		КаталогТеста = Прав(КаталогТеста, СтрДлина(КаталогТеста) - НомерСимволаСтрокиФича);
		КаталогиТестовОтформатированные.Добавить(КаталогТеста);
	КонецЦикла;
	
	Возврат СтрСоединить(КаталогиТестовОтформатированные, ",");
	
КонецФункции

Функция РасширенияЧерезЗапятую(Задача) Экспорт
	
	Результат = Новый Массив;
	Если Задача.ToolsWorld Тогда
		Результат.Добавить("ToolsWorld");
	КонецЕсли;
	
	Если Задача.Aelita Тогда
		Результат.Добавить("Aelita");
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, ",");
	
КонецФункции

Функция КаталогиТестов(Задача) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиКасаемыеПроцессы.ПолноеИмяПроцесса КАК ПолноеИмяПроцесса
	|ИЗ
	|	Справочник.Задачи.КасаемыеПроцессы КАК ЗадачиКасаемыеПроцессы
	|ГДЕ
	|	ЗадачиКасаемыеПроцессы.Ссылка = &Задача";
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПолноеИмяПроцесса");
	
КонецФункции

Процедура ЗагрузитьЗадачиЗаПериодBitrix()
	ДатаПоследнейЗадачи =  ТекущаяДата() - 86400 * 10;	
	
	Фильтр = Новый Структура;
	Фильтр.Вставить(">CREATED_DATE", ДатаПоследнейЗадачи); //Тестово 10 дней
	
	Токен = "1/" +РаботаСBitrix.ТокенBitrix();
	СсылкаBitrix = СсылкаBitrix() + Токен;
	
	Отступ = 1;
	Результат = OPI_Bitrix24.ПолучитьСписокЗадач(СсылкаBitrix, Фильтр, Отступ, Токен);
	
КонецПроцедуры

Функция ДатаПоследнейЗадачи()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ Первые 1
		|	МАКСИМУМ(Задачи.ДатаСоздания) КАК ДатаСоздания
		|ИЗ
		|	Справочник.Задачи КАК Задачи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ДатаСоздания;

КонецФункции

Функция ЗадачаПоВетке(НастройкиПользователя, НомерЗадачи = Неопределено, Ветка = Неопределено, База = Неопределено) Экспорт
	
	Если НомерЗадачи = Неопределено И Ветка = Неопределено Тогда
		ВызватьИсключение "Параметры ""Номер задачи"" или ""Ветка"" должны быть заполнены!";
	КонецЕсли;
	
	Если НомерЗадачи = Неопределено Тогда
		НомерЗадачи = РаботаСGit.РазобраннаяВетка(Ветка).НомерЗадачиРазработки;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерЗадачи) Тогда
		Возврат Справочники.Задачи.ПустаяСсылка();	
	КонецЕсли;
	Если База = Неопределено Тогда
		ВызватьИсключение "Параметр ""База"" должен быть заполнен!";	
	КонецЕсли;	
	Задача = НоваяЗадача(НомерЗадачи, База.Владелец);
	
	Возврат Задача;
	
КонецФункции

Функция НеЗакрытыеЗадачи() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.Владелец КАК Проект,
		|	Задачи.НомерЗадачи КАК НомерЗадачи
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.СтатусЗадачи <> &СтатусЗадачи";
	
	Запрос.УстановитьПараметр("СтатусЗадачи", Перечисления.СтатусыЗадач.Завершена);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция НомераЗадачИСсылкиПоСписку(СписокЗадач) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача,
		|	Задачи.Владелец КАК Проект,
		|	Задачи.НомерЗадачи КАК НомерЗадачи
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.Ссылка В(&СписокЗадач)";
	
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция ЗадачиПоСпринтам(Ответственные, Спринты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Задачи.Ссылка КАК Задача,
	|	ВЫБОР
	|		КОГДА Задачи.ДатаСозданияБазовойЗадачи > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА Задачи.ДатаСозданияБазовойЗадачи
	|		ИНАЧЕ Задачи.ДатаСоздания
	|	КОНЕЦ КАК ДатаСоздания,
	|	ВЫБОР
	|		КОГДА Задачи.ТипБазовойЗадачи = ЗНАЧЕНИЕ(Перечисление.ТипыЗадач.Инцидент)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокСортировки,
	|	Задачи.ТипБазовойЗадачи КАК ТипБазовойЗадачи,
	|	Задачи.НеИзменятьКрайнийСрок КАК НеИзменятьКрайнийСрок,
	|	Задачи.Наименование КАК Наименование,
	|	Задачи.Ответственный КАК Ответственный,
	|	Задачи.ПлановоеВремя / 60 КАК ПлановоеВремя,
	|	Задачи.ЗатраченноеВремя / 60 КАК ЗатраченноеВремя,
	|	Задачи.КрайнийСрок КАК КрайнийСрок,
	|	ВЫБОР
	|		КОГДА Задачи.Спринт = ЗНАЧЕНИЕ(Справочник.Спринты.ПустаяСсылка)
	|			ТОГДА &Неразобранно
	|		ИНАЧЕ Задачи.Спринт
	|	КОНЕЦ КАК Спринт,
	|	Задачи.Спринт.ДатаНачала КАК ДатаНачала,
	|	Задачи.Спринт.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Справочник.Задачи КАК Задачи
	|ГДЕ
	//|	Задачи.СтатусЗадачи В(&СтатусЗадачи)
	|	НЕ Задачи.НеПланировать
	|	И Задачи.Ответственный В(&Ответственный)
	|	И (Задачи.Спринт В (&Спринты)
	|			ИЛИ Задачи.Спринт = ЗНАЧЕНИЕ(Справочник.Спринты.ПустаяСсылка))
	|	И Задачи.ПрефиксВетки = ЗНАЧЕНИЕ(Справочник.ПрефиксыЗадач.feature)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Спринт,
	|	ПорядокСортировки,
	|	ДатаСоздания";
	
	Запрос.УстановитьПараметр("Ответственный", Ответственные);
	Запрос.УстановитьПараметр("Спринты", Спринты);

	Неразобранно = Справочники.Спринты.НайтиПоНаименованию("Неразобранно");
	Запрос.УстановитьПараметр("Неразобранно", Неразобранно);
	
	СтатусЗадачи = Новый Массив;
	СтатусЗадачи.Добавить(Перечисления.СтатусыЗадач.Выполняется);
	СтатусЗадачи.Добавить(Перечисления.СтатусыЗадач.ЖдетВыполнения);
	Запрос.УстановитьПараметр("СтатусЗадачи", СтатусЗадачи);
	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТаблицаОткрытыхЗадач(ПользователиСАвтотрудозатратами, Спринт = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Ссылка КАК Задача,
	               |	Задачи.ЗатраченноеВремя КАК ЗатраченноеВремя,
	               |	Задачи.ПлановоеВремя КАК ПлановоеВремя,
	               |	Задачи.Ответственный КАК Пользователь,
	               |	0 КАК ДобавленноеВремя,
	               |	Задачи.НомерЗадачи КАК НомерЗадачи
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Ответственный В(&Пользователи)
	               |	И Задачи.СтатусЗадачи <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗадач.Завершена)
	               |	И (&Спринт = НЕОПРЕДЕЛЕНО
	               |			ИЛИ Задачи.Спринт = &Спринт)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ПлановоеВремя";
	
	Запрос.УстановитьПараметр("Пользователи", ПользователиСАвтотрудозатратами);
	Запрос.УстановитьПараметр("Спринт", Спринт);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура УстановитьАдресМерджРеквеста(ТекущаяЗадача, АдресМерджРеквеста) Экспорт
	
	ЗадатаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	ЗадатаОбъект.СсылкаMergeRequest = АдресМерджРеквеста;
	ЗадатаОбъект.Записать();
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СсылкаBitrix()
	
	Возврат "https://b24/rest/";
	
КонецФункции

Функция СтатусЗадачи(НомерСтатуса) Экспорт

	Результат = Новый Соответствие;
	Результат.Вставить("2", Перечисления.СтатусыЗадач.ЖдетВыполнения);
	Результат.Вставить("3", Перечисления.СтатусыЗадач.Выполняется);
	Результат.Вставить("4", Перечисления.СтатусыЗадач.ЖдетКонтроля);
	Результат.Вставить("5", Перечисления.СтатусыЗадач.Завершена);
	
	Возврат Результат[НомерСтатуса];
	
КонецФункции

Функция ПривестиКЧислу(Значение)
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
#КонецОбласти

#КонецЕсли
