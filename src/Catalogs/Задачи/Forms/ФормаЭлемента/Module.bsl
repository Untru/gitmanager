// @strict-types

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИнициализироватьФорму(Отказ);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УстановитьСсылкуSonar();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьИзBitrix(Команда)
	ОбновитьИзBitrixНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПодборОбработок(Команда)
	
	ТипыОбъектовРазработки = Новый Массив;
	ТипыОбъектовРазработки.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОбъектовРазработки.Обработка"));
	ТипыОбъектовРазработки.Добавить(ПредопределенноеЗначение("Перечисление.ТипыОбъектовРазработки.Отчет"));
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", Объект.Владелец);
	ПараметрыОтбора.Вставить("ТипОбъектаРазработки", ТипыОбъектовРазработки);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор",Истина);
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ПриЗакрытииПодборОбработок", ЭтотОбъект, "Подбор");
	ОткрытьФорму("Справочник.ОбъектыРазработки.ФормаВыбора", ПараметрыФормы, ЭтотОбъект, , , , ОбработкаВыбора);

КонецПроцедуры

&НаКлиенте
Процедура СсылкаBitrixНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(Объект.СсылкаBitrix);
КонецПроцедуры

&НаКлиенте
Процедура СсылкаSonarНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(СсылкаSonar);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПроцессы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьПроцессыПослеВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Проект", Объект.Владелец);
	
	ОткрытьФорму("Обработка.КомандыПроцессов.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьПроцессыПослеВыбора(СписокВыбранныхПроцессов, Параметры) Экспорт

	Если СписокВыбранныхПроцессов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.КасаемыеПроцессы.Очистить();
	
	Для Каждого ВыбранныйПроцесс Из СписокВыбранныхПроцессов Цикл
		СтрокаТаблицы = Объект.КасаемыеПроцессы.Добавить();
		СтрокаТаблицы.Процесс = ВыбранныйПроцесс.Представление;
		СтрокаТаблицы.ПолноеИмяПроцесса = ВыбранныйПроцесс.Значение;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзBitrixНаСервере()
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	Если НастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Не заполнены настройки пользователя!'"));
		Возврат;
	КонецЕсли;
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеЗаполнения = РаботаСПредприятие1С.СтруктурированныеДанныеПоЗадаче(ЗадачаОбъект.НомерЗадачи);
	Если ЗадачаОбъект.ПрефиксВетки = Справочники.ПрефиксыЗадач.hotfix Тогда
		ЗадачаОбъект.ПоменятьСтатусыЗадачи(ДанныеЗаполнения);
	Иначе
		ЗадачаОбъект.Заполнить(ДанныеЗаполнения);
	КонецЕсли;
	//ЗадачаОбъект.ПолучитьСписокТрудозатратЗадачи();
	//ЗадачаОбъект.ЗаполнитьСвязанныеЗадачи();
	ЗначениеВРеквизитФормы(ЗадачаОбъект, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииПодборОбработок(Значение, ДопПараметры) Экспорт
	
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из Значение Цикл
		НайденныеСтроки = Объект.ВнешниеФайлы.НайтиСтроки(Новый Структура("Обработка", Элемент));
		Если Не НайденныеСтроки.Количество() Тогда
			НоваяСтрока = Объект.ВнешниеФайлы.Добавить();
			НоваяСтрока.Обработка = Элемент;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НоваяОбработкаНаСервере(ИмяОбработки, БазаРепозитория)
	
	Если Не ЗначениеЗаполнено(БазаРепозитория) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось определить базу для получения каталога репозитория базы!'"));
		Возврат;
	КонецЕсли;
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(БазаРепозитория);
	Если ПустаяСтрока(КаталогРепозиторияБазы) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указан каталог репозитория базы!'"));
		Возврат;
	КонецЕсли;
	//todo вынести в менеджер или модуль
	ПутьКШаблону = СтрШаблон("%1\Шаблоны\ШаблонОбработки.epf", КаталогРепозиторияБазы);
	ПутьКНовойОбработке =  СтрШаблон("%1\build\epf\%2.epf", КаталогРепозиторияБазы, ИмяОбработки);
	КопироватьФайл(ПутьКШаблону, ПутьКНовойОбработке);
	
	ОбработкаОбъект = Справочники.ОбъектыРазработки.СоздатьЭлемент();
	ОбработкаОбъект.УстановитьНовыйКод();
	ОбработкаОбъект.Владелец = Объект.Владелец;
	ОбработкаОбъект.Наименование = ИмяОбработки;
	ОбработкаОбъект.ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Обработка;
	ОбработкаОбъект.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	ОбработкаОбъект.Записать();

	Обработка = ОбработкаОбъект.Ссылка;
	
	СтрокаВнешнихФайлов = Объект.ВнешниеФайлы.Добавить();
	СтрокаВнешнихФайлов.Обработка = Обработка;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НоваяОбработка(Команда)
	
	НазваниеОбработки = "";
	
	Обещание = ВвестиСтрокуАсинх(НазваниеОбработки, НСтр("ru = 'Введите название обработки'"));
	ИмяОбработки = Ждать Обещание;
	Если ЗначениеЗаполнено(ИмяОбработки) Тогда
		НоваяОбработкаНаСервере(ИмяОбработки, ВладелецФормы.База);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработки(Команда)
	
	//todo Открывать шару
	ПутьКНовойОбработке = СтрШаблон("%1\build\epf", НастройкиПользователя.КаталогРепозиторияНаШаре);
	ЗапуститьПриложение(ПутьКНовойОбработке);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму(Отказ)
	Если Объект.Ссылка.Пустая() Тогда
		НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
		Если НастройкиПользователя = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю("Не заполнены настройки пользователя!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьСсылкуSonar()
	ШаблонСсылкиSonar = ШаблонСсылкиSonar();
	СсылкаSonar = СтрШаблон(ШаблонСсылкиSonar, Объект.ИмяВетки, Нрег(Объект.Владелец)); 	
КонецПроцедуры

&НаСервере
Функция ШаблонСсылкиSonar()
	Возврат "http://gitlabprojects.toolsworld.root.local:9000/dashboard?branch=feature/%1&id=%2";
КонецФункции

&НаКлиенте
Процедура ИзменитьСостояние(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтатус(Команда)

	ИзменитьСтатусНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтатусНаСервере()


КонецПроцедуры

&НаКлиенте
Асинх Процедура ДобавитьКомментарий(Команда)

	КомментарийКЗадаче = "";
	
	Обещание = ВвестиСтрокуАсинх(КомментарийКЗадаче, НСтр("ru = 'Введите комментарий'"),, Истина);
	КомментарийКЗадаче = Ждать Обещание;
	Если Не ЗначениеЗаполнено(КомментарийКЗадаче) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Комментарий не введен'"));
		Возврат;
	КонецЕсли;
	НастройкиПользователя = ТекущиеНастройкиПользователя();
	
	ДобавитьКомментарийНаСервере(Объект.Ссылка, КомментарийКЗадаче, НастройкиПользователя.ТокенBitrix);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекущиеНастройкиПользователя()
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	Возврат Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(ТекущийПользователь);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьКомментарийНаСервере(Задача, Комментарий, Токен)

	Справочники.Задачи.ДобавитьКомментарийКЗадаче(Задача, Комментарий, Токен);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаMergeRequestНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиПоНавигационнойСсылке(Объект.СсылкаMergeRequest);

КонецПроцедуры


#КонецОбласти