#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)	
	ВидимостьКнопкиРепозитория();	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = Пользователи.АвторизованныйПользователь();
		Объект.ТипSQL = Перечисления.ТипыSQL.MSSQLServer;
		Объект.ЛогинSQL = "ibcmd";
	Иначе
		Если ЭтаФорма.ТолькоПросмотр И Объект.Ответственный <> Пользователи.АвторизованныйПользователь() Тогда
			Элементы.ФормаСоздатьРепозиторий.Доступность = Ложь;
			Элементы.ФормаУдалитьРепозиторий.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПутьНачалоВыбораRAS(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог = Объект.КаталогRAS;  
	ДиалогОткрытия.Заголовок = "Выберите каталог RAS"; 
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ВыборКаталогаRAS_Завершение", ЭтотОбъект, "" ))
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьРепозиторий(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Ошибка: Необходимо записать элемент справочника!");
		Возврат;
	КонецЕсли;
	
	Ошибка = "";
	Если СоздатьРепозиторийНаСервере(Ошибка) Тогда
		ПоказатьПредупреждение(, "Репозиторий создан!");
	Иначе
		ПоказатьПредупреждение(, Ошибка);
	КонецЕсли;
	ВидимостьКнопкиРепозитория();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРепозиторий(Команда)
	
	Если Модифицированность Тогда
		ПоказатьПредупреждение(, "Ошибка: Необходимо записать элемент справочника!");
		Возврат;
	КонецЕсли;
	
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("УдалитьРепозиторийОповещение", ЭтаФорма, Неопределено);
	ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, НСтр("ru = 'Удалить репозиторий?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Удаление репозитория'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРепозиторий(Команда)
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(Объект.Ссылка);
	Если ПустаяСтрока(КаталогРепозиторияБазы) Тогда
		ПоказатьПредупреждение(, "Ошибка: Не указан каталог репозиториев в проекте!");
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(КаталогРепозиторияБазы);	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработки(Команда)
	КаталогБилдаРепозитория = РаботаСGit.КаталогБилдаРепозиторияШара(Объект.Ссылка);
	Если КаталогБилдаРепозитория = "" Тогда
		ПоказатьПредупреждение(, "Не найден каталог обработок");
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(КаталогБилдаРепозитория);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборКаталогаRAS_Завершение(Результат, Параметр) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.КаталогRAS = Результат[0]
КонецПроцедуры

&НаСервере
Функция СоздатьРепозиторийНаСервере(Ошибка)

	КаталогРепозиторияБазыШара = РаботаСGit.КаталогРепозиторияБазыШара(Объект.Ссылка);
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазы(Объект.Ссылка);
	Если ПустаяСтрока(КаталогРепозиторияБазыШара) Тогда
		Ошибка = "Ошибка: Не указан каталог репозиториев в проекте!";
		Возврат Ложь;
	КонецЕсли;
	Если Не РаботаСGit.КаталогРепозиторияСуществует(КаталогРепозиторияБазыШара) Тогда
		Если Не РаботаСGit.СоздатьКаталогРепозитория(КаталогРепозиторияБазыШара) Тогда
			Ошибка = СтрШаблон("Ошибка: Не удалось создать каталог репозитория базы: %1", КаталогРепозиторияБазыШара);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Если Не РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазыШара) Тогда
		Ошибка = СтрШаблон("Ошибка! В каталоге есть файлы: %1%2Перед созданием репозитория каталог должен быть пустым.", КаталогРепозиторияБазы, Символы.ПС);
		Возврат Ложь;
	КонецЕсли;
	РаботаСGit.СоздатьНовыйРепозиторийВГИТ(Объект.Ссылка, Пользователи.АвторизованныйПользователь());
	Если РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазыШара) Тогда
		Ошибка = "Неизвестная ошибка, репозиторий не создан!";
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УдалитьРепозиторийОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Ошибка = "";
	Если УдалитьРепозиторийНаСервере(Ошибка) Тогда
		ПоказатьПредупреждение(, "Репозиторий удалён!");
	Иначе
		ПоказатьПредупреждение(, СтрШаблон("Ошибка: %1", Ошибка));
	КонецЕсли;
	ВидимостьКнопкиРепозитория();
	
КонецПроцедуры

&НаСервере
Функция УдалитьРепозиторийНаСервере(Ошибка)
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(Объект.Ссылка);
	
	Если ПустаяСтрока(КаталогРепозиторияБазы) Тогда
		Ошибка = "Не указан каталог репозиториев в проекте!";
		Возврат Ложь;
	КонецЕсли;
	Если Не РаботаСGit.КаталогРепозиторияСуществует(КаталогРепозиторияБазы) Тогда
		Ошибка = СтрШаблон("Не существует каталога репозитория базы: %1", КаталогРепозиторияБазы);
		Возврат Ложь;
	КонецЕсли;
	Если РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазы) Тогда
		Ошибка = "Репозиторий пустой!";
		Возврат Ложь;
	КонецЕсли;
	Попытка
		НайденныеФайлы = НайтиФайлы(КаталогРепозиторияБазы, "*", Истина);
		Для Каждого ТекущийФайл Из НайденныеФайлы Цикл
			Если ТекущийФайл.ПолучитьТолькоЧтение() Тогда
				ТекущийФайл.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		УдалитьФайлы(КаталогРепозиторияБазы, "*");
	Исключение
		Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	Если Не РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазы) Тогда
		Ошибка = "Не удалось удалить репозиторий!";
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ВидимостьКнопкиРепозитория()
	РепозиторийСуществует = Ложь;
	КаталогРепозиторияБазыШара = РаботаСGit.КаталогРепозиторияБазыШара(Объект.Ссылка);
	Если РаботаСGit.КаталогРепозиторияСуществует(КаталогРепозиторияБазыШара) Тогда
		РепозиторийСуществует = Не РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазыШара);
	КонецЕсли;
	
	Элементы.ФормаСоздатьРепозиторий.Видимость = Не РепозиторийСуществует;
	Элементы.ФормаГруппаУправлениеРепозиториями.Видимость = РепозиторийСуществует;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

#КонецОбласти