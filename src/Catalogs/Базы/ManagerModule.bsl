#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция НастройкиБазы(База) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Базы.Ссылка КАК База,
		|	Базы.Наименование КАК Наименование,
		|	Базы.ИмяИнформационнойБазы КАК ИмяИнформационнойБазы,
		|	Базы.ИмяПользователяИнформационнойБазы КАК ИмяПользователяИнформационнойБазы,
		|	Базы.ПарольПользователяИнформационнойБазы КАК ПарольПользователяИнформационнойБазы,
		|	ПРЕДСТАВЛЕНИЕ(Базы.ТипSQL) КАК ТипSQL,
		|	Базы.ИмяSQL КАК ИмяSQL,
		|	Базы.ЛогинSQL КАК ЛогинSQL,
		|	Базы.ПарольSQL КАК ПарольSQL,
		|	ЕСТЬNULL(Проекты.Репозиторий, """") КАК Репозиторий,
		|	ЕСТЬNULL(Проекты.ИДПроектаРепозитория, """") КАК ИДПроектаРепозитория,
		|	ЕСТЬNULL(Проекты.PathGitClone, """") КАК PathGitClone,
		|	ЕСТЬNULL(Проекты.РежимРаботыКонфигурации, ЗНАЧЕНИЕ(Перечисление.РежимыРаботыКонфигурации.Пакетный)) КАК
		|		РежимРаботыКонфигурации,
		|	Базы.ТипБазы = ЗНАЧЕНИЕ(Перечисление.ТипыБаз.РабочаяБаза) КАК ЭтоРабочаяБаза,
		|	ЕСТЬNULL(Кластеры.Наименование, """") КАК КластерСерверов,
		|	ЕСТЬNULL(Кластеры.ИмяАгентаБазы, """") КАК ИмяАгентаБазы,
		|	ЕСТЬNULL(Кластеры.ИмяАгентаJenkins, """") КАК ИмяАгентаJenkins,
		|	ЕСТЬNULL(Кластеры.ПутьКПапкеДевопс, """") КАК ПутьКПапкеДевопс,
		|	ЕСТЬNULL(Кластеры.НомерВерсииПлатформы, """") КАК НомерВерсииПлатформы,
		|	ЕСТЬNULL(Кластеры.ПутьКШаре, """") КАК ПутьКШаре,
		|	ЕСТЬNULL(Кластеры.ФайлЗапускаOscript, """") КАК ФайлЗапускаOscript,
		|	ЕСТЬNULL(Кластеры.ПутьКПапкеДевопс, """") + ""\Repositories"" КАК РепозиторийБазы,
		|	ЕСТЬNULL(Кластеры.ПутьКШаре, """") + ""\Repositories\"" КАК РепозиторийБазыШара,
		|	ЕСТЬNULL(Кластеры.ПутьКПапкеДевопс, """") + ""\Repositories\"" + Базы.ИмяИнформационнойБазы КАК КаталогБазы,
		|	ЕСТЬNULL(Кластеры.ПутьКПапкеДевопс, """") + ""\Repositories\"" + ""devops"" КАК КаталогDevops,
		|	ЕСТЬNULL(Кластеры.ПутьКШаре, """") + ""\Repositories\"" + ""devops"" КАК КаталогDevopsШара,
		|	ЕСТЬNULL(Кластеры.ПутьКШаре, """") + ""\Repositories\"" + Базы.ИмяИнформационнойБазы КАК КаталогБазыШара,
		|	ЕСТЬNULL(Кластеры.ПутьКШаре, """") + ""\Repositories\"" + Базы.ИмяИнформационнойБазы + ""\build\epf"" КАК
		|		КаталогСборкиОбработок,
		|	Базы.Владелец КАК Проект,
		|	ЕСТЬNULL(Проекты.КаталогСборкиРелиза, """") КАК КаталогСборкиРелиза,
		|	ЕСТЬNULL(Проекты.СобиратьКонфигурациюВРелиз, ЛОЖЬ) КАК СобиратьКонфигурациюВРелиз,
		|	ЕСТЬNULL(Проекты.ИмяПользователяJenkins, """") КАК ИмяПользователяJenkins,
		|	ЕСТЬNULL(Проекты.ПарольJenkins, """") КАК ПарольJenkins,
		|	ЕСТЬNULL(Проекты.ТокенJenkins, """") КАК ТокенJenkins,
		|	ЕСТЬNULL(Проекты.URLJenkins, """") КАК URLJenkins,
		|	ЕСТЬNULL(Проекты.ИмяJobJenkins, """") КАК ИмяJobJenkins,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Проекты.ТипРепозитория), """") КАК ТипРепозитория,
		|	Базы.ПутьКХранилищу КАК ПутьКХранилищу,
		|	Базы.ПользовательХранилища КАК ПользовательХранилища,
		|	ЕСТЬNULL(Кластеры.СерверПубликации, """") КАК СерверПубликации,
		|	Базы.БазаПубликации КАК БазаПубликации
		|ИЗ
		|	Справочник.Базы КАК Базы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
		|		ПО Базы.Владелец = Проекты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Кластеры КАК Кластеры
		|		ПО Базы.КластерСерверов = Кластеры.Ссылка
		|ГДЕ
		|	Базы.Ссылка = &База";
	
	Запрос.УстановитьПараметр("База", База);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);	
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

Функция БазаТекущегоПользователя(ТекущийПользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Базы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Базы КАК Базы
	|ГДЕ
	|	Базы.Ответственный = &Ответственный";
	
	Запрос.УстановитьПараметр("Ответственный", ?(ТекущийПользователь = Неопределено, ПараметрыСеанса.ТекущийПользователь, ТекущийПользователь));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат ПустаяСсылка();
	
КонецФункции

// Функция - Базы по типу базы
//
// Параметры:
//  ТипБазы	 - ПеречислениеСсылка.ТипыБаз
// 
// Возвращаемое значение:
//   Массив 
//
Функция БазыПоТипуБазы(ТипБазы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Базы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Базы КАК Базы
	               |ГДЕ
	               |	Базы.ТипБазы = &ТипБазы";
	
	Запрос.УстановитьПараметр("ТипБазы", ТипБазы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ЮРЛАгентаБазы(База) Экспорт
	
	//todo - вынести кластер в отдельные справочники
	Кластер = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(База, "КластерСерверов.Наименование, КластерСерверов.ИмяАгентаБазы");
	Возврат СтрШаблон("http://%1/%2/hs/run", Кластер.КластерСерверовНаименование, Кластер.КластерСерверовИмяАгентаБазы);
	
КонецФункции

Функция БазыПоПроекту(Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Базы.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Базы КАК Базы
	               |ГДЕ
	               |	Базы.Владелец = &Проект";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ОбновитьКли(База) Экспорт
	
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	
	КаталогРепозиторияСуществует = РаботаСGit.КаталогРепозиторияСуществует(ПараметрыБазы.КаталогDevopsШара);
	
	Если Не КаталогРепозиторияСуществует Тогда
		РаботаСGit.СоздатьКаталогРепозитория(ПараметрыБазы.РепозиторийБазыШара);
		ПутьКРепозиториюDevCLI = Константы.ПутьКРепозиториюDevCLI.Получить();
		РаботаСGit.КлонироватьРепозиторий(База, ПараметрыБазы.РепозиторийБазы, ПутьКРепозиториюDevCLI);
	Иначе
		РаботаСGit.ОбновитьРепозиторийИзУдаленного(База, ПараметрыБазы.КаталогDevops);
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеЛоговПингаБазы(База) Экспорт
		
	ДанныеЛогов = РаботаСGit.ДанныеЛоговПингаБазы(База);
	Возврат ДанныеЛогов;
		
КонецФункции

Процедура ДобавитьКаталог(База) Экспорт
	
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	РаботаСGit.СоздатьКаталогРепозитория(ПараметрыБазы.КаталогБазыШара);
	РаботаСGit.СоздатьКаталогРепозитория(ПараметрыБазы.ПутьКШаре + "\Логи");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

