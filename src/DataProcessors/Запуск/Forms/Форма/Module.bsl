
&НаКлиенте
Процедура ОсновнаяПапкаНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога); 
	ДиалогОткрытия.Каталог = ОсновнаяПапка;  
	ДиалогОткрытия.Заголовок = "Выберите каталог основной папки проекта"; 
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ВыборКаталога_Завершение", ЭтотОбъект, "" ));
	
	Модифицированность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура ВыборКаталога_Завершение(Результат, Параметр) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОсновнаяПапка = Результат[0];
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьСписокБаз(Команда)
	
	СписокБазДанных.Очистить();
	Если ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		ВременныйКаталог = КаталогДокументов();
		ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "\Documents\", "\AppData\Roaming\1C\1CEStart\");	
	Иначе		 
		ВременныйКаталог = КаталогВременныхФайлов();
		ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "\Local\Temp\", "\Roaming\1C\1CEStart\");	
	КонецЕсли;
	
	
	ИмяФайла = "ibases.v8i";	
	ФайлЗапуска1С = Новый Файл(ВременныйКаталог + ИмяФайла);
	
	Если ФайлЗапуска1С.Существует() Тогда
		
		ТекстовыйДокИзФайла = Новый ТекстовыйДокумент;
		ТекстовыйДокИзФайла.Прочитать(ФайлЗапуска1С.ПолноеИмя);
		
		//Текст = ТекстовыйДокИзФайла.ПолучитьТекст();
		
		СлБаза = Ложь;
		Для НомерСтроки = 1 По ТекстовыйДокИзФайла.КоличествоСтрок() Цикл
			
			СтрокаТекста = ТекстовыйДокИзФайла.ПолучитьСтроку(НомерСтроки);
						
			Если Лев(СтрокаТекста, 1) = "[" Тогда //Это имя в списке
				
				СтруктураБазы = Новый Структура;
				
				СтруктураБазы.Вставить("ИмяБазы", Сред(СтрокаТекста, 2, СтрДлина(СтрокаТекста) - 2));
				
			ИначеЕсли СтрЧислоВхождений(СтрокаТекста, "Connect=File=") > 0 Тогда
				
				Путь = СтрЗаменить(СтрокаТекста, "Connect=File=", "");
				
				Путь = СтрЗаменить(Путь, ";", "");
				Путь = СтрЗаменить(Путь, """", "");
			
				СтруктураБазы.Вставить("ПутьКБазе", Путь);
				
				//Проверяем добавляемую строку
				Если СписокБазДанных.НайтиСтроки(Новый Структура("ИмяБазы", СтруктураБазы.ИмяБазы)).Количество() = 0 Тогда
					СтрокаБазы = СписокБазДанных.Добавить();
			
					ЗаполнитьЗначенияСвойств(СтрокаБазы, СтруктураБазы);
				КонецЕсли;
			ИначеЕсли СтрЧислоВхождений(СтрокаТекста, "Connect=Srvr=") > 0 Тогда 
				Путь = СтрЗаменить(СтрокаТекста, "Connect=Srvr=", "");
				Путь = СтрЗаменить(Путь, "Ref=", "");
				Путь = СтрЗаменить(Путь, """", "");
				
				Пути = СтрРазделить(Путь, ";", Ложь);
				СтруктураБазы.Вставить("Сервер", Пути[0]);
				СтруктураБазы.Вставить("ИмяНаСервере", Пути[1]);
				
				Если СписокБазДанных.НайтиСтроки(Новый Структура("ИмяБазы", СтруктураБазы.ИмяБазы)).Количество() = 0 Тогда
					СтрокаБазы = СписокБазДанных.Добавить();
			
					ЗаполнитьЗначенияСвойств(СтрокаБазы, СтруктураБазы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьПользлователяНаСервере()

	Пользователи.СоздатьАдминистратора();
	НовыйПользователь = Справочники.Пользователи.НайтиПоНаименованию(ИмяПользователя, Истина);
	Если НовыйПользователь.Пустая() Тогда
	    НовыйПользователь = СоздатьАдминистратора();
	КонецЕсли;
	НастройкиПользователя = НастройкаПоВладельцу(НовыйПользователь);
	Если НастройкиПользователя.Пустая() Тогда
		НастройкиПользователяОбъект = Справочники.НастройкиПользователей.СоздатьЭлемент();
		НастройкиПользователяОбъект.Заполнить(Неопределено); //TODO Реализовать автозаполнение настроек по умолчанию
		НастройкиПользователяОбъект.Владелец = НовыйПользователь;
		НастройкиПользователяОбъект.ИмяПользователяGit = ИмяПользователяGit;
		НастройкиПользователяОбъект.ПочтаПользователяGit = ПочтаПользователяGit;
		НастройкиПользователяОбъект.ТокенGit = ТокенGit;
	    НастройкиПользователяОбъект.Проект = Справочники.Проекты.Неопределен;
		НастройкиПользователяОбъект.Записать();
		НастройкиПользователя = НастройкиПользователяОбъект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Функция НастройкаПоВладельцу(Владелец)

	Результат = Справочники.НастройкиПользователей.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПользователей.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Результат = Выборка.Ссылка; 
	КонецЦикла;
	
    Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СоздатьПользлователя(Команда)
	СоздатьПользлователяНаСервере();
	ПоказатьЗначение(, НастройкиПользователя);
КонецПроцедуры

&НаСервере
Процедура СоздатьПроектНаСервере()
	
	Проект = Справочники.Проекты.НайтиПоНаименованию(НазваниеПроекта);
	Если НЕ Проект.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
	ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
	ПроектОбъект.Заполнить(Неопределено); //TODO Реализовать автозаполнение настроек по умолчанию
	ПроектОбъект.Наименование = НазваниеПроекта;
	Если ТипРепозитория = Перечисления.ТипРепозитория.GitHub Тогда
		Авторизация = СтрШаблон("://%1@%2", ИмяПользователяGit, ТокенGit);//TODO Безопасное хранилище паролей
	ИначеЕсли ТипРепозитория = Перечисления.ТипРепозитория.GitLab Тогда
		Авторизация = СтрШаблон("://%1@%2", ИмяПользователяGit, ТокенGit);
	Иначе
		//Не обработанные типы репозиториев
	КонецЕсли;
	ПроектОбъект.PathGitClone = СтрЗаменить(ПутьКGitCloneHTTP, "://", Авторизация);
	ПроектОбъект.КаталогРепозиториевПроекта = ОсновнаяПапка;
	ПроектОбъект.КаталогРепозиториевШара = ОсновнаяПапка;
	ПроектОбъект.КаталогСборкиРелиза = ОсновнаяПапка + "\release";
	ПроектОбъект.ТаскТрекер =ТаскТрекер;
	ПроектОбъект.ТипРепозитория = ТипРепозитория;
	ПроектОбъект.ИДПроектаРепозитория = ИДПроектаРепозитория;
	ПроектОбъект.РежимРаботыКонфигурации = Перечисления.РежимыРаботыКонфигурации.Пакетный;
	ПроектОбъект.Записать();
	Проект = ПроектОбъект.Ссылка;
	НастройкаОбъект = НастройкиПользователя.ПолучитьОбъект();
	НастройкаОбъект.Проект = Проект;
	НастройкаОбъект.Записать();
	
	СоздатьКаталог(ПроектОбъект.КаталогСборкиРелиза);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроект(Команда)
	СоздатьПроектНаСервере();
	ПоказатьЗначение(, Проект);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБазы(Команда)
	
	ВыделенныеСтроки = Элементы.СписокБазДанных.ВыделенныеСтроки;
	МассивБаз = Новый Массив;
	
	Для Каждого СтрокаБазы Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.СписокБазДанных.ДанныеСтроки(СтрокаБазы);
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Сервер) Тогда
			Сообщить("База не серверная созданна не будет" + ДанныеСтроки.ИмяБазы); 
			Продолжить;
		КонецЕсли;
		СтруктураСервернойБазы = СтруктураСервернойБазы();
		ЗаполнитьЗначенияСвойств(СтруктураСервернойБазы, ДанныеСтроки);
		МассивБаз.Добавить(СтруктураСервернойБазы);
	КонецЦикла;
	
	ДобавитьБазыНаСервере(МассивБаз);
	ПоказатьЗначение(, Кластер);
КонецПроцедуры


&НаКлиенте
Функция СтруктураСервернойБазы()
	Возврат Новый Структура("ИмяБазы, Сервер, ИмяНаСервере");	
КонецФункции

&НаСервере
Процедура ДобавитьБазыНаСервере(МассивБаз)
	
	Для Каждого Элемент Из МассивБаз Цикл
		
		Кластер = Справочники.Кластеры.НайтиПоНаименованию(Элемент.Сервер, Истина);
		Если Кластер.Пустая() Тогда
			 КластерОбъект = Справочники.Кластеры.СоздатьЭлемент();
			 КластерОбъект.ИмяАгентаБазы = "GitAgent";
			 КластерОбъект.КаталогRAS = "GitAgent";
			 КластерОбъект.НомерВерсииПлатформы = "8.3"; //TODO 
			 КластерОбъект.ПутьКПапкеДевопс = ОсновнаяПапка;
			 КластерОбъект.ПутьКШаре = ОсновнаяПапка;
			 КластерОбъект.ФайлЗапускаOscript = "";//
			 //КластерОбъект.ФайлЗапускаOscript = "";//Добавить путь к rac
			 КластерОбъект.Наименование = Элемент.Сервер;
			 КластерОбъект.СерверПубликации = Элемент.Сервер;
			 КластерОбъект.Записать();
			 Кластер = КластерОбъект.Ссылка;
		 КонецЕсли;
		 База = Справочники.Базы.НайтиПоНаименованию(Элемент.ИмяНаСервере, Истина);
		 Если База.Пустая() Тогда
			 БазаОбъект = Справочники.Базы.СоздатьЭлемент();
			 БазаОбъект.Владелец = Проект;
			 БазаОбъект.БазаПубликации = Элемент.ИмяНаСервере;
			 БазаОбъект.КластерСерверов = Кластер;
			 БазаОбъект.Наименование = Элемент.ИмяНаСервере;
			 БазаОбъект.ТипБазы = Перечисления.ТипыБаз.ТестоваяБаза;
			 БазаОбъект.Ответственный = НовыйПользователь;
			 БазаОбъект.ИмяИнформационнойБазы = Элемент.ИмяНаСервере;
			 БазаОбъект.ИмяПользователяИнформационнойБазы = "1с";
			 БазаОбъект.ПарольПользователяИнформационнойБазы = "1с";
			 БазаОбъект.Записать();
			 
			 Сообщить("Создана база " + БазаОбъект.Ссылка);
		 КонецЕсли;
	 КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьОскриптНаСервере()

	
	ИмяФайла = ПолучитьИмяВременногоФайла("exe");
	АдресФайла = "https://github.com/oscript-library/ovm/releases/latest/download/ovm.exe";
	НовыеПараметры = КоннекторHTTP.НовыеПараметры();
	НовыеПараметры.Заголовки.Вставить("User-Agent",  
		"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36");
	НовыеПараметры.Таймаут = 90;
	Ответ = КоннекторHTTP.Get(АдресФайла,,НовыеПараметры);
	Данные = КоннекторHTTP.КакДвоичныеДанные(Ответ);
	Данные.Записать(ИмяФайла);
	
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;

	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(СтрШаблон("%1 install dev", ИмяФайла), ПараметрыЗапускаПрограммы);
	ОбщегоНазначения.СообщитьПользователю(Результат.ПотокВывода);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда 
		ОбщегоНазначения.СообщитьПользователю(Результат.ПотокОшибок);
	КонецЕсли;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму(СтрШаблон("%1 use --install dev", ИмяФайла), ПараметрыЗапускаПрограммы);
	ОбщегоНазначения.СообщитьПользователю(Результат.ПотокВывода);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда 
		ОбщегоНазначения.СообщитьПользователю(Результат.ПотокОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОскрипт(Команда)
	УстановитьОскриптНаСервере();
КонецПроцедуры

&НаСервере
Процедура СоздатьРепозиторииКБазамНаСервере()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Базы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Базы КАК Базы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КаталогРепозиторияБазыШара = РаботаСGit.КаталогРепозиторияБазыШара(Выборка.Ссылка);
		КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазы(Выборка.Ссылка);
		Если ПустаяСтрока(КаталогРепозиторияБазыШара) Тогда
			Ошибка = "Ошибка: Не указан каталог репозиториев в проекте!";
			Сообщить(Ошибка);	
			Продолжить;
		КонецЕсли;
		Если Не РаботаСGit.КаталогРепозиторияСуществует(КаталогРепозиторияБазыШара) Тогда
			Если Не РаботаСGit.СоздатьКаталогРепозитория(КаталогРепозиторияБазыШара) Тогда
				Ошибка = СтрШаблон("Ошибка: Не удалось создать каталог репозитория базы: %1", КаталогРепозиторияБазыШара);
				Сообщить(Ошибка);	
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если Не РаботаСGit.ПустойРепозиторий(КаталогРепозиторияБазыШара) Тогда
			Ошибка = СтрШаблон("Ошибка! В каталоге есть файлы: %1%2Перед созданием репозитория каталог должен быть пустым.", КаталогРепозиторияБазы, Символы.ПС);
			Сообщить(Ошибка);	
			Продолжить;
		КонецЕсли;
		
		 РаботаСGit.СоздатьНовыйРепозиторийВГИТ(Выборка.Ссылка, НовыйПользователь);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьРепозиторииКБазам(Команда)
	СоздатьРепозиторииКБазамНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьКЛИНаСервере()
	ПараметрыЗапускаПрограммы = ФайловаяСистема.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокВывода = Истина;
	ПараметрыЗапускаПрограммы.ПолучитьПотокОшибок = Истина;
	
	Результат = ФайловаяСистема.ЗапуститьПрограмму("opm install pivo-cli", ПараметрыЗапускаПрограммы);
	ОбщегоНазначения.СообщитьПользователю(Результат.ПотокВывода);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда 
		ОбщегоНазначения.СообщитьПользователю(Результат.ПотокОшибок);
	КонецЕсли;
	Результат = ФайловаяСистема.ЗапуститьПрограмму("pivo-cli", ПараметрыЗапускаПрограммы);
	ОбщегоНазначения.СообщитьПользователю(Результат.ПотокВывода);
	Если ЗначениеЗаполнено(Результат.ПотокОшибок) Тогда 
		ОбщегоНазначения.СообщитьПользователю(Результат.ПотокОшибок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКЛИ(Команда)
	УстановитьКЛИНаСервере();
КонецПроцедуры


// Используется при обновлении и начальном заполнении информационной базы.
// 1) Создает первого администратора и сопоставляет его с новым или существующим
//    пользователем в справочнике Пользователи.
// 2) Сопоставляет администратора, указанного в параметре ПользовательИБ, с новым или
//    существующим пользователем в справочнике Пользователи.
//
// Параметры:
//  ПользовательИБ - Неопределено - создать первого администратора, если не существует.
//                 - ПользовательИнформационнойБазы - используется, когда нужно сопоставить
//                   существующего администратора с новым или существующим пользователем
//                   в справочнике Пользователи.
//
// Возвращаемое значение:
//  Неопределено                  - первый администратор уже существует.
//  СправочникСсылка.Пользователи - пользователь в справочнике, с которым сопоставлен созданный
//                                  первый администратор или указанный существующий.
//
Функция СоздатьАдминистратора(ПользовательИБ = Неопределено) Экспорт
	
	Если Не ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ТекстОшибки = НСтр("ru = 'Справочник Пользователи недоступен в неразделенном режиме.'");
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Добавление администратора.
	Если ПользовательИБ = Неопределено Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		ПользовательИБ.Имя       = ИмяПользователя;
		ПользовательИБ.ПолноеИмя = ПользовательИБ.Имя;
		ПользовательИБ.Роли.Очистить();
		ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
		Если НЕ ПользовательИБ.Роли.Содержит(РольАдминистратораСистемы) Тогда
			ПользовательИБ.Роли.Добавить(РольАдминистратораСистемы);
		КонецЕсли;
		ПользовательИБ.Записать();
	Иначе
		Если Не ПользователиСлужебный.РолиАдминистратораДоступны(ПользовательИБ) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно создать пользователя в справочнике для пользователя
				           |информационной базы ""%1"",
				           |так как у него нет ролей Полные права и Администратор системы.
				           |
				           |Вероятно, пользователь был создан в конфигураторе.
				           |Для автоматического создания пользователя в справочнике требуется
				           |назначить ему роли Полные права и Администратор системы.'"),
				Строка(ПользовательИБ));
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено, ПользовательИБ.УникальныйИдентификатор);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ВнешниеПользователи");
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Пользователи");
		ЭлементБлокировки.УстановитьЗначение("Наименование", ПользовательИБ.ПолноеИмя);
		Блокировка.Заблокировать();
		
		Пользователь = Неопределено;
		ПользователиСлужебный.ПользовательПоИдентификаторуСуществует(ПользовательИБ.УникальныйИдентификатор,, Пользователь);
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			ВнешнийПользовательОбъект = Пользователь.ПолучитьОбъект();
			ВнешнийПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВнешнийПользовательОбъект);
			Пользователь = Неопределено;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ПользовательИБ.ПолноеИмя);
			
			Если ЗначениеЗаполнено(Пользователь)
			   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
			   И Пользователь.ИдентификаторПользователяИБ <> ПользовательИБ.УникальныйИдентификатор
			   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
			         Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
				
				Пользователь = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Пользователь = Справочники.Пользователи.СоздатьЭлемент();
			ПользовательСоздан = Истина;
		Иначе
			Пользователь = Пользователь.ПолучитьОбъект();
			ПользовательСоздан = Ложь;
		КонецЕсли;
		
		Пользователь.Наименование = ПользовательИБ.ПолноеИмя;
		
		ОписаниеПользователяИБ = Новый Структура;
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Вставить("УникальныйИдентификатор", ПользовательИБ.УникальныйИдентификатор);
		Пользователь.Записать();
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	Возврат Пользователь.Ссылка;
	
КонецФункции



