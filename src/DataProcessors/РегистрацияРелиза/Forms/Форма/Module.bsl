
&НаСервере
Процедура ПолучитьПоследниеСлиянияНаСервере()
	
	ИДПроекта = Проект.ИДПроектаGitLab;
	URLGitLab = Проект.URLGitLab;
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("target_branch", "main");
	ПараметрыЗапроса.Вставить("order_by", "updated_at");
	ПараметрыЗапроса.Вставить("sort", "desc");
	ПараметрыЗапроса.Вставить("per_page", 60);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("PRIVATE-TOKEN", НастройкиПользователя.ТокенGitLab);
	Заголовки.Вставить("content-type", "application/json");

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПроверятьSSL" , Ложь);	
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	ЮрлПоискМерджРеквестов = СтрШаблон("%1/api/v4/projects/%2/merge_requests", URLGitLab, ИДПроекта);

	МерджРеквесты = КоннекторHTTP.GetJson(ЮрлПоискМерджРеквестов, ПараметрыЗапроса, ДополнительныеПараметры);
	ЗаполнитьТаблицуСлияний(МерджРеквесты);
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуСлияний(МерджРеквесты)
	
	Для Каждого Элемент Из МерджРеквесты Цикл
		НоваяСтрока = ТаблицаСлияний.Добавить(); 
		НоваяСтрока.Номер = Элемент["iid"];
		НоваяСтрока.Название = Элемент["title"];
		НоваяСтрока.URL = Элемент["web_url"];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПоследниеСлияния(Команда)
	Если ПроверитьЗаполнение() Тогда
		ПолучитьПоследниеСлиянияНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСлиянийПриАктивизацииСтроки(Элемент)
	
	ИзмененыеОбъекты.Очистить();
	ТекущийМерджДанные = Элементы.ТаблицаСлияний.ТекущиеДанные;
	НомераМерджРеквестов.Очистить();
	
	Если ТекущийМерджДанные <> Неопределено Тогда
		НомераМерджРеквестов = НомераВыделенныхМерджРеквестов();
		ИзмененыеОбъекты.Очистить();
		ПодключитьОбработчикОжидания("ЗаполнитьСписокИзмененыхОбъектов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НомераВыделенныхМерджРеквестов()
	
	ВыделенныеСтроки = Элементы.ТаблицаСлияний.ВыделенныеСтроки;
	
	Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
		СтрокаМерджРеквеста = Элементы.ТаблицаСлияний.ДанныеСтроки(ИндексСтроки);
		НомераМерджРеквестов.Добавить(СтрокаМерджРеквеста.Номер, СтрокаМерджРеквеста.Номер);
	КонецЦикла;

	Возврат НомераМерджРеквестов;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокИзмененыхОбъектов() Экспорт
		
	Для Каждого НомерМерджРеквеста Из НомераМерджРеквестов Цикл
		ЗаполнитьСписокИзмененыхОбъектовНаСервере(НомерМерджРеквеста.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИзмененыхОбъектовНаСервере(НомерМерджРеквеста)
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	НастройкиПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "URLGitLab, ИДПроектаGitLab");
	
	СписокКоммитов = РаботаСGitLab.СписокКоммитовПоМерджРеквесту(НастройкиПроекта.URLGitLab,
		НастройкиПроекта.ИДПроектаGitLab,
		НомерМерджРеквеста,
		НастройкиПользователя.ТокенGitLab
	);
	
	ТаблицаИзмененныхОбъектов = РаботаСGitLab.ИзмененияПоКоммиту(НастройкиПроекта.URLGitLab,
		НастройкиПроекта.ИДПроектаGitLab,
		НомерМерджРеквеста,
		НастройкиПользователя.ТокенGitLab,
		СписокКоммитов
	);
	
	Для Каждого СтрокаТаблицыЗначенийИзмененныеОбъекты Из ТаблицаИзмененныхОбъектов Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицыЗначенийИзмененныеОбъекты.ТипОбъекта) Тогда
			Продолжить;	
		КонецЕсли;	
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Объект", СтрокаТаблицыЗначенийИзмененныеОбъекты.Объект);
		
		СтрокиИзмененныеОбъекты = ИзмененыеОбъекты.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиИзмененныеОбъекты.Количество() = 0 Тогда
			СтрокаИзмененныеОбъекты = ИзмененыеОбъекты.Добавить();
		Иначе
			СтрокаИзмененныеОбъекты = СтрокиИзмененныеОбъекты[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаИзмененныеОбъекты, СтрокаТаблицыЗначенийИзмененныеОбъекты,, "ИнформацияОВерсии");
		Если ПустаяСтрока(СтрокаИзмененныеОбъекты.ИнформацияОВерсии) Тогда
			ИнформацияОВерсии = Новый Соответствие;
		Иначе
			ИнформацияОВерсии = ОбщегоНазначения.JSONВЗначение(СтрокаИзмененныеОбъекты.ИнформацияОВерсии);
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(ИнформацияОВерсии, 
			СтрокаТаблицыЗначенийИзмененныеОбъекты.ИнформацияОВерсии, Истина
		);
		
		СтрокаИзмененныеОбъекты.ИнформацияОВерсии = ОбщегоНазначения.ЗначениеВJSON(ИнформацияОВерсии); 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументРелизаНаСервере(ТекстНомерРелиза)

	ДанныеКРелизу = ДанныеКРелизу();
	ДанныеКРелизу.Вставить("Проект", Проект);
	ДанныеКРелизу.Вставить("НомерРелиза", ТекстНомерРелиза);
	ДанныеКРелизу.Вставить("Дата", ТекущаяДатаСеанса());

	Возврат Документы.Релиз.СоздатьДокументРелиза(ДанныеКРелизу);
	
КонецФункции


&НаСервере
Функция ДанныеКРелизу()

	ДанныеКРелизу = Новый Структура;
	ОбъектыРазработки = НовыйОбъектыРазработки();
	
	Для Каждого Элемент Из ИзмененыеОбъекты Цикл
		Если ПустаяСтрока(Элемент.ТипОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Элемент.ТипОбъекта = "ВнешняяОбработка" Тогда
			ИмяВнешнейОбработки = СтрЗаменить(Элемент.Объект, "Внешние обработки.", "");
			ОбъектыРазработкиСсылка = Справочники.ОбъектыРазработки.НайтиПоНаименованию(ИмяВнешнейОбработки, Истина,, Проект);
			НоваяСтрока = ОбъектыРазработки.Добавить();
			НоваяСтрока.Название = ИмяВнешнейОбработки; 
			НоваяСтрока.ОбъектРазработки = ОбъектыРазработкиСсылка; 
			НоваяСтрока.ИнформацияОВерсии = Элемент.ИнформацияОВерсии;
		Иначе
			ДанныеКРелизу.Вставить(Элемент.ТипОбъекта, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбъектыРазработки.Количество() Тогда
		ДанныеКРелизу.Вставить("ОбъектыРазработки", ОбъектыРазработки);
	КонецЕсли;

	Возврат ДанныеКРелизу;
	
КонецФункции

Функция НовыйОбъектыРазработки()

	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("ОбъектРазработки", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРазработки"));
	ТаблицаОбъектов.Колонки.Добавить("Название");
	ТаблицаОбъектов.Колонки.Добавить("ВерсияОбъектаРазработки");
	ТаблицаОбъектов.Колонки.Добавить("ИнформацияОВерсии");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции

&НаКлиенте
Асинх Процедура ЗарегистрироватьНовыйРелиз(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Документ = СоздатьДокументРелизаНаСервере(НомерРелиза);
	Обещание = ОткрытьЗначениеАсинх(Документ);
	//Результат = Ждать Обещание; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаСлияниеИзДевелопаВМейн(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;

	СоздатьЗаявкуНаСлияниеИзДевелопаВМейнНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаявкуНаСлияниеИзДевелопаВМейнНаСервере()
	
	НастройкиПроекта = Справочники.Проекты.НастройкиПроекта(Проект);
	
	ДанныеМерджРеквеста = РаботаСGitLab.НовыйДанныеМерджРеквеста();
	
	ДанныеМерджРеквеста.id = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проект, "ИДПроектаGitLab");
	ДанныеМерджРеквеста.source_branch = "develop";
	ДанныеМерджРеквеста.target_branch = "main";
	ДанныеМерджРеквеста.title = НомерРелиза;
	ДанныеМерджРеквеста.description = НомерРелиза;
	
	РаботаСGitLab.СоздатьМерджРеквест(НастройкиПроекта.URLGitLab,
		НастройкиПроекта.ИДПроектаGitLab,
		ОбщегоНазначенияУправлениеРазработкой.ЗначениеПоКлючу("TokenConnectionGitLab"),
		ДанныеМерджРеквеста
	);	
	
КонецПроцедуры
