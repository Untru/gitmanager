// @strict-types

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьДанными();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьНастройкиОформления()

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанными()
	ЗаполнитьДаннымиНаСервере();
	ПоказатьТаблицу = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиНаСервере()

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗагрузитьДанные();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстЗначения(Текст, ДатаНачала, ДатаОкончания)
	Текст = Формат(ДатаНачала, "ДЛФ=DDT") + " - " + Формат(ДатаОкончания, "ДЛФ=DDT");	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоДней(КоличествоЧасов)

	Возврат КоличествоЧасов / 8;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДатаНачала(КоличествоДней, КрайняяДата)
	
	Возврат КрайняяДата - (КоличествоДней * 86400);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйБиблиотекаКартинок()

	КартинкиКоллекция = Новый Соответствие;
	КартинкиКоллекция.Вставить(1, БиблиотекаКартинок.GitLab16);
	КартинкиКоллекция.Вставить(2, БиблиотекаКартинок.Allure);
	КартинкиКоллекция.Вставить(3, БиблиотекаКартинок.jenkins);
	КартинкиКоллекция.Вставить(4, БиблиотекаКартинок.ПереместитьВниз);
	КартинкиКоллекция.Вставить(5, БиблиотекаКартинок.Skype);
	КартинкиКоллекция.Вставить(6, БиблиотекаКартинок.GoogleMaps);
	КартинкиКоллекция.Вставить(7, БиблиотекаКартинок.БыстрыйДоступ);
	КартинкиКоллекция.Вставить(8, БиблиотекаКартинок.БыстрыйДоступДобавить);	
	Возврат КартинкиКоллекция;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РандомнаяКартинка()
	
	КартинкиКоллекция = НовыйБиблиотекаКартинок();
	Генератор = Новый ГенераторСлучайныхЧисел(ТекущаяУниверсальнаяДатаВМиллисекундах());
	СгенерированноеЧисло = Генератор.СлучайноеЧисло(1, КартинкиКоллекция.Количество());
	Возврат КартинкиКоллекция[СгенерированноеЧисло];
	
КонецФункции

&НаСервере
Процедура ОбновитьПланировщикНаСервере()
	
	ОбновитьИзмеренияПланировщика();
	ОбновитьЭлементыПланировщика();
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланировщик(Команда)
	
	ОбновитьПланировщикНаСервере();
	ТекущийЭлемент = Элементы.Планировщик;
	ПоказатьТаблицу = Ложь;

КонецПроцедуры

&НаСервере
Процедура ОбновитьИзмеренияПланировщика()	
	
	ШрифтЗаголовка = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина);
	
	ИзмеренияПланировщика = Планировщик.Измерения;
	ИзмеренияПланировщика.Очистить();
	ИзмерениеСпринты = ИзмеренияПланировщика.Добавить("ИзмерениеСпринты");

	Цвет = Новый Цвет(255, 255, 255);
	
	Для Каждого Спринт Из Объект.Спринты Цикл
		НовоеСостояние = ИзмерениеСпринты.Элементы.Добавить(Спринт.Значение);
		НовоеСостояние.ЦветТекста = Цвет;
		НовоеСостояние.Шрифт = ШрифтЗаголовка;
		НовоеСостояние.Текст = "";
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЦветаЭлементовСостояния(Индекс)
	
	Результат = Новый Структура;
	
	Если Индекс = 0 Тогда
		Результат.Вставить("ЦветПанели", Новый Цвет(128, 192, 115));
		Результат.Вставить("ЦветЭлемента", Новый Цвет(185, 220, 168));
	ИначеЕсли Индекс = 2 Тогда
		Результат.Вставить("ЦветПанели", Новый Цвет(230, 192, 170));
		Результат.Вставить("ЦветЭлемента", Новый Цвет(243, 224, 213));
	ИначеЕсли Индекс = 3 Тогда
		Результат.Вставить("ЦветПанели", Новый Цвет(182, 218, 218));
		Результат.Вставить("ЦветЭлемента", Новый Цвет(214, 241, 241));
	ИначеЕсли Индекс = 1 Тогда
		Результат.Вставить("ЦветПанели", Новый Цвет(173, 194, 224));
		Результат.Вставить("ЦветЭлемента", Новый Цвет(214, 225, 240));
	Иначе
		Результат.Вставить("ЦветПанели", Новый Цвет(192, 115, 115));
		Результат.Вставить("ЦветЭлемента", Новый Цвет(220, 168, 168));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
 Процедура ОбновитьЭлементыПланировщика(Операция = "Создание", НаправлениеПрокрутки = Неопределено)
	
	ТекущийЭкранКанбан = 0;
	ШиринаКарточкиКанбан = 3;
	ШиринаПанелейКанбан = 1;
	КоличествоОтображаемыхЭлементовКанбан = 12;
	НачалоОтображенияКанбан = НачалоДня(ТекущаяДатаСеанса());
	КонецОтображенияКанбан = НачалоОтображенияКанбан 
		+ КоличествоОтображаемыхЭлементовКанбан * ШиринаКарточкиКанбан 
		+ ШиринаПанелейКанбан;
	МаксимальныйЭлементКанбан = НачалоОтображенияКанбан;
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(НачалоОтображенияКанбан, КонецОтображенияКанбан);
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	КоличествоСостоянийБезОтображаемыхЭлементов = 0;
	Индекс = 0;
	Для Каждого Состояние Из Планировщик.Измерения[0].Элементы Цикл

		ЦветаЭлементовСостояния = ЦветаЭлементовСостояния(Индекс);
		ЦветПоИсполнителю = РазныеЦветаИсполнителей(ЦветаЭлементовСостояния.ЦветПанели);
		Индекс = Индекс + 1;
		
		// Панель в начало
		ДобавитьЭлементВКанбан(НачалоОтображенияКанбан,
			НачалоОтображенияКанбан + 1,
			Строка(Состояние.Значение),
			Справочники.Задачи.ПустаяСсылка(),
			Состояние,
			ЦветаЭлементовСостояния.ЦветПанели,
			БиблиотекаКартинок.GitLab16);
			
		Строка = ПервыйПоследнийЭлементКанбан.НайтиСтроки(Новый Структура("Состояние", Состояние.Значение));
		Если Строка.Количество() = 0 Тогда
			НоваяСтрока = ПервыйПоследнийЭлементКанбан.Добавить();
			НоваяСтрока.Состояние = Состояние.Значение;
			Строка.Добавить(НоваяСтрока);
		КонецЕсли;
		
		Если Операция = "Создание" ИЛИ ТекущийЭкранКанбан = 0 Тогда
			Строка[0].ПорядокПервогоЭлемента = 0;
			ТекущийЭкранКанбан = 0;
		КонецЕсли;
		
		ИндексСтроки = 0;
		ЗадачиПоСпринтамНайденные = Объект.Задачи.НайтиСтроки(Новый структура("Спринт", Состояние.Значение.Ссылка));
		ЧасовВЗадачах = 0;
		ПервыйЭлемент = Порядок * 4;
		ПоследнийЭлемент = 11 + Порядок * 4;
		НомерЭлемента = 0;
		Для Каждого НайденнаяЗадача Из ЗадачиПоСпринтамНайденные Цикл
			ЧасовВЗадачах = ЧасовВЗадачах + НайденнаяЗадача.ПлановоеВремя;
			Если НайденнаяЗадача.Порядок < ПервыйЭлемент Тогда
				Продолжить;
			КонецЕсли;
			Если НайденнаяЗадача.Порядок > ПоследнийЭлемент Тогда
				Прервать;
			КонецЕсли;
			НомерЭлемента = НомерЭлемента + 1;
			Если НомерЭлемента > 11 Тогда
				Прервать;
			КонецЕсли;
			
			НачалоЭлемента = НачалоОтображенияКанбан + ШиринаПанелейКанбан + ИндексСтроки;
			КонецЭлемента = НачалоЭлемента + ШиринаКарточкиКанбан;
			Если ИндексСтроки = 0 Тогда
				Строка[0].ПорядокПервогоЭлемента = ИндексСтроки;
			Иначе
				Строка[0].ПорядокПоследнегоЭлемента = ИндексСтроки;
				Строка[0].КонецОтображенияПоследнего = КонецЭлемента;
			КонецЕсли;
			
			НачалоЭлемента = НачалоОтображенияКанбан + ШиринаПанелейКанбан + ИндексСтроки;
			КонецЭлемента = НачалоЭлемента + ШиринаКарточкиКанбан;
			Если ИндексСтроки = 0 Тогда
				Строка[0].ПорядокПервогоЭлемента = ИндексСтроки;
			Иначе
				Строка[0].ПорядокПоследнегоЭлемента = ИндексСтроки;
				Строка[0].КонецОтображенияПоследнего = КонецЭлемента;
			КонецЕсли;
			ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НайденнаяЗадача.Задача, 
				"НомерЗадачиБазовой, 
				|НомерЗадачи, 
				|ТипБазовойЗадачи"
			);
			ТекстЗадачи = Лев(СтрЗаменить(НайденнаяЗадача.Задача, "Разработка: ", ""), 30);
			ТекстЗадачи = ТекстЗадачи(ТекстЗадачи, НайденнаяЗадача, ДанныеЗадачи);

			ДобавитьЭлементВКанбан(
				НачалоЭлемента,
				КонецЭлемента,
				ТекстЗадачи,
				НайденнаяЗадача.Задача,
				Состояние,
				ЦветаЭлементовСостояния.ЦветЭлемента,
			);
			
			Если КонецЭлемента > МаксимальныйЭлементКанбан Тогда
				МаксимальныйЭлементКанбан = КонецЭлемента;
			КонецЕсли;
			ИндексСтроки = ИндексСтроки + ШиринаКарточкиКанбан;
		КонецЦикла;
		
		ТекстИтог = СтрШаблон("Всего задач %1
		|План: %2 
		|Еще нужно %3",ЗадачиПоСпринтамНайденные.Количество(), ЧасовВСпринте, ЧасовВСпринте - ЧасовВЗадачах);
		
		// Панель в конец
		ДобавитьЭлементВКанбан(КонецОтображенияКанбан -2.5,
			КонецОтображенияКанбан,
			ТекстИтог,
			Справочники.Задачи.ПустаяСсылка(),
			Состояние, 
			ЦветаЭлементовСостояния.ЦветПанели,
			РандомнаяКартинка());
			
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВКанбан(Начало, Конец, Текст, Значение, Состояние, ЦветЭлемента, Картинка = Неопределено)
	
	СоответствиеЗначений = Новый Соответствие;
	СоответствиеЗначений.Вставить("ИзмерениеСпринты",Состояние.Значение);
	
	НовыйЭлемент = Планировщик.Элементы.Добавить(Начало, Конец);
	НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
	НовыйЭлемент.Текст = Текст;
	НовыйЭлемент.ЦветФона = ЦветЭлемента;
	НовыйЭлемент.ЦветТекста = Новый Цвет(0,0,0);
	НовыйЭлемент.Шрифт = Новый Шрифт("Times New Roman", 8); //ШрифтыСтиля.МелкийШрифтТекста;
	НовыйЭлемент.Значение = Значение;
	
	Если Картинка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйЭлемент.Картинка = Картинка;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	Элементы.Планировщик.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если Планировщик.ТекущиеПериодыОтображения[0].Конец < ТекущиеПериодыОтображения[0].Начало Тогда
		//Движение вниз
		Порядок = Порядок + 1;
	Иначе
		//Движение вверх
		Порядок = Макс(Порядок - 1, 0);
	КонецЕсли;
	ОбновитьЭлементыПланировщика("Перемещение");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсортироватьЗадачиНаКлиенте()
	Объект.Задачи.Сортировать("Спринт УБЫВ, Ответственный, ПорядокСортировки, ДатаСоздания");

	ТекущийСпринт = Неопределено;
	Для Каждого СтрокаЗадачи Из Объект.Задачи Цикл
		Если СтрокаЗадачи.Спринт <> ТекущийСпринт Тогда
			Индекс = 0;
			ТекущийСпринт = СтрокаЗадачи.Спринт;
		КонецЕсли;
		Индекс = Индекс + 1;
		СтрокаЗадачи.Порядок = Индекс;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтсортироватьЗадачи()
	Объект.Задачи.Сортировать("Спринт УБЫВ, Ответственный, ПорядокСортировки, ДатаСоздания");
	
	ТекущийСпринт = Неопределено;
	Для Каждого СтрокаЗадачи Из Объект.Задачи Цикл
		Если СтрокаЗадачи.Спринт <> ТекущийСпринт Тогда
			Индекс = 0;
			ТекущийСпринт = СтрокаЗадачи.Спринт;
		КонецЕсли;
		Индекс = Индекс + 1;
		СтрокаЗадачи.Порядок = Индекс;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПланировщикПриОкончанииРедактированияНаСервере()
	ОбновитьПланировщикНаСервере();
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)

	ВыделенныеЭлементы = Элемент.ВыделенныеЭлементы;

	СписокЗадач = Новый Массив;
	Для каждого ВыделенныйЭлемент Из ВыделенныеЭлементы Цикл
		Если ЗначениеЗаполнено(ВыделенныйЭлемент.Значение) Тогда
			СписокЗадач.Добавить(ВыделенныйЭлемент.Значение);
		КонецЕсли;
	КонецЦикла;
	НовыйСпринт = ВыделенныеЭлементы[0].ЗначенияИзмерений["ИзмерениеСпринты"];
	ИзменитьСпринтУЗадач(СписокЗадач, НовыйСпринт);
	ОтсортироватьЗадачиНаКлиенте();
	ПланировщикПриОкончанииРедактированияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент)
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("ПланировщикПослеАктивизации", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ИзменитьСпринтУЗадач(СписокЗадач, НовыйСпринт)
	
	Для Каждого Задача Из СписокЗадач Цикл
		
		СтрокаЗадачи = Объект.Задачи.НайтиСтроки(Новый Структура("Задача", Задача));
		СтрокаЗадачи[0].Спринт = НовыйСпринт;
		СтрокаЗадачи[0].ДатаНачала = НовыйСпринт.ДатаНачала;
		СтрокаЗадачи[0].ДатаОкончания = НовыйСпринт.ДатаОкончания;
		СтрокаЗадачи[0].ЗадачаИзменена = Истина;
		Если Не Задача.НеИзменятьКрайнийСрок Тогда
			СтрокаЗадачи[0].КрайнийСрок = НачалоНедели(СтрокаЗадачи[0].ДатаОкончания) + 60*60*24*4;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуТекущегоЭлементаПланировщика();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента) И ТипЗнч(ЗначениеЭлемента) = Тип("СправочникСсылка.Задачи") Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента);
		ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПослеАктивизации() Экспорт
	Если Элементы.Планировщик.ВыделенныеЭлементы = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Задача = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	Спринт = Элементы.Планировщик.ВыделенныеЭлементы[0].ЗначенияИзмерений["ИзмерениеСпринты"];
	Элементы.ГруппаСпринта.Заголовок = Строка(Спринт);
	Если ЗначениеЗаполнено(Задача) И ТипЗнч(Задача) = Тип("СправочникСсылка.Задачи") Тогда
		ПланировщикПриАктивизацииНаСервере(Задача, Спринт);
	КонецЕсли;
	ИзменяемыеДанныеЗадачи(Задача);
КонецПроцедуры

&НаСервере
Процедура ПланировщикПриАктивизацииНаСервере(Задача, Спринт) Экспорт

	ДанныеПоСпринту = ДанныеПоСпринту(Спринт);
	ДанныеПоЗадаче = ДанныеПоЗадаче(Задача);
	
	СформироватьДиаграмму(ЗадачиПоОтветственным, ТипДиаграммы.Гистограмма, 
		КоличествоЧасовПоОтветственнымДляДиаграммы(ДанныеПоСпринту)
	);
	ТекстПоОтветственным = "";
	Для Каждого СтрокаДанных Из ДанныеПоСпринту.ДанныеПоОтветственным Цикл
		ТекстПоОтветственным = СтрШаблон("%1%2: %3%4", ТекстПоОтветственным, 
			СтрокаДанных.Ответственный, СтрокаДанных.ПлановоеВремя, Символы.ПС
		);
	КонецЦикла;
	
	Элементы.ДекорацияОтветственные.Заголовок = ТекстПоОтветственным;
	ВсегоЗадач = ДанныеПоСпринту.ВсегоЗадач;
	ВсегоЗатраченноеВремя = ДанныеПоСпринту.ВсегоЗатраченноеВремя;
	ВсегоПлановоеВремя = ДанныеПоСпринту.ВсегоПлановоеВремя;
	ОписаниеЗадачи = ДанныеПоЗадаче.ПодробноеОписание;
	
КонецПроцедуры

&НаСервере
Функция КоличествоЧасовПоОтветственнымДляДиаграммы(ДанныеПоСпринту)
	
	ТаблицаДляДиаграммы = НовыйТаблицаДляДиаграммы();
	Для Каждого СтрокаДанных Из ДанныеПоСпринту.ДанныеПоОтветственным Цикл
		НоваяСтрока = ТаблицаДляДиаграммы.Добавить();
		НоваяСтрока.Значение = СтрокаДанных.ПлановоеВремя;
		НоваяСтрока.Серия = СтрокаДанных.Ответственный;
	КонецЦикла;
	Возврат ТаблицаДляДиаграммы;
	
КонецФункции

&НаСервере
Функция НовыйТаблицаДляДиаграммы()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Значение");
	Результат.Колонки.Добавить("Серия");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, ЗначенияИзмерений, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуПриИзменении(Элемент)
	
	Если ПоказатьТаблицу Тогда
		ТекущаяСтраница = Элементы.СтраницаТаблица;
		ЗадачиПриАктивизацииСтроки(Элемент);
	Иначе
		ТекущаяСтраница = Элементы.СтраницаПланировщик;
		ПланировщикПриАктивизации(Элемент);
	КонецЕсли;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("СправочникСсылка.Пользователи"));
	Элемент.ОграничениеТипа = Новый ОписаниеТипов(Типы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	ЗаполнитьДаннымиНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоЧасамНаСервере()

	СпринтРаспределения = Неопределено;
	СпринтНеразобранно = Справочники.Спринты.СпринтНеразобранно();
	
	Для Каждого Задача Из Объект.Задачи Цикл
		Если Задача.НеИзменятьКрайнийСрок Тогда
			Продолжить;
		КонецЕсли;
		Если СпринтРаспределения <> Задача.Спринт Тогда
			КрайняяДатаОтветственного = Новый Соответствие;
			СпринтРаспределения = Задача.Спринт;
		КонецЕсли;
		Если СпринтРаспределения = СпринтНеразобранно Тогда
			Прервать;
		КонецЕсли;
		КоличествоЧасов = Задача.ПлановоеВремя - Задача.ЗатраченноеВремя;
		Если КоличествоЧасов = 0 Тогда
			Продолжить;
		КонецЕсли;
		КрайняяДата = КрайняяДатаОтветственного[Задача.Ответственный];
		Если КрайняяДата = Неопределено Тогда
			ДатаОтсчета = Задача.ДатаНачала + 60 * 60 * 10;
		Иначе
			ДатаОтсчета =  КрайняяДатаОтветственного[Задача.Ответственный];
		КонецЕсли;
		КрайнийСрок = РассчитатьКрайнийСрокПоГрафику(ДатаОтсчета, КоличествоЧасов);
		Задача.КрайнийСрок = КрайнийСрок;
		КрайняяДатаОтветственного.Вставить(Задача.Ответственный, КрайнийСрок);
		
		Задача.ЗадачаИзменена = Истина;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ДобавитьРабочиеДни(Дата, КоличествоДней)
	РассчитаннаяДата = Неопределено;
	ИспользуемыеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
	Если ИспользуемыеКалендари.Количество() > 0 Тогда
		РассчитаннаяДата = КалендарныеГрафики.ДатаПоКалендарю(ИспользуемыеКалендари[0], Дата, КоличествоДней, Ложь);
	КонецЕсли;
	Если РассчитаннаяДата = Неопределено Тогда
		РассчитаннаяДата = Дата;
		Счетчик = 0;
		Пока Счетчик < КоличествоДней Цикл
			РассчитаннаяДата = РассчитаннаяДата + 24 * 60 * 60; // Переход на следующий день
			Если ДеньНедели(РассчитаннаяДата) <> 6 И ДеньНедели(РассчитаннаяДата) <> 7 Тогда // Пропускаем субботу и воскресенье
				Счетчик = Счетчик + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат РассчитаннаяДата;
КонецФункции

&НаСервере
Функция РассчитатьКрайнийСрокПоГрафику(ДатаНачала, Знач КоличествоЧасов)
	
	КрайнийСрок = ДатаНачала;
	РабочийЧасовВДень = 8;
	КоличествоЧасов = Макс(КоличествоЧасов, 0);
	ЧасовВЭтомДне = 18 - Час(КрайнийСрок);
	КоличествоЧасов = КоличествоЧасов - ЧасовВЭтомДне;
	Если КоличествоЧасов > 0 Тогда

		ПолныеРабочиеДни = Цел(КоличествоЧасов / РабочийЧасовВДень);
		Если ПолныеРабочиеДни > 0 Тогда
			КрайнийСрок = ДобавитьРабочиеДни(ДатаНачала, ПолныеРабочиеДни);
			КрайнийСрок = КрайнийСрок + 60 * 60 * 18;
		КонецЕсли;
		ОстатокЧасов = КоличествоЧасов - ПолныеРабочиеДни * РабочийЧасовВДень;
		Если ОстатокЧасов > 0 Тогда
			КрайнийСрок = НачалоДня(КрайнийСрок) + 60 * 60 * (34 + ОстатокЧасов); //24 часа и 10 время старта работы
		КонецЕсли;

	КонецЕсли;	
	
	
	//
	//
	//	Если ОстатокЧасов > ЧасовВЭтомДне Тогда
	//		ОстатокЧасов = ОстатокЧасов - ЧасовВЭтомДне;
	//	КонецЕсли;
	//	КрайнийСрок = КрайнийСрок + ОстатокЧасов * 60 * 60; // Добавляем часы в секундах 
	//ИначеЕсли ОстатокЧасов = 0 Тогда
	//	КрайнийСрок = НачалоДня(КрайнийСрок) + 60 * 60 * 10;; //24 часа и 10 время старта работы
	//КонецЕсли;
	//
	Возврат КрайнийСрок;
	
КонецФункции

&НаКлиенте
Процедура РаспределитьПоЧасам(Команда)
	РаспределитьПоЧасамНаСервере();
	ОтсортироватьЗадачиНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗадачиВБитрикс(Команда)
	ОбновитьЗадачиВБитриксНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗадачиВБитриксНаСервере()
	Для Каждого СтрокаЗадача Из Объект.Задачи Цикл
		Если СтрокаЗадача.ЗадачаИзменена Тогда
			ЗадачаОбъект = СтрокаЗадача.Задача.ПолучитьОбъект();
			ЗадачаОбъект.Спринт = СтрокаЗадача.Спринт;
			НайденнаяСтрока = ЗадачаОбъект.Спринты.Найти(СтрокаЗадача.Спринт, "Спринт");
			Если НайденнаяСтрока = Неопределено Тогда
				НоваяСтрока = ЗадачаОбъект.Спринты.Добавить();
				НоваяСтрока.Спринт = ЗадачаОбъект.Спринт;
			КонецЕсли;
			ЗадачаОбъект.Ответственный = СтрокаЗадача.Ответственный;
			ЗадачаОбъект.ПлановоеВремя = СтрокаЗадача.ПлановоеВремя*60;
			Если Не ЗадачаОбъект.НеИзменятьКрайнийСрок Тогда
				ЗадачаОбъект.КрайнийСрок = СтрокаЗадача.КрайнийСрок;
			КонецЕсли;
			Если Не ЗадачаОбъект.ПроверитьЗаполнение() Тогда
				
				Сообщить(НСтр(СтрШаблон("ru='Не удалось записать задачу %1'",
					ЗадачаОбъект.НомерЗадачи))  
				);
			КонецЕсли;
			ЗадачаОбъект.Записать();
			РаботаСBitrix.ИзменитьУЗадачиКонтрольныйСрокИСРМ(СтрокаЗадача.Задача);
			РаботаСBitrix.ДобавитьСпринтВБазовуюЗадачу(СтрокаЗадача.Задача);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ДанныеПоСпринту(Спринт)
	
	Результат = Новый Структура;
	Результат.Вставить("ВсегоЗадач", 0);
	Результат.Вставить("ВсегоЗатраченноеВремя", 0);
	Результат.Вставить("ВсегоПлановоеВремя", 0);
	Результат.Вставить("ДанныеПоОтветственным", Новый ТаблицаЗначений);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Спринт", Спринт);
	ТаблицаСпринта = Объект.Задачи.Выгрузить(ПараметрыОтбора);
	
	ВсегоЗадач = ТаблицаСпринта.Количество();
	ВсегоЗатраченноеВремя = ТаблицаСпринта.Итог("ЗатраченноеВремя");
	ВсегоПлановоеВремя = ТаблицаСпринта.Итог("ПлановоеВремя");
	ТаблицаСпринта.Свернуть("Ответственный", "ЗатраченноеВремя, ПлановоеВремя");
	Результат.ВсегоЗадач = ВсегоЗадач;
	Результат.ВсегоЗатраченноеВремя = ВсегоЗатраченноеВремя;
	Результат.ВсегоПлановоеВремя = ВсегоПлановоеВремя;
	Результат.ДанныеПоОтветственным = ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаСпринта);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеПоЗадаче(Задача)
	
	Результат = Новый Структура;
	Результат.Вставить("ПодробноеОписание", Задача.ПодробноеОписание);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьДиаграмму(РеквизитДиаграмма, ТипДиаграммы, ДанныеДиаграммы)
	
	РеквизитДиаграмма.Очистить();
	
	РеквизитДиаграмма.ТипДиаграммы = ТипДиаграммы;
	ТочкаДиаграммы = РеквизитДиаграмма.УстановитьТочку(0);
	
	Для Каждого ИнформацияДиаграммы Из ДанныеДиаграммы Цикл
		СерияДиаграммы = РеквизитДиаграмма.УстановитьСерию(ИнформацияДиаграммы.Серия);
		
		РеквизитДиаграмма.УстановитьЗначение(ТочкаДиаграммы,
			СерияДиаграммы, ИнформацияДиаграммы.Значение);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура ПоменятьОтветственногоНаСервере(Задача, ВыбранныйЭлемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПоменятьОтветственного(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект, Параметры);
	ПоказатьВыборИзМеню(Оповещение, Ответственные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Задача = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	ПоменятьОтветственногоНаСервере(Задача, ВыбранныйЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указан ответственный");
		Возврат;
	КонецЕсли;
	Если ПоказатьТаблицу Тогда
		Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	Иначе
		Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Задача = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Задача) Или Не ТипЗнч(Задача) = Тип("СправочникСсылка.Задачи") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана задача");
		Возврат;
	КонецЕсли;
	ИзменитьДанныеВСтрокеЗадач(Задача, "Ответственный", Ответственный);
	ОтсортироватьЗадачиНаКлиенте();
	Если Не ПоказатьТаблицу Тогда
		ОбновитьПланировщикНаСервере();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиПриАктивизацииСтроки(Элемент)
	Если Не ПоказатьТаблицу Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("СписокПослеАктивизации", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СписокПослеАктивизации() Экспорт
	ТекущиеДанные = Элементы.Задачи.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ИзменяемыеДанныеЗадачи(Элементы.Задачи.ТекущиеДанные.Задача);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлановоеВремяПриИзменении(Элемент)
	Если ПлановоеВремя = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указано плановое время");
		Возврат;
	КонецЕсли;
	Если ПоказатьТаблицу Тогда
		Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	Иначе
		Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Задача = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Задача) Или Не ТипЗнч(Задача) = Тип("СправочникСсылка.Задачи") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана задача");
		Возврат;
	КонецЕсли;
	ИзменитьДанныеВСтрокеЗадач(Задача, "ПлановоеВремя", ПлановоеВремя);
	Если Не ПоказатьТаблицу Тогда
		ОбновитьПланировщикНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеВСтрокеЗадач(Задача, Параметр, ЗначениеПараметра)
	ПараметрыОтбора = Новый Структура("Задача", Задача);
	НайденныеЗадачи = Объект.Задачи.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеЗадачи.Количество() > 0 Тогда
		НайденныеЗадачи[0][Параметр] = ЗначениеПараметра;
		НайденныеЗадачи[0]["ЗадачаИзменена"] = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменяемыеДанныеЗадачи(Задача)
	ПараметрыОтбора = Новый Структура("Задача", Задача);
	НайденныеЗадачи = Объект.Задачи.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеЗадачи.Количество() > 0 Тогда
		Ответственный = НайденныеЗадачи[0].Ответственный;
		ПлановоеВремя = НайденныеЗадачи[0].ПлановоеВремя;
		Возврат;
	КонецЕсли;
	Ответственный = Неопределено;
	ПлановоеВремя = 0;
КонецПроцедуры

&НаСервере
Функция РазныеЦветаИсполнителей(Цвет)

	НовыйЦвет = Цвет;
	ЦветаИсполнителей = Новый Соответствие;
	Для Каждого Исполнитель Из Объект.Ответственные Цикл
		НовыйЦвет = РаботаСЦветом.ОсветлитьЦвет(НовыйЦвет, 30);
		ЦветаИсполнителей.Вставить(Исполнитель.Значение, НовыйЦвет);
	КонецЦикла;
	Возврат ЦветаИсполнителей;
	
КонецФункции
#КонецОбласти

&НаСервере
Функция ТекстЗадачи(ТекстЗадачи, НайденнаяЗадача, ДанныеЗадачи)
	
	ТипБазовойЗадачи = "";
	НомерЗадачиБазовой = "";
		
	Если ЗначениеЗаполнено(ДанныеЗадачи.ТипБазовойЗадачи) Тогда
		ТипБазовойЗадачи = ОбщегоНазначения.ИмяЗначенияПеречисления(ДанныеЗадачи.ТипБазовойЗадачи);
		ТипБазовойЗадачи = СтрШаблон("%1 ",ДанныеЗадачи.ТипБазовойЗадачи);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗадачи.НомерЗадачиБазовой) Тогда
		НомерЗадачиБазовой = СтрШаблон("№ %1",ДанныеЗадачи.НомерЗадачиБазовой);
	КонецЕсли;
	
	ТекстЗадачи = СтрШаблон("[%1]   %2%3 (№ %4)
					|%5 
					|Крайний срок: %6 
					|Отв: %7",
					Формат(НайденнаяЗадача.ПлановоеВремя, "ЧДЦ=0; ЧГ=0"),
					ТипБазовойЗадачи,
					НомерЗадачиБазовой,
					ДанныеЗадачи.НомерЗадачи,
					ТекстЗадачи,
					НайденнаяЗадача.КрайнийСрок,
					НайденнаяЗадача.Ответственный
	);
	
	Возврат ТекстЗадачи;
	
КонецФункции


