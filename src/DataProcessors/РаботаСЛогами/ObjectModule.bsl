#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных
Перем ДанныеЛогов;
#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция ПроверкаФайлаЛогов(ВходящиеДанныеЛогов) Экспорт
	
	ДанныеЛогов = ВходящиеДанныеЛогов;
	ФайлЛогов   = Новый Файл(ДанныеЛогов.ИмяФайлаПотокаВывода);
	Если Не ФайлЛогов.Существует() Тогда 
		ВызватьИсключение(НСтр("ru = 'Файл логов не найден!'"));
	КонецЕсли;
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ОпределитьИзмененияВФайлеЛогов(Кодировка = "cp866") Экспорт

	ИмяФайлаКопия  = ПолучитьИмяВременногоФайла("log");
	КопироватьФайл(ДанныеЛогов.ИмяФайлаПотокаВывода, ИмяФайлаКопия);
	
	ФайлоЛоговКопия = Новый Файл(ИмяФайлаКопия);
	
	Если ФайлоЛоговКопия.Существует() Тогда
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ИмяФайлаКопия, Кодировка);
		ЛогПолученный = Текст.ПолучитьТекст();
	Иначе
		ВызватьИсключение(НСтр("ru = 'Не удалось создать копию файла логов!'"));
	КонецЕсли;
	
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайлаКопия);
	ДлинаЛогаПолученного = СтрДлина(ЛогПолученный);
	Если ДанныеЛогов.ДлинаПодробногоЛога = ДлинаЛогаПолученного Тогда
		ДанныеЛогов.ИзмененияЛогов        = Ложь;
		ДанныеЛогов.ИзмененияПодробныйЛог = "";
	Иначе
		ДанныеЛогов.ИзмененияЛогов        = Истина;
		ДанныеЛогов.ИзмененияПодробныйЛог = Сред(ЛогПолученный, ДанныеЛогов.ДлинаПодробногоЛога+1);
		ДанныеЛогов.ДлинаПодробногоЛога   = ДлинаЛогаПолученного;
	КонецЕсли;
	
	Возврат ЭтотОбъект;	
	
КонецФункции

Функция РазложитьСтрокиПодменитьТекст() Экспорт
	
	Если ДанныеЛогов.ИзмененияЛогов Тогда
		СтрокиЛогов = СтрРазделить(ДанныеЛогов.ИзмененияПодробныйЛог, Символы.ПС);
		
		Для Каждого СтрокаЛога Из СтрокиЛогов Цикл
			ПолучитьАдресМерджРеквеста(СтрокаЛога);
			СтрокаЛога = ЗамутитьПароль(СтрокаЛога);
			ДанныеЛогов.ПодробныйЛог.Вставить(0, СтрокаЛога);
			Для Каждого ЭлементПодмены Из ДанныеЛогов.ПодменыВыводаЛога Цикл
				Если СтрНайти(СтрокаЛога, ЭлементПодмены.Значение) = 0 Тогда
					Продолжить;
				КонецЕсли;
				СтрокаЛога = ЭлементПодмены.Представление;
				Если ДанныеЛогов.ЛогИндикатора.Найти(СтрокаЛога) = Неопределено Тогда
					ДанныеЛогов.ЛогИндикатора.Добавить(СтрокаЛога);
					ДанныеЛогов.Индикатор = Окр((ДанныеЛогов.ПодменыВыводаЛога.Индекс(ЭлементПодмены)+1)/ДанныеЛогов.МаксимумИндикатора*100,0);
				КонецЕсли;
				Прервать;
			КонецЦикла;
			
			Если ДанныеЛогов.КраткийЛог.Количество() И ДанныеЛогов.КраткийЛог.Получить(0) = СтрокаЛога Тогда
				Продолжить;
			КонецЕсли;
			ДанныеЛогов.КраткийЛог.Вставить(0, СтрокаЛога);
		КонецЦикла;
	КонецЕсли;
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ПолучитьТекстСтатусаВыполнения() Экспорт
	Если ДанныеЛогов.ИзмененияЛогов Тогда
		ДанныеЛогов.СтатусВыполнения = ?(ДанныеЛогов.ЛогИндикатора.Количество()=0, 
		                               "Запуск приложения завершен", 
		                               ДанныеЛогов.ЛогИндикатора[ДанныеЛогов.ЛогИндикатора.ВГраница()]);
	КонецЕсли;
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ПриложениеЗавершено() Экспорт
	
	//Важно, выполнять до РазложитьЛоги что бы строка "Запуск приложения завершен" не попала в финальный лог
	НомерСтрокиЗавершено = ДанныеЛогов.ПодробныйЛог.Найти("Запуск приложения завершен");
	Если НомерСтрокиЗавершено <> Неопределено Тогда
		ДанныеЛогов.ПодробныйЛог.Удалить(НомерСтрокиЗавершено);
		ДанныеЛогов.Выполнено = Истина;
	КонецЕсли;
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция РазложитьЛоги() Экспорт

	ДанныеЛогов.КраткийЛогСтрокой = СокрЛП(СтрСоединить(ДанныеЛогов.КраткийЛог, Символы.ПС));
	ДанныеЛогов.ПодробныйЛогСтрокой = СокрЛП(СтрСоединить(ДанныеЛогов.ПодробныйЛог, Символы.ПС));
	
	Возврат ЭтотОбъект;
	
КонецФункции

Функция ЕстьОшибки() Экспорт
	
	СписокОшибок = СписокОшибок();
	Для Каждого Ошибка Из СписокОшибок Цикл
		Если СтрНайти(ДанныеЛогов.ПодробныйЛогСтрокой, Ошибка) <> 0 Тогда
			Если СтрНайти(ДанныеЛогов.ПодробныйЛогСтрокой, "соединение") <> 0  Тогда
				Продолжить;	
			КонецЕсли;
			ДанныеЛогов.ЕстьОшибки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	

	Возврат ЭтотОбъект;
	
КонецФункции

Функция СписокОшибок()
	
	Результат = Новый Массив;
	Результат.Добавить("ОШИБКА");
	Результат.Добавить("ERROR");
	Результат.Добавить("401");
	Результат.Добавить("404");
	Результат.Добавить("???");
	Возврат Результат;

КонецФункции

Функция ДанныеЛогов() Экспорт
	
	Возврат ДанныеЛогов;
	
КонецФункции

Функция ЗамутитьПароль(СтрокаЛога)
	
	//СловаКоторыеНеобходимоСкрыть = Новый Массив;
	//СловаКоторыеНеобходимоСкрыть.Добавить("ibcmd");
	//СловаКоторыеНеобходимоСкрыть.Добавить("=179895");

	//Для Каждого ЗапрещеннаяСтрока Из СловаКоторыеНеобходимоСкрыть Цикл
	//	СтрокаЛога = СтрЗаменить(СтрокаЛога, ЗапрещеннаяСтрока, "******");
	//КонецЦикла;
	Возврат СтрокаЛога;
КонецФункции

#КонецОбласти

Функция ПолучитьАдресМерджРеквеста(СтрокаЛога)
	
	СтрокаСозданияРеквеста = "Создан мердж реквест:";
	
	Если СтрНайти(СтрокаЛога, СтрокаСозданияРеквеста) Тогда
		ДанныеЛогов.АдресМерджРеквеста = СокрЛП(СтрЗаменить(СтрокаЛога, СтрокаСозданияРеквеста, ""));
	КонецЕсли;
	
КонецФункции


#КонецЕсли
