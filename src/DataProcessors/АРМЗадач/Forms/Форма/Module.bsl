// @strict-types


#Область ПрограммныйИнтерфейс

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийСпринт = ТекущийСпринт();
	Если ТекущийСпринт <> Неопределено Тогда
		ДатаНачала = ТекущийСпринт.ДатаНачала;
		ДатаОкончания = ТекущийСпринт.ДатаОкончания;
	Иначе
		ДатаНачала = НачалоНедели(ТекущаяДатаСеанса());
		ДатаНачала = КонецНедели(ТекущаяДатаСеанса());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура СформированныеЗадачиПриИзменении(Элемент)
	СформированныеЗадачиПриИзмененииНаСервере(Элемент.ТекущаяОбласть.Значение, Элемент.ТекущаяОбласть.Расшифровка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СчитатьДанные(Команда = Неопределено)
	ОчиститьТабличныйДокумент();
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите ответственного", , "Ответственный");
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаНачала) 
		И ЗначениеЗаполнено(ДатаОкончания) 
		И ДатаОкончания - ДатаНачала > 86400*120 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Период не может превышать 120 дней", , "ДатаОкончания");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Заполните период.");
		Возврат;
	КонецЕсли;
	СчитатьДанныеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда = Неопределено)
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Укажите ответственного", , "Ответственный");
		Возврат;
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаписатьДанные", ЭтотОбъект, Параметры);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Записать данные?';"+ " en = 'Record data?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаписатьДанные(Результат, Параметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	ЗаписатьДанныеНаСервере();
	СчитатьДанные();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачиПользователя(Ответственный, ФильтрОтбора, МассивПолей)
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("НомерЗадачи", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(20)));
	ТаблицаЗадач.Колонки.Добавить("ПлановыеТрудозатраты", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(12,0)));
	ТаблицаЗадач.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗадач"));
	ПолученоЗадачВсего = 0;
	КоличествоПроходов = 0;
	URL = РаботаСBitrix.СсылкаBitrixПользователя(Ответственный);
	Пока 0 = 0 Цикл
		КоличествоПроходов = КоличествоПроходов + 1;
		Ответ = OPI_Bitrix24.ПолучитьСписокЗадач(URL, ФильтрОтбора, ПолученоЗадачВсего, ,МассивПолей);
		Если Ответ["error_description"] = Неопределено 
			И Ответ["result"].Количество() 
			И Ответ["error"] = Неопределено Тогда
			ПолученныеЗадачи = Ответ["result"]["tasks"];
			ПолученоЗадачВТекущемЗапросе = 0;
			Для Каждого ТекущаяСтрока Из ПолученныеЗадачи Цикл
				НоваяСтрока = ТаблицаЗадач.Добавить();
				НоваяСтрока.НомерЗадачи = ТекущаяСтрока["id"];
				НоваяСтрока.ПлановыеТрудозатраты = Число(ТекущаяСтрока["timeEstimate"]);
				НоваяСтрока.Статус = СтатусЗадачиПоИдентификатору(ТекущаяСтрока["status"]);
				ПолученоЗадачВТекущемЗапросе = ПолученоЗадачВТекущемЗапросе + 1;
			КонецЦикла;
			ПолученоЗадачВсего = ПолученоЗадачВсего + ПолученоЗадачВТекущемЗапросе;
			Если ПолученоЗадачВТекущемЗапросе < 50 Тогда
				Прервать;
			КонецЕсли;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("ОШИБКА! Не удалось получить данные: %1", Ответ["error_description"]));
			Прервать;
		КонецЕсли;
		Если КоличествоПроходов > 50 Тогда //от зацикливания
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗадач.Сортировать("НомерЗадачи");
	Возврат ТаблицаЗадач;
КонецФункции

&НаСервере
Процедура ДобавитьКолонку(СписокКолонок, Данные, стрНазваниеКолонки, ДатаКолонки)
	СписокКолонок.Добавить(стрНазваниеКолонки, Формат(ДатаКолонки, "ДФ=""дд.ММ.гг"""), ЭтоРабочаяДата(ДатаКолонки));
	Данные.Колонки.Добавить(стрНазваниеКолонки, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0)));
	Данные.Колонки.Добавить(стрНазваниеКолонки + "_доб", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0)));
	Данные.Колонки.Добавить(стрНазваниеКолонки + "_детали");
КонецПроцедуры

&НаСервере
Процедура СчитатьДанныеНаСервере()
	ОтветственныйID = "";
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(Ответственный);
	Если НастройкиПользователя <> Неопределено Тогда
		ОтветственныйID = НастройкиПользователя.IDПользователяBitrix;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ОтветственныйID) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У ответственного не указан ID пользователя bitrix", ,"Ответственный");
		Возврат;
	КонецЕсли;
	
	Данные = ДанныеРасшифровки.Выгрузить();
	
	МаксимальнаяДата = Неопределено;
	МинимальнаяДата = Неопределено;
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		РасчетнаяДата = ДатаНачала;
		Пока 0 = 0 Цикл
			стрНазваниеКолонки = НазваниеКолонки(РасчетнаяДата);
			Если СписокКолонок.НайтиПоЗначению(стрНазваниеКолонки) = Неопределено Тогда
				ДобавитьКолонку(СписокКолонок, Данные, стрНазваниеКолонки, РасчетнаяДата);
			КонецЕсли;
			РасчетнаяДата = НачалоДня(РасчетнаяДата + 86400);
			Если РасчетнаяДата > ДатаОкончания Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаЗадач = ЗадачиПользователя(Ответственный, ФильтрОтбораЗадач(ОтветственныйID), МассивПолей());
	Для Каждого ТекущаяЗадача Из ТаблицаЗадач Цикл
		Ответ = РаботаСBitrix.ПолучитьСписокТрудозатратЗадачи(ТекущаяЗадача.НомерЗадачи);
		Трудозатраты = Ответ["result"];
		Если Трудозатраты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НоваяСтрока = Данные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяЗадача);
		НоваяСтрока.Задача = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", НоваяСтрока.НомерЗадачи);
		НоваяСтрока.ОтветственныйID = ОтветственныйID;
		Для Каждого Строка Из Трудозатраты Цикл
			стрДатаНачалаТрудозатрат   = ПрочитатьДатуJSON(Строка["CREATED_DATE"], ФорматДатыJSON.ISO);
			стрЗатраченноеВремяМинуты  = Число(Строка["MINUTES"]);
			стрЗатраченноеВремяСекунды = Число(Строка["SECONDS"]);
			стрОтветственныйID         = Строка["USER_ID"];
			стрНазваниеКолонки         = НазваниеКолонки(стрДатаНачалаТрудозатрат);
			
			НоваяСтрока.ФактическиеТрудозатратыОбщие = НоваяСтрока.ФактическиеТрудозатратыОбщие + стрЗатраченноеВремяСекунды;
			Если стрОтветственныйID = ОтветственныйID Тогда
				НоваяСтрока.ФактическиеТрудозатратыОтветственного = НоваяСтрока.ФактическиеТрудозатратыОтветственного + стрЗатраченноеВремяСекунды;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДатаНачала) И
				НачалоДня(стрДатаНачалаТрудозатрат) < ДатаНачала Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ДатаОкончания) И
				НачалоДня(стрДатаНачалаТрудозатрат) > ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
				
			Если МинимальнаяДата = Неопределено Или МинимальнаяДата > НачалоДня(стрДатаНачалаТрудозатрат) Тогда
				МинимальнаяДата = НачалоДня(стрДатаНачалаТрудозатрат);
			КонецЕсли;
			Если МаксимальнаяДата = Неопределено Или МаксимальнаяДата < НачалоДня(стрДатаНачалаТрудозатрат) Тогда
				МаксимальнаяДата = НачалоДня(стрДатаНачалаТрудозатрат);
			КонецЕсли;
			Если СписокКолонок.НайтиПоЗначению(стрНазваниеКолонки) = Неопределено Тогда
				ДобавитьКолонку(СписокКолонок, Данные, стрНазваниеКолонки, стрДатаНачалаТрудозатрат);
			КонецЕсли;
			Если ТипЗнч(НоваяСтрока[стрНазваниеКолонки+"_детали"]) <> Тип("СписокЗначений") Тогда
				НоваяСтрока[стрНазваниеКолонки+"_детали"] = Новый СписокЗначений;
			КонецЕсли;
			НоваяСтрока[стрНазваниеКолонки+"_детали"].Добавить(ДеталиЗадачи(стрНазваниеКолонки+"_детали", стрДатаНачалаТрудозатрат, стрЗатраченноеВремяМинуты, стрЗатраченноеВремяСекунды, стрОтветственныйID));
			Если стрОтветственныйID = ОтветственныйID Тогда
				НоваяСтрока[стрНазваниеКолонки] = НоваяСтрока[стрНазваниеКолонки] + стрЗатраченноеВремяСекунды;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ОтветПоЗапросу = ПолучитьОтветИзБитриксПоОтмеченномуВремени(ОтветственныйID);
	
	Если ОтветПоЗапросу.КодСостояния = 200 Тогда
		OPI_Инструменты.ОбработатьОтвет(ОтветПоЗапросу);
		Трудозатраты = ОтветПоЗапросу["result"];
		Если Трудозатраты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		//Получаем таблицу с полными данными ответа
		ДобавлениеЗадачПоОтмеченномуВремениИзБитрикс(Данные, МаксимальнаяДата, МинимальнаяДата, ОтветственныйID, Трудозатраты)
	Иначе
		Сообщить("Код ответа: " + ОтветПоЗапросу.КодСостояния); //анализируем код состояния и делаем выводы
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Если МаксимальнаяДата - МинимальнаяДата>86400*120 Тогда
			ОбщегоНазначения.СообщитьПользователю("Период считанный по задачам превышает 120 дней. Укажите период отображения данных", , "ДатаОкончания");
			Возврат;
		КонецЕсли;
		РасчетнаяДата = МинимальнаяДата;
		Пока 0 = 0 Цикл
			стрНазваниеКолонки = НазваниеКолонки(РасчетнаяДата);
			Если СписокКолонок.НайтиПоЗначению(стрНазваниеКолонки) = Неопределено Тогда
				ДобавитьКолонку(СписокКолонок, Данные, стрНазваниеКолонки, РасчетнаяДата);
			КонецЕсли;
			РасчетнаяДата = НачалоДня(РасчетнаяДата + 86400);
			Если РасчетнаяДата > МаксимальнаяДата Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СписокКолонок.СортироватьПоЗначению();
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	Для Каждого Колонка Из СписокКолонок Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Значение, 
		     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0)), "ДанныеРасшифровки", Колонка.Представление));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Значение + "_доб", 
		     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0)), "ДанныеРасшифровки", Колонка.Представление));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Значение + "_детали", 
		     Новый ОписаниеТипов("СписокЗначений"), "ДанныеРасшифровки", Колонка.Представление));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Колонка.Значение+"_ТекущееЗатраченноеВремя", 
		     Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,0)), "ДанныеРасшифровки", Колонка.Представление));
		УдаляемыеРеквизиты.Добавить("ДанныеРасшифровки."+Колонка.Значение);
		УдаляемыеРеквизиты.Добавить("ДанныеРасшифровки."+Колонка.Значение + "_доб");
		УдаляемыеРеквизиты.Добавить("ДанныеРасшифровки."+Колонка.Значение + "_детали");
		УдаляемыеРеквизиты.Добавить("ДанныеРасшифровки."+Колонка.Значение + "_ТекущееЗатраченноеВремя");
	КонецЦикла;
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(УдаляемыеРеквизиты, ЭтаФорма.УникальныйИдентификатор);
	ДанныеРасшифровки.Загрузить(Данные);
	ОтрисоватьДанные(СписокКолонок);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтветИзБитриксПоОтмеченномуВремени(ОтветственныйID)
	
	URL = РаботаСBitrix.СсылкаBitrixПользователя(Ответственный);
	СтруктураURL  = OPI_Инструменты.РазбитьURL(URL);
	Сервер        = СтруктураURL["Сервер"];
	Адрес         = СтруктураURL["Адрес"];
	
	СоединениеHTTP = Новый HTTPСоединение(Сервер, 443,,,,, Новый ЗащищенноеСоединениеOpenSSL());
	
	// Получение текста главной страницы через запрос.
	СтрокаЗапроса = СтрШаблон("%1/task.elapseditem.getlist?ORDER[USER_ID]=asc&FILTER[USER_ID]=%2&FILTER[>%%3DCREATED_DATE]=%3&FILTER[<%%3DCREATED_DATE]=%4",
		Адрес,
		ОтветственныйID,
		ПреобразоватьДату(ДатаНачала),
		ПреобразоватьДату(ДатаОкончания + 60*60*24)
	);
	ЗапросHTTP = Новый HTTPЗапрос(СтрокаЗапроса); // Можно указать любую нужную страницу например, "/about" или "/contacts"
	ОтветПоЗапросу = СоединениеHTTP.Получить(ЗапросHTTP); // Get запрос
	Возврат ОтветПоЗапросу;

КонецФункции

&НаСервере
Процедура ДобавлениеЗадачПоОтмеченномуВремениИзБитрикс(Данные, МаксимальнаяДата, МинимальнаяДата, ОтветственныйID, Трудозатраты)
	
	ЗадачиПоОтмеченномуВремени = Новый Массив;
	
	Для Каждого Строка Из Трудозатраты Цикл
		
		НоваяСтрока = Данные.Найти(Строка["TASK_ID"]);
		Если НоваяСтрока = Неопределено Тогда
			НоваяСтрока = Данные.Добавить();
			ЗадачиПоОтмеченномуВремени.Добавить(Строка["TASK_ID"]);
		КонецЕсли;
		
		Если ЗадачиПоОтмеченномуВремени.Найти(Строка["TASK_ID"]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Задача = Справочники.Задачи.НайтиПоРеквизиту("НомерЗадачи", Строка["TASK_ID"]); 
		НоваяСтрока.Задача = Задача;
		НоваяСтрока.ОтветственныйID = ОтветственныйID;
		НоваяСтрока.НомерЗадачи = Строка["TASK_ID"];
		
		стрДатаНачалаТрудозатрат   = ПрочитатьДатуJSON(Строка["CREATED_DATE"], ФорматДатыJSON.ISO);
		стрЗатраченноеВремяМинуты  = Число(Строка["MINUTES"]);
		стрЗатраченноеВремяСекунды = Число(Строка["SECONDS"]);
		стрОтветственныйID         = Строка["USER_ID"];
		стрНазваниеКолонки         = НазваниеКолонки(стрДатаНачалаТрудозатрат);
		
		НоваяСтрока.ПлановыеТрудозатраты = Задача.ПлановоеВремя*60;
		
		Если стрОтветственныйID = ОтветственныйID Тогда
			НоваяСтрока.ФактическиеТрудозатратыОтветственного = НоваяСтрока.ФактическиеТрудозатратыОтветственного + стрЗатраченноеВремяСекунды;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачала) И
			НачалоДня(стрДатаНачалаТрудозатрат) < ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаОкончания) И
			НачалоДня(стрДатаНачалаТрудозатрат) > ДатаОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		Если МинимальнаяДата = Неопределено Или МинимальнаяДата > НачалоДня(стрДатаНачалаТрудозатрат) Тогда
			МинимальнаяДата = НачалоДня(стрДатаНачалаТрудозатрат);
		КонецЕсли;
		Если МаксимальнаяДата = Неопределено Или МаксимальнаяДата < НачалоДня(стрДатаНачалаТрудозатрат) Тогда
			МаксимальнаяДата = НачалоДня(стрДатаНачалаТрудозатрат);
		КонецЕсли;
		Если СписокКолонок.НайтиПоЗначению(стрНазваниеКолонки) = Неопределено Тогда
			ДобавитьКолонку(СписокКолонок, Данные, стрНазваниеКолонки, стрДатаНачалаТрудозатрат);
		КонецЕсли;
		Если ТипЗнч(НоваяСтрока[стрНазваниеКолонки+"_детали"]) <> Тип("СписокЗначений") Тогда
			НоваяСтрока[стрНазваниеКолонки+"_детали"] = Новый СписокЗначений;
		КонецЕсли;
		НоваяСтрока[стрНазваниеКолонки+"_детали"].Добавить(ДеталиЗадачи(стрНазваниеКолонки+"_детали", стрДатаНачалаТрудозатрат, стрЗатраченноеВремяМинуты, стрЗатраченноеВремяСекунды, стрОтветственныйID));
		Если стрОтветственныйID = ОтветственныйID Тогда
			НоваяСтрока[стрНазваниеКолонки] = НоваяСтрока[стрНазваниеКолонки] + стрЗатраченноеВремяСекунды;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличныйДокумент()
	СформированныеЗадачи.Очистить();
	УдалитьЭлементыФормы();
КонецПроцедуры

&НаСервере
Функция ЭтоРабочаяДата(Дата)
	ЭтоРабочаяДата = Истина;
	ИспользуемыеКалендари = Справочники.ПроизводственныеКалендари.СписокПроизводственныхКалендарей();
	Если ИспользуемыеКалендари.Количество() > 0 Тогда
		НачальныеДаты = Новый Массив;
		НачальныеДаты.Добавить(Дата);
		БлижайшиеРабочиеДаты = КалендарныеГрафики.БлижайшиеРабочиеДаты(ИспользуемыеКалендари[0], НачальныеДаты);
		ЭтоРабочаяДата = БлижайшиеРабочиеДаты[Дата] = Дата;
	Иначе
		ДеньНедели = ДеньНедели(Дата);
		Если ДеньНедели = 6 Или ДеньНедели = 7 Тогда
			ЭтоРабочаяДата = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтоРабочаяДата;
КонецФункции

&НаСервере
Процедура ОтрисоватьДанные(СписокКолонок)
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Макет");
	ОбластьЗаголовокОсновная = Макет.ПолучитьОбласть("Заголовок|Основная");
	ОбластьЗаголовокДополнительная = Макет.ПолучитьОбласть("Заголовок|Дополнительная");
	ОбластьЗаголовокДополнительнаяВыходной = Макет.ПолучитьОбласть("Заголовок|ДополнительнаяВыходной");
	ОбластьСтрокаОсновная = Макет.ПолучитьОбласть("Строка|Основная");
	ОбластьСтрокаДополнительная = Макет.ПолучитьОбласть("Строка|Дополнительная");
	ОбластьСтрокаДополнительнаяВыходной = Макет.ПолучитьОбласть("Строка|ДополнительнаяВыходной");
	ОбластьИтогиОсновная = Макет.ПолучитьОбласть("Итоги|Основная");
	ОбластьИтогиДополнительная = Макет.ПолучитьОбласть("Итоги|Дополнительная");
	ОбластьИтогиДополнительнаяВыходной = Макет.ПолучитьОбласть("Итоги|ДополнительнаяВыходной");
	ОбластьЗаголовокОсновная.Защита = Истина;
	ОбластьЗаголовокОсновная.ТолькоПросмотр = Истина;
	СформированныеЗадачи.Вывести(ОбластьЗаголовокОсновная);
	СформированныеЗадачи.ФиксацияСлева  = СформированныеЗадачи.ШиринаТаблицы;
	СформированныеЗадачи.ФиксацияСверху = СформированныеЗадачи.ВысотаТаблицы;
	Для Каждого Колонка Из СписокКолонок Цикл
		Если Колонка.Пометка Тогда
			ТекущаяОбласть = ОбластьЗаголовокДополнительная;
		Иначе
			ТекущаяОбласть = ОбластьЗаголовокДополнительнаяВыходной;
		КонецЕсли;
		ТекущаяОбласть.Параметры.ДатаВыполнения = Колонка.Представление;
		ОбластьЗаголовокОсновная.Защита = Ложь;
		СформированныеЗадачи.Присоединить(ТекущаяОбласть);
	КонецЦикла;
	Для Каждого ТекущаяСтрока Из ДанныеРасшифровки Цикл
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаОсновная.Параметры, ТекущаяСтрока);
		ОбластьСтрокаОсновная.Параметры.ПлановыеТрудозатраты = ФорматВремя(ТекущаяСтрока.ПлановыеТрудозатраты);
		ОбластьСтрокаОсновная.Параметры.ФактическиеТрудозатратыОбщие = ФорматВремя(ТекущаяСтрока.ФактическиеТрудозатратыОбщие);
		ОбластьСтрокаОсновная.Параметры.ФактическиеТрудозатратыОтветственного = ФорматВремя(ТекущаяСтрока.ФактическиеТрудозатратыОтветственного);
		ОбластьСтрокаОсновная.Параметры.ДобавленноеВремя = ФорматВремя(ТекущаяСтрока.ДобавленноеВремя);
		ОбластьСтрокаОсновная.Параметры.ЗадачаРасшифровка = ТекущаяСтрока.Задача;
		ТекущаяСтрокаТабличногоДокумента = Новый ТабличныйДокумент;
		ТекущаяСтрокаТабличногоДокумента.Вывести(ОбластьСтрокаОсновная);
		ПоложениеВремениПоЗадачеКолонка = ТекущаяСтрокаТабличногоДокумента.ШиринаТаблицы;
		Для Каждого Колонка Из СписокКолонок Цикл
			Если Колонка.Пометка Тогда
				ТекущаяОбласть = ОбластьСтрокаДополнительная;
			Иначе
				ТекущаяОбласть = ОбластьСтрокаДополнительнаяВыходной;
			КонецЕсли;
			ТекущаяОбласть.Параметры.ВремяВЗадаче = ФорматВремя(ТекущаяСтрока[Колонка.Значение]);
			ТекущаяОбласть.Параметры.ТекущееЗатраченноеВремяРасшифровка = ДеталиРасшифровки(ДанныеРасшифровки.Индекс(ТекущаяСтрока), 
			     Колонка.Значение, СформированныеЗадачи.ВысотаТаблицы+1, ТекущаяСтрокаТабличногоДокумента.ШиринаТаблицы + 2, ПоложениеВремениПоЗадачеКолонка);
			ТекущаяСтрокаТабличногоДокумента.Присоединить(ТекущаяОбласть);
		КонецЦикла;
		СформированныеЗадачи.Вывести(ТекущаяСтрокаТабличногоДокумента);
	КонецЦикла;
	ОбластьИтогиОсновная.Параметры.ПлановыеТрудозатраты = ФорматВремя(ДанныеРасшифровки.Итог("ПлановыеТрудозатраты"));
	ОбластьИтогиОсновная.Параметры.ФактическиеТрудозатратыОбщие = ФорматВремя(ДанныеРасшифровки.Итог("ФактическиеТрудозатратыОбщие"));
	ОбластьИтогиОсновная.Параметры.ФактическиеТрудозатратыОтветственного = ФорматВремя(ДанныеРасшифровки.Итог("ФактическиеТрудозатратыОтветственного"));
	ОбластьИтогиОсновная.Параметры.ДобавленноеВремя = ФорматВремя(ДанныеРасшифровки.Итог("ДобавленноеВремя"));
	СформированныеЗадачи.Вывести(ОбластьИтогиОсновная);
	Для Каждого Колонка Из СписокКолонок Цикл
		Если Колонка.Пометка Тогда
			ТекущаяОбласть = ОбластьИтогиДополнительная;
		Иначе
			ТекущаяОбласть = ОбластьИтогиДополнительнаяВыходной;
		КонецЕсли;
		ТекущаяОбласть.Параметры.ВремяВЗадаче = ФорматВремя(ДанныеРасшифровки.Итог(Колонка.Значение));
		СформированныеЗадачи.Присоединить(ТекущаяОбласть);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДеталиРасшифровки(ИндексСтрокиДанных, ИмяКолонки, ПоложениеЯчейкиСтрока, ПоложениеЯчейкиКолонка, ПоложениеВремениПоЗадачеКолонка)
	ДеталиРасшифровки = Новый Структура;
	ДеталиРасшифровки.Вставить("ИндексСтрокиДанных",              ИндексСтрокиДанных);
	ДеталиРасшифровки.Вставить("ИмяКолонки",                      ИмяКолонки);
	ДеталиРасшифровки.Вставить("ЗатраченноеВремя",                Дата(1, 1, 1, 0, 0, 0));
	ДеталиРасшифровки.Вставить("ПоложениеЯчейкиСтрока",           ПоложениеЯчейкиСтрока);
	ДеталиРасшифровки.Вставить("ПоложениеЯчейкиКолонка",          ПоложениеЯчейкиКолонка);
	ДеталиРасшифровки.Вставить("ПоложениеВремениПоЗадачеКолонка", ПоложениеВремениПоЗадачеКолонка);
	Возврат ДеталиРасшифровки;
КонецФункции

&НаСервереБезКонтекста
Функция ФорматВремя(ВремяВСекундах)
	Часы = Цел(ВремяВСекундах/3600);
	Минуты = Цел((ВремяВСекундах - Часы*3600)/60);
	Если Часы = 0 И Минуты = 0 Тогда
		Возврат "";
	КонецЕсли;
	Возврат СтрШаблон("%1:%2", Часы, Формат(Минуты, "ЧЦ=2; ЧН=; ЧВН="));
КонецФункции

&НаСервере
Процедура УдалитьЭлементыФормы()
	ДанныеРасшифровки.Очистить();
	СписокКолонок.Очистить();
	Если Не ПустаяСтрока(АдресВременногоХранилища) Тогда
		УдаляемыеРеквизиты = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		Если УдаляемыеРеквизиты.Количество() > 0 Тогда
			ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		КонецЕсли;
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		АдресВременногоХранилища = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформированныеЗадачиПриИзмененииНаСервере(ЗначениеОбласти, РасшифровкаОбласти)
	Если РасшифровкаОбласти.ЗатраченноеВремя = ЗначениеОбласти Тогда
		Возврат;
	КонецЕсли;
	РазницаВремени = ЗначениеОбласти - РасшифровкаОбласти.ЗатраченноеВремя;
	ДанныеРасшифровки[РасшифровкаОбласти.ИндексСтрокиДанных][РасшифровкаОбласти.ИмяКолонки+"_доб"] = ЗначениеОбласти - Дата(1, 1, 1, 0, 0, 0);
	ДанныеРасшифровки[РасшифровкаОбласти.ИндексСтрокиДанных].ДобавленноеВремя = ДанныеРасшифровки[РасшифровкаОбласти.ИндексСтрокиДанных].ДобавленноеВремя + РазницаВремени;
	//Добавленное время по задаче
	СформированныеЗадачи.Область(РасшифровкаОбласти.ПоложениеЯчейкиСтрока,
	                             РасшифровкаОбласти.ПоложениеВремениПоЗадачеКолонка,
	                             РасшифровкаОбласти.ПоложениеЯчейкиСтрока,
	                             РасшифровкаОбласти.ПоложениеВремениПоЗадачеКолонка).Текст = 
	    ФорматВремя(ДанныеРасшифровки[РасшифровкаОбласти.ИндексСтрокиДанных].ДобавленноеВремя);
	// Итог по колонке даты
	СформированныеЗадачи.Область(СформированныеЗадачи.ВысотаТаблицы,
	                             РасшифровкаОбласти.ПоложениеЯчейкиКолонка,
	                             СформированныеЗадачи.ВысотаТаблицы,
	                             РасшифровкаОбласти.ПоложениеЯчейкиКолонка).Текст = 
	    ФорматВремя(ДанныеРасшифровки.Итог(РасшифровкаОбласти.ИмяКолонки+"_доб"));
	// Итог по колонке добавленного времени
	СформированныеЗадачи.Область(СформированныеЗадачи.ВысотаТаблицы,
	                             РасшифровкаОбласти.ПоложениеВремениПоЗадачеКолонка,
	                             СформированныеЗадачи.ВысотаТаблицы,
	                             РасшифровкаОбласти.ПоложениеВремениПоЗадачеКолонка).Текст = 
	    ФорматВремя(ДанныеРасшифровки.Итог("ДобавленноеВремя"));
	РасшифровкаОбласти.ЗатраченноеВремя = ЗначениеОбласти;
	
КонецПроцедуры 

&НаСервере
Функция ДатаИзИмениКолонки(ИмяКолонки)
	Возврат Дата(Сред(ИмяКолонки,6,4)+Сред(ИмяКолонки,10,2)+Сред(ИмяКолонки,12,2));
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеНаСервере()
	ДанныеДляЗаписи = РасчетВремениНачалаДобавляемыхТрудозатрат(ПодготовкаДанных());
	Для Каждого ТекущаяСтрока Из ДанныеДляЗаписи Цикл
		ВремяНачала = ТекущаяСтрока.ВремяНачала;
		Если ВремяНачала - НачалоДня(ВремяНачала) + ТекущаяСтрока.ДобавленноеВремя > 86400 Тогда
			ВремяНачала = КонецДня(ВремяНачала) - ТекущаяСтрока.ДобавленноеВремя - 1;
		КонецЕсли;
		Ответ = OPI_Bitrix24.ДобавитьТрудозатратыЗадачи(РаботаСBitrix.СсылкаBitrixПользователя(Ответственный),
		    ТекущаяСтрока.НомерЗадачи, 
		    ТекущаяСтрока.ДобавленноеВремя,
		    ТекущаяСтрока.ОтветственныйID,
		    ,
		    ВремяНачала);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПодготовкаДанных()
	ДанныеДляЗаписи = Новый ТаблицаЗначений;
	ДанныеДляЗаписи.Колонки.Добавить("Задача");
	ДанныеДляЗаписи.Колонки.Добавить("НомерЗадачи");
	ДанныеДляЗаписи.Колонки.Добавить("ОтветственныйID");
	ДанныеДляЗаписи.Колонки.Добавить("ДобавленноеВремя");
	ДанныеДляЗаписи.Колонки.Добавить("Дата");
	ДанныеДляЗаписи.Колонки.Добавить("ВремяНачала");
	ДанныеДляЗаписи.Колонки.Добавить("Детали");
	Для Каждого ТекущаяСтрока Из ДанныеРасшифровки Цикл
		Для Каждого Колонка Из СписокКолонок Цикл
			Если ТекущаяСтрока[Колонка.Значение + "_доб"] > 0 Тогда
				НоваяСтрока = ДанныеДляЗаписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
				НоваяСтрока.ДобавленноеВремя = ТекущаяСтрока[Колонка.Значение + "_доб"];
				НоваяСтрока.Дата             = ДатаИзИмениКолонки(Колонка.Значение);
				НоваяСтрока.Детали           = ТекущаяСтрока[Колонка.Значение + "_детали"];
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ДанныеДляЗаписи;
КонецФункции

&НаСервереБезКонтекста
Функция ДеталиЗадачи(НазваниеКолонки, ДатаНачалаТрудозатрат, ЗатраченноеВремяМинуты, ЗатраченноеВремяСекунды, ОтветственныйID)
	ДеталиЗадачи = Новый Структура();
	ДеталиЗадачи.Вставить("НазваниеКолонки",         НазваниеКолонки);
	ДеталиЗадачи.Вставить("ДатаНачалаТрудозатрат",   ДатаНачалаТрудозатрат);
	ДеталиЗадачи.Вставить("ЗатраченноеВремяМинуты",  ЗатраченноеВремяМинуты);
	ДеталиЗадачи.Вставить("ЗатраченноеВремяСекунды", ЗатраченноеВремяСекунды);
	ДеталиЗадачи.Вставить("Ответственный",           ОтветственныйID);
	Возврат ДеталиЗадачи;
КонецФункции

&НаСервереБезКонтекста
Функция РасчетВремениНачалаДобавляемыхТрудозатрат(ДанныеДляЗаписи)
	Для Каждого ТекущаяСтрока Из ДанныеДляЗаписи Цикл
		ТекущаяСтрока.ВремяНачала = НачалоДня(ТекущаяСтрока.Дата)+3600*9; //9:00
		Если ТекущаяСтрока.Детали.Количество() > 0 Тогда
			ПоследнееСвободноеВремя = НачалоДня(ТекущаяСтрока.Дата);
			Для Каждого ТекущиеДетали Из ТекущаяСтрока.Детали Цикл
				СвободноеВремя = ТекущиеДетали.Значение.ДатаНачалаТрудозатрат + ТекущиеДетали.Значение.ЗатраченноеВремяСекунды;
				Если ПоследнееСвободноеВремя < СвободноеВремя Тогда
					ПоследнееСвободноеВремя = СвободноеВремя;
				КонецЕсли;
			КонецЦикла;
			Если ПоследнееСвободноеВремя > ТекущаяСтрока.ВремяНачала Тогда
				ТекущаяСтрока.ВремяНачала = ПоследнееСвободноеВремя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ДанныеДляЗаписи;
КонецФункции

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	ОчиститьТабличныйДокумент();
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивПолей()
	МассивПолей = Новый Массив;
	МассивПолей.Добавить("ID");
	МассивПолей.Добавить("TIME_ESTIMATE");
	МассивПолей.Добавить("UF_TASK_TYPE");
	МассивПолей.Добавить("UF_ESSENCE");
	МассивПолей.Добавить("STATUS");
	Возврат МассивПолей;
КонецФункции

&НаСервереБезКонтекста
Функция СтатусЗадачиПоИдентификатору(Идентификатор)
	Если Идентификатор = "2" Тогда
		Возврат Перечисления.СтатусыЗадач.ЖдетВыполнения;
	ИначеЕсли Идентификатор = "3" Тогда
		Возврат Перечисления.СтатусыЗадач.Выполняется;
	ИначеЕсли Идентификатор = "4" Тогда
		Возврат Перечисления.СтатусыЗадач.ЖдетКонтроля;
	ИначеЕсли Идентификатор = "5" Тогда
		Возврат Перечисления.СтатусыЗадач.Завершена;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ФильтрОтбораЗадач(ОтветственныйID)
	Фильтр = Новый Структура;
	
	МассивСпринтов = Новый Массив;
	Для Каждого ТекущаяСтрока Из Спринты Цикл
		МассивСпринтов.Добавить(ТекущаяСтрока.Значение.Код);
	КонецЦикла;
	МассивСтатусовЗадач = Новый Массив;
	Для Каждого ТекущаяСтрока Из СтатусыЗадач Цикл
		Если ТекущаяСтрока.Значение = Перечисления.СтатусыЗадач.ЖдетВыполнения Тогда
			МассивСтатусовЗадач.Добавить("2");
		ИначеЕсли ТекущаяСтрока.Значение = Перечисления.СтатусыЗадач.Выполняется Тогда
			МассивСтатусовЗадач.Добавить("3");
		ИначеЕсли ТекущаяСтрока.Значение = Перечисления.СтатусыЗадач.ЖдетКонтроля Тогда
			МассивСтатусовЗадач.Добавить("4");
		ИначеЕсли ТекущаяСтрока.Значение = Перечисления.СтатусыЗадач.Завершена Тогда
			МассивСтатусовЗадач.Добавить("5");
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтатусовЗадач.Количество() > 0 Тогда
		Фильтр.Вставить("STATUS", МассивСтатусовЗадач);
	КонецЕсли;
	
	МассивТиповЗадач = Новый Массив;
	МассивВидовЗадач = Новый Массив;
	Для Каждого ТекущаяСтрока Из ТипыЗадач Цикл
		Если ТекущаяСтрока.Значение = Перечисления.ТипыЗадач.Разработка Тогда
			МассивТиповЗадач.Добавить("857");
		ИначеЕсли ТекущаяСтрока.Значение = Перечисления.ТипыЗадач.ЗНИ Тогда
			МассивВидовЗадач.Добавить("612");
			МассивВидовЗадач.Добавить("611");
		ИначеЕсли ТекущаяСтрока.Значение = Перечисления.ТипыЗадач.Инцидент Тогда
			МассивВидовЗадач.Добавить("610");
		КонецЕсли;
	КонецЦикла;
	Если МассивТиповЗадач.Количество() > 0 Тогда
		Фильтр.Вставить("UF_TASK_TYPE", МассивТиповЗадач);//"857";
	КонецЕсли;
	Если МассивВидовЗадач.Количество() > 0 Тогда
		Фильтр.Вставить("UF_ESSENCE", МассивВидовЗадач);;
	КонецЕсли;
	
	Фильтр.Вставить("RESPONSIBLE_ID", ОтветственныйID);
	Если МассивСпринтов.Количество() > 0 Тогда
		Фильтр.Вставить("UF_CRM_TASK", МассивСпринтов);
	КонецЕсли;
	Возврат Фильтр;
КонецФункции

&НаСервереБезКонтекста
Функция НазваниеКолонки(Дата)
	Возврат "Дата_" + Формат(Дата, "ДФ=""ггггММдд""");
КонецФункции

&НаСервереБезКонтекста
Функция ТекущийСпринт()
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Спринты.ДатаНачала КАК ДатаНачала,
	|	Спринты.ДатаОкончания КАК ДатаОкончания
	|ИЗ
	|	Справочник.Спринты КАК Спринты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Спринты.ДатаНачала, ДЕНЬ) <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(Спринты.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьДату(ИсхДата,ИСОФормат=Истина)
    Если НЕ ЗначениеЗаполнено(ИсхДата) Тогда
        Возврат Неопределено
    КонецЕсли;
    Если ИСОФормат Тогда
        Возврат Формат(ИсхДата,"ДФ=yyyy-MM-dd");
    Иначе 
        Возврат XMLЗначение(Тип("Дата"), ИсхДата);
    КонецЕсли        
КонецФункции

#КонецОбласти








