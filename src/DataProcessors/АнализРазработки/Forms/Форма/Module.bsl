// @strict-types

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Запустить(Команда)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	Сборки.Очистить();
	
	ЗапуститьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СледующаяСтраницаГрафиков(Команда)
	ПерейтиНаСтраницу("Следующая");
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущаяСтраницаГрафиков(Команда)
	ПерейтиНаСтраницу("Предыдущая");
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	ПечатнаяФорма = СформироватьПечатнуюФормуНаСервере(); 
	ПечатнаяФорма.Показать(Нстр("ru = 'Анализ разработки'"));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФорм

&НаКлиенте
Процедура MergeRequestВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.MergeRequest.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.MergeRequestНомерМерджРеквеста Тогда

		ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "СсылкиНаСборки");
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
		
		СписокСсылок = Новый СписокЗначений;
		СписокСсылок.Добавить(ТекущиеДанные.СсылкаМерджРеквест, "Адрес на мерджреквест", , БиблиотекаКартинок.GitLab16);
		ПоказатьВыборИзМеню(Оповещение, СписокСсылок, Элемент.ТекущийЭлемент);
		
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.MergeRequestОдобрили Тогда
		
		ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "СсылкиНаСборки");
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаОдобрили", ЭтаФорма, ПараметрыОповещения);
		
		СписокСсылок = Новый СписокЗначений;
		Если ТекущиеДанные.СтатусМерджРеквеста = "opened" Тогда 
			СписокСсылок.Добавить("Одобрить", "Одобрить", , БиблиотекаКартинок.СостоянияРасширенийПодключено);
		КонецЕсли;
		ПоказатьВыборИзМеню(Оповещение, СписокСсылок, Элемент.ТекущийЭлемент);
		
	Иначе
		// Не обрабатываем	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура MergeRequestПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура MergeRequestПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПриАктивизацииСтроки(Элемент)
	
	ОчиститьДанные(Ложь);
	МассивВыделенныхЗадач = МассивВыделенныхЗадач();
	ЗаполнитьМерджРеквесты(МассивВыделенныхЗадач);
	ЗаполнитьСборки(МассивВыделенныхЗадач);

КонецПроцедуры

&НаКлиенте
Процедура MergeRequestПриАктивизацииСтроки(Элемент)
	
	НомераМерджРеквестов.Очистить();
	ТекущийМерджДанные = Элементы.MergeRequest.ТекущиеДанные;
	
	Если ТекущийМерджДанные <> Неопределено Тогда
		НомераМерджРеквестов = НомераВыделенныхМерджРеквестов();
		ИзмененыеОбъекты.Очистить();
		ПодключитьОбработчикОжидания("ЗаполнитьСписокИзмененыхОбъектов", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СборкиПриАктивизацииСтроки(Элемент)
	
	НомераСборок.Очистить();

	ТекущиеДанные = Элементы.Сборки.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ВыделенныеСтроки = Элементы.Сборки.ВыделенныеСтроки;
		Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
			СтрокаСборки = Элементы.Сборки.ДанныеСтроки(ИндексСтроки);
			НомераСборок.Добавить(СтрокаСборки.НомерСборки, СтрокаСборки.НомерСборки);
		КонецЦикла;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ВывестиДиаграммуПоAllure", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элементы.Задачи.ТекущиеДанные.Задача);
	
	ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьПечатнуюФормуНаСервере()
	
	ВсеЗадачи = Задачи.Выгрузить().ВыгрузитьКолонку("Задача");
	
	СводТаблицаХраненияДанных = СводнаяТаблицаХраненияДанных.Выгрузить();
	СводТаблицаХраненияДанных.Индексы.Добавить("Задача, СтатусМерджРеквеста");
	
	Апрувы = ТаблицаАпрувов.Выгрузить();
	Апрувы.Индексы.Добавить("НомерМерджРеквеста");
	
	Возврат Обработки.АнализРазработки.ПечатьВсеЗадачи(ВсеЗадачи, СводТаблицаХраненияДанных, Апрувы);
	
КонецФункции

&НаКлиенте
Процедура ВывестиДиаграммуПоAllure();
	
	ВывестиДиаграммуПоAllureНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДиаграммуПоAllureНаСервере();
	
	ДанныеДляДиаграммы = НовыйДанныеДляДиаграммы();

	ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, 
		"ИмяПользователяJenkins, ПарольJenkins, URLJenkins, ИмяJobJenkins");
	
	ДополнительныеПараметры = ЗапускПриложенияЧерезJENKINS.НовыйДополнительныеПараметрыЗапроса();
	УстановитьАвторизациюJENKINS(ДополнительныеПараметры, ДанныеПроекта);

	Для Каждого НомерСборки Из НомераСборок Цикл
		//todo собирать юрл
		Адрес  = "http://jenkins.toolsworld.root.local/job/%1/%2/artifact/allure-report.zip";
		Адрес = СтрШаблон(Адрес, ДанныеПроекта.ИмяJobJenkins, НомерСборки);
		РазобратьОтчетAllureПоВнешнимДанным(Адрес, ДополнительныеПараметры, ДанныеДляДиаграммы);
		
	КонецЦикла;
	СформироватьДиаграммуСтатусы(ДанныеДляДиаграммы)
	
КонецПроцедуры

&НаСервере
Процедура РазобратьОтчетAllureПоВнешнимДанным(Адрес, ДополнительныеПараметры, ДанныеДляДиаграммы)
	
	Ответ = КоннекторHTTP.Get(Адрес,, ДополнительныеПараметры);
	
	Попытка	
		ЧтениеZip = Новый ЧтениеZipФайла(Ответ.Тело.ОткрытьПотокДляЧтения());		
	Исключение
	    ДанныеДляДиаграммы.КоличествоТестовыхСлучаев = 1;
		ДанныеДляДиаграммы.Вставить("КоличествоПровалов", 1);
		Возврат;
	КонецПопытки;
	
	Для Каждого Элемент Из ЧтениеZip.Элементы Цикл
		
		Если Элемент.Имя = "suites.json" Тогда
			ВременнаяПапка = ПолучитьИмяВременногоФайла();
			ЧтениеZip.Извлечь(Элемент, ВременнаяПапка);
			
			ШаблонПути = "%1\allure-report\data\%2";
			ПутьКФайлу = СтрШаблон(ШаблонПути, ВременнаяПапка, Элемент.Имя);
			
			Отчет = ЗначениеТекстовогоФайла(ПутьКФайлу);
			ДанныеОтчета = ОбщегоНазначения.JSONВЗначение(Отчет,, Истина);
			
			РазобратьОтчетAllure(ДанныеОтчета, ДанныеДляДиаграммы);
			УдалитьФайлы(ПутьКФайлу);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДанные(ОчищатьЗадачи = Истина)
	
	Сборки.Очистить();
	ИзмененыеОбъекты.Очистить();
	MergeRequest.Очистить();
	
	Если ОчищатьЗадачи Тогда
		Задачи.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МассивВыделенныхЗадач()
	
	МассивВыделенныхЗадач = Новый Массив;
	ВыделенныеСтроки = Элементы.Задачи.ВыделенныеСтроки;
	
	Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
		СтрокаЗадачи = Элементы.Задачи.ДанныеСтроки(ИндексСтроки);
		МассивВыделенныхЗадач.Добавить(СтрокаЗадачи.Задача);
	КонецЦикла;

	Возврат МассивВыделенныхЗадач;
	
КонецФункции

&НаКлиенте
Функция НомераВыделенныхМерджРеквестов()
	
	ВыделенныеСтроки = Элементы.MergeRequest.ВыделенныеСтроки;
	
	Для Каждого ИндексСтроки Из ВыделенныеСтроки Цикл
		СтрокаМерджРеквеста = Элементы.MergeRequest.ДанныеСтроки(ИндексСтроки);
		НомераМерджРеквестов.Добавить(СтрокаМерджРеквеста.НомерМерджРеквеста, СтрокаМерджРеквеста.НомерМерджРеквеста);
	КонецЦикла;

	Возврат НомераМерджРеквестов;
	
КонецФункции

&НаСервере
Процедура ЗапуститьНаСервере()

	ПолучитьСборкиИзВнешнихДанных();

КонецПроцедуры

&НаСервере
Процедура ПолучитьСборкиИзВнешнихДанных()
	
	ДанныеПроекта = Неопределено;
	ПолученыеСборки = Неопределено;
	СборкиДженкинс(ДанныеПроекта, ПолученыеСборки);

	ТаблицаМерджРеквестов = СборкиГитЛаб();
	
	СводнаяТаблицаЗначенийХраненияДанных = СборкиСЗадачами(ПолученыеСборки, ТаблицаМерджРеквестов, ДанныеПроекта);
	СводнаяТаблицаХраненияДанных.Загрузить(СводнаяТаблицаЗначенийХраненияДанных);
	
	УникальныеЗадачи = СводнаяТаблицаЗначенийХраненияДанных.Скопировать();
	УникальныеЗадачи.Свернуть("Задача");
	
	Задачи.Загрузить(УникальныеЗадачи);
	
	ЗаполнитьТаблицуАпрувов(ТаблицаМерджРеквестов);
	ЗаполнитьДиаграммы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДиаграммы()
	
	МассивЗадач = Задачи.Выгрузить().ВыгрузитьКолонку("Задача");
	
	ДанныеДиаграммыКоличестваЗадачПоИсполнителям = ДанныеДиаграммыКоличестваЗадачПоИсполнителям(МассивЗадач);
	СформироватьДиаграмму(Диаграмма_КоличествоЗадачНаИсполнителях, ТипДиаграммы.Гистограмма,
		ДанныеДиаграммыКоличестваЗадачПоИсполнителям);
	
	ДанныеДиаграммыРискиПриОбновленииПоКритичностиОбъектов = ДанныеДиаграммыРискиПриОбновленииПоКритичностиОбъектов(МассивЗадач);
	СформироватьДиаграмму(Диаграмма_РискиПриОбновленииПоВажностиОбъектов, ТипДиаграммы.Круговая,
		ДанныеДиаграммыРискиПриОбновленииПоКритичностиОбъектов);

	
	ДанныеДиаграммыРискиПриОбновленииПоПроцессам = ДанныеДиаграммыРискиПриОбновленииПоПроцессам(МассивЗадач);
	СформироватьДиаграмму(Диаграмма_РискиПриОбновленииПроцессы, ТипДиаграммы.Гистограмма,
		ДанныеДиаграммыРискиПриОбновленииПоПроцессам);	
	
КонецПроцедуры

&НаСервере
Функция ДанныеДиаграммыРискиПриОбновленииПоКритичностиОбъектов(МассивЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	1 КАК Значение,
	               |	""Критично"" КАК Серия
	               |ПОМЕСТИТЬ втДанные
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Ссылка В(&МассивЗадач)
	               |	И Задачи.ДорабатыватьКонфигурацию
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	""Критично""
	               |ИЗ
	               |	Справочник.Задачи.ВнешниеФайлы КАК ЗадачиВнешниеФайлы
	               |ГДЕ
	               |	ЗадачиВнешниеФайлы.Обработка.Критичный
	               |	И ЗадачиВнешниеФайлы.Ссылка В(&МассивЗадач)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	""Не критично""
	               |ИЗ
	               |	Справочник.Задачи.ВнешниеФайлы КАК ЗадачиВнешниеФайлы
	               |ГДЕ
	               |	НЕ ЗадачиВнешниеФайлы.Обработка.Критичный
	               |	И ЗадачиВнешниеФайлы.Ссылка В (&МассивЗадач)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СУММА(втДанные.Значение) КАК Значение,
	               |	втДанные.Серия КАК Серия
	               |ИЗ
	               |	втДанные КАК втДанные
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втДанные.Серия";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДанныеДиаграммыКоличестваЗадачПоИсполнителям(МассивЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Ответственный КАК Серия,
	               |	СУММА(1) КАК Значение
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Ссылка В(&МассивЗадач)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Ответственный";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ДанныеДиаграммыРискиПриОбновленииПоПроцессам(МассивЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(1) КАК Значение,
	               |	ЗадачиКасаемыеПроцессы.Процесс КАК Серия
	               |ИЗ
	               |	Справочник.Задачи.КасаемыеПроцессы КАК ЗадачиКасаемыеПроцессы
	               |ГДЕ
	               |	ЗадачиКасаемыеПроцессы.Ссылка В(&МассивЗадач)
	               |	И ЗадачиКасаемыеПроцессы.Процесс <> ""smoke""
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЗадачиКасаемыеПроцессы.Процесс";
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуАпрувов(ТаблицаМерджРеквестов)

	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	НастройкиПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Репозиторий, ИДПроектаРепозитория");
		
	НомераПолученныхМерджРеквестов = ТаблицаМерджРеквестов.ВыгрузитьКолонку("НомерМерджРеквеста");
	
	ТаблицаАпрувов.Очистить();
	
	Для Каждого НомерМерджРеквеста Из НомераПолученныхМерджРеквестов Цикл
		Апрувы = РаботаСGitLab.ДанныеАпруваМерджРеквеста(НастройкиПроекта.URLGitLab,
			НастройкиПользователя.ТокенGitLab,
			НомерМерджРеквеста,
			НастройкиПроекта.ИДПроектаGitLab
		);
		
		СтрокаТаблицаАпрувов = ТаблицаАпрувов.Добавить();
		СтрокаТаблицаАпрувов.НомерМерджРеквеста = НомерМерджРеквеста;
		
		Для Каждого ПользовательАпрув Из Апрувы["approved_by"] Цикл
			СтрокаТаблицаАпрувов.Пользователь.Добавить(ПользовательАпрув["user"]["name"]);
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СборкиГитЛаб()

	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	НастройкиПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Репозиторий, ИДПроектаРепозитория");
	
	ТаблицаМерджРеквестов = РаботаСGitLab.ТаблицаМерджРеквестовПоПроекту(НастройкиПользователя,
		НастройкиПроекта, Период.ДатаНачала, Период.ДатаОкончания);
	
	Возврат ТаблицаМерджРеквестов;

КонецФункции

&НаСервере
Процедура СборкиДженкинс(ДанныеПроекта, ПолученыеСборки)
	
	Перем ДополнительныеПараметры, Ответ;
	
	ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, 
		"ИмяПользователяJenkins, ПарольJenkins, URLJenkins, ИмяJobJenkins");
	
	ДополнительныеПараметры = ЗапускПриложенияЧерезJENKINS.НовыйДополнительныеПараметрыЗапроса();
	УстановитьАвторизациюJENKINS(ДополнительныеПараметры, ДанныеПроекта);
	
	Ответ = КоннекторHTTP.GetJson(URLКДаннымСборки(ДанныеПроекта),, ДополнительныеПараметры);
	ПолученыеСборки = НовыйСборки();
	ЗаполнитьДанныеСборокПоВнешнимДанным(ПолученыеСборки, Ответ);

КонецПроцедуры

&НаСервере
Процедура УстановитьАвторизациюJENKINS(ДополнительныеПараметры, ДанныеПроекта)
	
	ЗапускПриложенияЧерезJENKINS.ЗаполнитьДополнительныеПараметрыЗапроса(ДополнительныеПараметры, ДанныеПроекта);
	
КонецПроцедуры

&НаСервере
Функция URLКДаннымСборки(ДанныеПроекта)

	ЗапросПоСборкам= "api/json/?tree=builds[building,timestamp,result,url,number,actions[parameters[name,value]]]{0,20}";
	
	Возврат СтрШаблон("%1/job/%2/%3", ДанныеПроекта.URLJenkins, ДанныеПроекта.ИмяJobJenkins, ЗапросПоСборкам);
	
КонецФункции

&НаСервере
Функция СборкиСЗадачами(ПолученыеСборки, МерджРеквесты, ДанныеПроекта)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица1.СборкаПрошла КАК СборкаПрошла,
	|	Таблица1.СтатусСборки КАК СтатусСборки,
	|	Таблица1.ДатаСборки КАК ДатаСборки,
	|	Таблица1.НомерСборки КАК НомерСборки,
	|	Таблица1.URL КАК Сборка,
	|	Таблица1.НомерЗадачи КАК НомерЗадачи
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&Сборки КАК Таблица1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МерджРеквесты.Задача КАК Задача,
	|	МерджРеквесты.СсылкаМерджРеквест КАК СсылкаМерджРеквест,
	|	МерджРеквесты.НомерМерджРеквеста КАК НомерМерджРеквеста,	
	|	МерджРеквесты.СтатусМерджРеквеста КАК СтатусМерджРеквеста
	|ПОМЕСТИТЬ втМерджРеквесты
	|ИЗ
	|	&МерджРеквесты КАК МерджРеквесты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.СборкаПрошла КАК СборкаПрошла,
	|	ВременнаяТаблица.СтатусСборки КАК СтатусСборки,
	|	ВременнаяТаблица.ДатаСборки КАК ДатаСборки,
	|	ВременнаяТаблица.НомерСборки КАК НомерСборки,
	|	ВременнаяТаблица.Сборка КАК Сборка,
	|	ВременнаяТаблица.НомерЗадачи КАК НомерЗадачи,
	|	&URLJenkins + ""/job/"" + &ИмяJobJenkins + ""/"" + ВременнаяТаблица.НомерСборки + ""/allure"" КАК Allure,
	|	ВЫБОР
	|		КОГДА ВременнаяТаблица.СтатусСборки = ""SUCCESS""
	|			ТОГДА 6
	|		КОГДА ВременнаяТаблица.СтатусСборки = ""FAILURE""
	|			ТОГДА 5
	|		КОГДА ВременнаяТаблица.СтатусСборки = ""UNSTABLE""
	|			ТОГДА 7
	|		КОГДА ВременнаяТаблица.СтатусСборки = ""ABORTED""
	|			ТОГДА 9
	|		КОГДА ВременнаяТаблица.СтатусСборки = ""SUCCESS_ANIME""
	|			ТОГДА 1
	|	КОНЕЦ КАК Картинка,
	|	Задачи.Ссылка КАК Задача
	|ПОМЕСТИТЬ втАллюр
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Задачи КАК Задачи
	|		ПО ВременнаяТаблица.НомерЗадачи = Задачи.НомерЗадачи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАллюр.СборкаПрошла КАК СборкаПрошла,
	|	втАллюр.СтатусСборки КАК СтатусСборки,
	|	втАллюр.ДатаСборки КАК ДатаСборки,
	|	втАллюр.НомерСборки КАК НомерСборки,
	|	втАллюр.Сборка КАК Сборка,
	|	втАллюр.НомерЗадачи КАК НомерЗадачи,
	|	втАллюр.Allure КАК Allure,
	|	втАллюр.Картинка КАК Картинка,
	|	ЕстьNull(втАллюр.Задача, втМерджРеквесты.Задача) КАК Задача,
	|	втМерджРеквесты.СсылкаМерджРеквест КАК СсылкаМерджРеквест,
	|	втМерджРеквесты.НомерМерджРеквеста КАК НомерМерджРеквеста,	
	|	втМерджРеквесты.СтатусМерджРеквеста КАК СтатусМерджРеквеста
	|ИЗ
	|	втАллюр КАК втАллюр
	|		ПОЛНОЕ СОЕДИНЕНИЕ втМерджРеквесты КАК втМерджРеквесты
	|		ПО втАллюр.Задача = втМерджРеквесты.Задача";
	
	Запрос.УстановитьПараметр("ИмяJobJenkins", ДанныеПроекта.ИмяJobJenkins);
	Запрос.УстановитьПараметр("URLJenkins", ДанныеПроекта.URLJenkins);
	Запрос.УстановитьПараметр("Сборки", ПолученыеСборки);
	Запрос.УстановитьПараметр("МерджРеквесты", МерджРеквесты);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СоответствиеРезультатаИIDИконки()

	СоответствиеРезультатаИIDИконки = Новый Соответствие;
	
	СоответствиеРезультатаИIDИконки.Вставить("SUCCESS", 		6);
	СоответствиеРезультатаИIDИконки.Вставить("FAILURE", 		5);
	СоответствиеРезультатаИIDИконки.Вставить("UNSTABLE", 		7);
	СоответствиеРезультатаИIDИконки.Вставить("ABORTED", 		9);
	СоответствиеРезультатаИIDИконки.Вставить("SUCCESS_ANIME", 	1);
	
	Возврат СоответствиеРезультатаИIDИконки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеСборокПоВнешнимДанным(ПолученыеСборки, Ответ)
	
	ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = Период.ДатаОкончания;
	
	КлассПараметрыДействий =  "hudson.model.ParametersAction";
	НачалоЗадачи = "*/feature/";
	
	Для Каждого Сборка Из Ответ["builds"] Цикл
		
		ДатаСборки = TimestampВДату(Лев(Сборка["timestamp"], 13)); //приведение к нормальной корректной дате
		Если ДатаСборки > ДатаОкончания Тогда
			Продолжить;
		ИначеЕсли ДатаСборки < ДатаНачала Тогда
			Прервать;
		КонецЕсли;
		
		НоваяСтрокаСборки = ПолученыеСборки.Добавить();
		Для Каждого Действие Из Сборка["actions"] Цикл
			Если Действие["_class"] = КлассПараметрыДействий Тогда
				Для Каждого Пареметр Из Действие["parameters"] Цикл
					Если Пареметр["name"] = "BRANCHE_NAME" Тогда
						Задача = СтрЗаменить(Пареметр["value"], НачалоЗадачи, "");
						// Привидение значения: 127057_127626, оставляем только 127626
						МассивЗадачи = СтрРазделить(Задача, "_", Ложь);
						Если МассивЗадачи.Количество() >1 Тогда
							НоваяСтрокаСборки.НомерЗадачи = МассивЗадачи[1];
						Иначе
							НоваяСтрокаСборки.НомерЗадачи = Задача;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрокаСборки.СборкаПрошла = Сборка["building"];
		НоваяСтрокаСборки.СтатусСборки = Сборка["result"];
		НоваяСтрокаСборки.ДатаСборки = ДатаСборки;
		НоваяСтрокаСборки.URL = Сборка["url"];
		НоваяСтрокаСборки.НомерСборки = Сборка["number"];
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Функция TimestampВДату(Дата)
	
	Попытка
		Возврат Дата("19700101") + Число(Дата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция НовыйСборки()
	
	ОписаниеЗадача = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25));
	ОписаниеURL = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(1024));
	ОписаниеБулева = Новый ОписаниеТипов("Булево");
	ОписаниеДаты = Новый ОписаниеТипов("Дата");
	
	ПолученныеСборки = Новый ТаблицаЗначений;
	ПолученныеСборки.Колонки.Добавить("НомерЗадачи", ОписаниеЗадача);
	ПолученныеСборки.Колонки.Добавить("СборкаПрошла", ОписаниеБулева);
	ПолученныеСборки.Колонки.Добавить("СтатусСборки", ОписаниеЗадача);
	ПолученныеСборки.Колонки.Добавить("ДатаСборки", ОписаниеДаты);
	ПолученныеСборки.Колонки.Добавить("URL", ОписаниеURL);
	ПолученныеСборки.Колонки.Добавить("НомерСборки", ОписаниеЗадача);
	
	Возврат ПолученныеСборки;
	
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура AllureНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СборкиAllureНажатие(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СборкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сборки.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент = Элементы.СборкиНомерСборки Тогда
		ЗначениеПоля = ТекущиеДанные.НомерСборки;
		
		ПараметрыОповещения = Новый Структура("ВыбранноеПоле", "СсылкиНаСборки");
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти", ЭтаФорма, ПараметрыОповещения);
		
		СписокСсылок = Новый СписокЗначений;
		СписокСсылок.Добавить(ТекущиеДанные.Сборка, "Адрес на сборку в Jenkins", , БиблиотекаКартинок.Jenkins);
		СписокСсылок.Добавить(ТекущиеДанные.Allure, "Адрес на Allure ", , БиблиотекаКартинок.Allure);
		ПоказатьВыборИзМеню(Оповещение, СписокСсылок, Элемент.ТекущийЭлемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаТабличнойЧасти(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(Результат.Значение);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораИзВыпадающегоСпискаОдобрили(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.MergeRequest.ТекущиеДанные;	
	ОдобритьЗаявкуНаСлияние(ТекущиеДанные.НомерМерджРеквеста);

КонецПроцедуры

&НаСервере
Процедура ОдобритьЗаявкуНаСлияние(ВыделенныйНомерМерджРеквеста)
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	НастройкиПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Репозиторий, ИДПроектаРепозитория");	

	РаботаСGitLab.ОдобритьЗаявкуНаСлияние(НастройкиПроекта.URLGitLab,
		НастройкиПользователя.ТокенGitLab,
		ВыделенныйНомерМерджРеквеста,
		НастройкиПроекта.ИДПроектаGitLab);
		
	ПолучитьСборкиИзВнешнихДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура СборкиAllureОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницу(Направление)
	
	ИмяТекущейСтраницы = Элементы.ГруппаСлайдыГрафиков.ТекущаяСтраница.Имя;
	РазборИмени = СтрРазделить(ИмяТекущейСтраницы, "_");
	
	Если Направление = "Следующая" Тогда
		РазборИмени[1] = Число(РазборИмени[1]) + 1;
	Иначе
		РазборИмени[1] = Число(РазборИмени[1]) - 1;
	КонецЕсли;
	
	ИмяСледующейСтраницы = СтрСоединить(РазборИмени, "_");
	Если Элементы.Найти(ИмяСледующейСтраницы) = Неопределено Тогда
		ИмяСледующейСтраницы = "Графики_1";	
	КонецЕсли;
	
	СледующаяСтраница = Элементы.Найти(ИмяСледующейСтраницы);
	
	Элементы.ГруппаСлайдыГрафиков.ТекущаяСтраница = СледующаяСтраница;	
	
КонецПроцедуры

&НаСервере
Процедура РазобратьОтчетAllure(ДанныеОтчета, ДанныеДляДиаграммы)
	
	СтатусыТестов = СтатусыТестов();
	Для каждого Тест Из ДанныеОтчета["children"] Цикл
		ДанныеДляДиаграммы.КоличествоТестовыхСлучаев = ДанныеДляДиаграммы.КоличествоТестовыхСлучаев + 1;
		ДанныеДляДиаграммы.Вставить(СтатусыТестов[Тест["status"]], ДанныеДляДиаграммы[СтатусыТестов[Тест["status"]]] + 1);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СтатусыТестов()
	
	Результат = Новый Соответствие();
	Результат.Вставить("passed", "КоличествоУспешных");
	Результат.Вставить("failed", "КоличествоОшибок");
	Результат.Вставить("skipped", "КоличествоПропущенных");
	Результат.Вставить("broken", "КоличествоПровалов");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НовыйДанныеДляДиаграммы()

	Результат = Новый Структура();
	Результат.Вставить("КоличествоТестовыхСлучаев", 0);
	Результат.Вставить("КоличествоПровалов", 0);
	Результат.Вставить("КоличествоОшибок", 0);
	Результат.Вставить("КоличествоПропущенных", 0);
	Результат.Вставить("КоличествоУспешных", 0);

	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗначениеТекстовогоФайла(ПутьКФайлу)
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлу, КодировкаТекста.UTF8);
	Значение = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Значение;

КонецФункции

&НаСервере
Процедура СформироватьДиаграммуЗадачПоИсполнителям(ДанныеДиаграммы)
	
	Диаграмма_КоличествоЗадачНаИсполнителях.Очистить();
	
	Диаграмма_КоличествоЗадачНаИсполнителях.ТипДиаграммы = ТипДиаграммы.Гистограмма;
    ТочкаДиаграммы = Диаграмма_КоличествоЗадачНаИсполнителях.УстановитьТочку(0);
	
	Для Каждого ИнформацияДиаграммы Из ДанныеДиаграммы Цикл
		СерияДиаграммы = Диаграмма_КоличествоЗадачНаИсполнителях.УстановитьСерию(ИнформацияДиаграммы.Серия);
		
		Диаграмма_КоличествоЗадачНаИсполнителях.УстановитьЗначение(ТочкаДиаграммы,
			СерияДиаграммы, ИнформацияДиаграммы.Значение);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДиаграмму(РеквизитДиаграмма, НепобходимыйТипДиаграммы, ДанныеДиаграммы)
	
	РеквизитДиаграмма.Очистить();
	
	РеквизитДиаграмма.ТипДиаграммы = НепобходимыйТипДиаграммы;
    ТочкаДиаграммы = РеквизитДиаграмма.УстановитьТочку(0);
	
	Для Каждого ИнформацияДиаграммы Из ДанныеДиаграммы Цикл
		СерияДиаграммы = РеквизитДиаграмма.УстановитьСерию(ИнформацияДиаграммы.Серия);
		
		РеквизитДиаграмма.УстановитьЗначение(ТочкаДиаграммы,
			СерияДиаграммы, ИнформацияДиаграммы.Значение);
	КонецЦикла
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДиаграммуСтатусы(ДанныеТестов)

	Если ДанныеТестов.КоличествоТестовыхСлучаев = 0 Тогда
		Возврат;	
	КонецЕсли;
	КоличествоТестовыхСлучаев = ДанныеТестов.КоличествоТестовыхСлучаев;
	КоличествоПровалов = ДанныеТестов.КоличествоПровалов/КоличествоТестовыхСлучаев*100;
	КоличествоОшибок = ДанныеТестов.КоличествоОшибок/КоличествоТестовыхСлучаев*100;
	КоличествоПропущенных = ДанныеТестов.КоличествоПропущенных/КоличествоТестовыхСлучаев*100;
	КоличествоУспешных = ДанныеТестов.КоличествоУспешных/КоличествоТестовыхСлучаев*100;
	
	Диаграмма_Статус.Очистить();
	
	ВидГрафика_Статус = "Круговая";
	
	Диаграмма_Статус.ТипДиаграммы = ТипДиаграммы[ВидГрафика_Статус];
	СерияПадения = Диаграмма_Статус.УстановитьСерию("Падения");
	СерияОшибки = Диаграмма_Статус.УстановитьСерию("Ошибки");
	СерияПропуски = Диаграмма_Статус.УстановитьСерию("Пропуски");
	СерияУспешно = Диаграмма_Статус.УстановитьСерию("Успешно");
	
	ТочкаДиаграммы = Диаграмма_Статус.УстановитьТочку(0);
	
	Диаграмма_Статус.УстановитьЗначение(ТочкаДиаграммы,СерияПадения, КоличествоПровалов);
	Диаграмма_Статус.УстановитьЗначение(ТочкаДиаграммы,СерияОшибки, КоличествоОшибок);
	Диаграмма_Статус.УстановитьЗначение(ТочкаДиаграммы,СерияПропуски, КоличествоПропущенных);
	Диаграмма_Статус.УстановитьЗначение(ТочкаДиаграммы,СерияУспешно, КоличествоУспешных);
	
	СерияПадения.Цвет = новый Цвет(255,50,50);
	СерияОшибки.Цвет = новый Цвет(255,165,15);
	СерияУспешно.Цвет = новый Цвет(50,195,50);
	СерияПропуски.Цвет = новый Цвет(195,195,195);
	
	
	Диаграмма_Статус.ВидПодписей=ВидПодписейКДиаграмме.СерияПроцент;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокИзмененыхОбъектов() Экспорт
		
	Для Каждого НомерМерджРеквеста Из НомераМерджРеквестов Цикл
		ЗаполнитьСписокИзмененыхОбъектовНаСервере(НомерМерджРеквеста.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИзмененыхОбъектовНаСервере(НомерМерджРеквеста)
	
	НастройкиПользователя = Справочники.НастройкиПользователей.НастройкиТекущегоПользователя();
	НастройкиПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Репозиторий, ИДПроектаРепозитория");
	
	ТаблицаИзмененныхОбъектов = РаботаСGitLab.ИзмененияПоМерджРеквесту(НастройкиПроекта.URLGitLab,
		НастройкиПроекта.ИДПроектаGitLab,
		НомерМерджРеквеста,
		НастройкиПользователя.ТокенGitLab
	);
	
	Для Каждого СтрокаТаблицыЗначенийИзмененныеОбъекты Из ТаблицаИзмененныхОбъектов Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Объект", СтрокаТаблицыЗначенийИзмененныеОбъекты.Объект);
		
		СтрокиИзмененныеОбъекты = ИзмененыеОбъекты.НайтиСтроки(ПараметрыОтбора);
		
		Если СтрокиИзмененныеОбъекты.Количество() = 0 Тогда
			СтрокаИзмененныеОбъекты = ИзмененыеОбъекты.Добавить();
		Иначе
			СтрокаИзмененныеОбъекты = СтрокиИзмененныеОбъекты[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаИзмененныеОбъекты, СтрокаТаблицыЗначенийИзмененныеОбъекты);
		СтрокаИзмененныеОбъекты.Рейтинг = СтрокаИзмененныеОбъекты.Рейтинг + 1;
		
	КонецЦикла;

	ИзмененыеОбъекты.Сортировать("Рейтинг УБЫВ");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМерджРеквесты(МассивВыделенныхЗадач)
	
	СводнаяТаблица = СводнаяТаблицаХраненияДанных.Выгрузить();
	ТаблицаДанныхМерджРеквестовИзСводной = ТаблицаДанныхМерджРеквестовИзСводной(СводнаяТаблица, МассивВыделенныхЗадач);
	
	Для Каждого СтрокаМерджРеквестовИзСводной Из ТаблицаДанныхМерджРеквестовИзСводной Цикл
		
		СтрокаMergeRequest = MergeRequest.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаMergeRequest, СтрокаМерджРеквестовИзСводной);
		СтрокаMergeRequest.Одобрили = ПользователиИзТаблицыАпрувов(СтрокаMergeRequest.НомерМерджРеквеста);
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ПользователиИзТаблицыАпрувов(НомерМерджРеквеста)
	
	ПользователиАпрува = Новый СписокЗначений;
	
	ТаблицаЗначенийАпрувов = ТаблицаАпрувов.Выгрузить();
	СтрокаАпрува = ТаблицаЗначенийАпрувов.Найти(НомерМерджРеквеста, "НомерМерджРеквеста");
	
	Если СтрокаАпрува = Неопределено Тогда
		Возврат ПользователиАпрува;
	КонецЕсли;
	
	Возврат СтрокаАпрува.Пользователь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТаблицаДанныхМерджРеквестовИзСводной(СводнаяТаблица, МассивВыделенныхЗадач)
	
    Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СводнаяТаблица.Задача КАК Задача,
	               |	СводнаяТаблица.СсылкаМерджРеквест КАК СсылкаМерджРеквест,
	               |	СводнаяТаблица.НомерМерджРеквеста КАК НомерМерджРеквеста,
	               |	СводнаяТаблица.СтатусМерджРеквеста КАК СтатусМерджРеквеста
	               |ПОМЕСТИТЬ втСводнаяТаблица
	               |ИЗ
	               |	&СводнаяТаблица КАК СводнаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСводнаяТаблица.Задача КАК Задача,
	               |	Выразить(втСводнаяТаблица.СсылкаМерджРеквест Как Строка (1000)) КАК СсылкаМерджРеквест,
	               |	Выразить(втСводнаяТаблица.НомерМерджРеквеста Как Строка(1000)) КАК НомерМерджРеквеста,
	               |	Выразить(втСводнаяТаблица.СтатусМерджРеквеста Как Строка(1000)) КАК СтатусМерджРеквеста
	               |ИЗ
	               |	втСводнаяТаблица КАК втСводнаяТаблица
	               |ГДЕ
	               |	втСводнаяТаблица.Задача В(&МассивВыделенныхЗадач)
	               |	И (ВЫРАЗИТЬ(втСводнаяТаблица.СсылкаМерджРеквест КАК СТРОКА(100))) <> """"
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Выразить(втСводнаяТаблица.НомерМерджРеквеста Как Строка(1000)),
	               |	Выразить(втСводнаяТаблица.СтатусМерджРеквеста Как Строка(1000)),
	               |	Выразить(втСводнаяТаблица.СсылкаМерджРеквест Как Строка (1000)),
	               |	втСводнаяТаблица.Задача";
	
	Запрос.УстановитьПараметр("СводнаяТаблица", СводнаяТаблица);
	Запрос.УстановитьПараметр("МассивВыделенныхЗадач", МассивВыделенныхЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСборки(МассивВыделенныхЗадач)
	
	СводнаяТаблица = СводнаяТаблицаХраненияДанных.Выгрузить();
	ТаблицаДанныхСборокИзСводной = ТаблицаДанныхСборокИзСводной(СводнаяТаблица, МассивВыделенныхЗадач);
	Сборки.Загрузить(ТаблицаДанныхСборокИзСводной);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаДанныхСборокИзСводной(СводнаяТаблица, МассивВыделенныхЗадач)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СводнаяТаблица.Задача КАК Задача,
	|	СводнаяТаблица.СтатусСборки КАК СтатусСборки,
	|	СводнаяТаблица.ДатаСборки КАК ДатаСборки,
	|	СводнаяТаблица.НомерСборки КАК НомерСборки,
	|	СводнаяТаблица.Allure КАК Allure,
	|	СводнаяТаблица.Сборка КАК Сборка,
	|	СводнаяТаблица.Картинка КАК Картинка
	|ПОМЕСТИТЬ втСводнаяТаблица
	|ИЗ
	|	&СводнаяТаблица КАК СводнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСводнаяТаблица.Задача КАК Задача,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.СтатусСборки КАК СТРОКА(1000)) КАК СтатусСборки,
	|	втСводнаяТаблица.ДатаСборки КАК ДатаСборки,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.НомерСборки КАК СТРОКА(1000)) КАК НомерСборки,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Allure КАК СТРОКА(1000)) КАК Allure,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Сборка КАК СТРОКА(1000)) КАК Сборка,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Картинка Как Строка(1000)) КАК Картинка
	|ИЗ
	|	втСводнаяТаблица КАК втСводнаяТаблица
	|ГДЕ
	|	втСводнаяТаблица.Задача В(&МассивВыделенныхЗадач)
	|	И (ВЫРАЗИТЬ(втСводнаяТаблица.Allure КАК СТРОКА(100))) <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	втСводнаяТаблица.ДатаСборки,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.НомерСборки КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(втСводнаяТаблица.СтатусСборки КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Сборка КАК СТРОКА(1000)),
	|	втСводнаяТаблица.Задача,
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Allure КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(втСводнаяТаблица.Картинка КАК СТРОКА(1000))";
	
	Запрос.УстановитьПараметр("СводнаяТаблица", СводнаяТаблица);
	Запрос.УстановитьПараметр("МассивВыделенныхЗадач", МассивВыделенныхЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	СводнаяТаблицаХраненияДанных.Очистить();
	ОчиститьДанные(Истина);
	
КонецПроцедуры

#КонецОбласти
