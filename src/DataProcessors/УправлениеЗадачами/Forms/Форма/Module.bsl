// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПравоДоступаКМенеджеруРелизов() Тогда
		Элементы.МенеджерРелизов.Видимость = Истина;
		Элементы.МенеджерРелизов.Доступность = Истина;
	КонецЕсли;
	ИнициализироватьЗначенияФормы(Истина);
	ДанныеСохраненныхЛогов = НовыйДанныеСохраненныхЛогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПриИзмененииБазы(Элемент = Неопределено)

	ПриИзмененииБазыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	
	ПриИзмененииБазы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗавершенныеЗадачиПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаКлиенте
Процедура АдресМерджРеквестаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(АдресМерджРеквеста);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресAllureНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(АдресAllure);

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЧужиеЗадачиПриИзменении(Элемент)
		ОбновитьСписокЗадач();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура VSCode(Команда)
	
	Данные = ПутьРепозиторию();
	КомандаСистемы(СтрШаблон("code %1", Данные.КаталогБазы));

КонецПроцедуры

&НаКлиенте
Процедура НоваяЗадачаХотфикс(Команда)
	
	ПодключитьОбработчикОжидания("ИнициализироватьЗначенияФормыНаКлиенте", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьЛоги(Команда)
	ПоместитьТекстВБуфераОбмена();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормСохранить("УправлениеЗадачами", 
	     "УправлениеЗадачами", 
	     СохраняемыеНастройки());

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ИнициализироватьЗначенияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенеджерРелизов(Команда)
	
	Если Не ПравоДоступаКМенеджеруРелизов() Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.МенеджерРелизов.Форма.ФормаМеню");
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НоваяЗадача(Команда)
	
	// Список:
	списокКнопки = Новый СписокЗначений(); //список для меню
	списокКнопки.Добавить("НоваяЗадача", "Новая задача",, БиблиотекаКартинок.УровеньДоступаСоздание);
	списокКнопки.Добавить("ХотфиксКЗадаче", "HotFix к задаче",, БиблиотекаКартинок.ДобавитьРодительский);
	списокКнопки.Добавить("НоваяЗадачаХотфикс", "HotFix новая задача",, БиблиотекаКартинок.Адрес);
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораИзМеню", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(Оповещение, списокКнопки, Элементы.НоваяЗадача);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеВыбораИзМеню(ВыбранныйЭлемент, Параметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран вариант создания задачи!'"));
		Возврат;
	КонецЕсли;
	Параметры = Новый Структура();
	
	
	Если ВыбранныйЭлемент.Значение = "ХотфиксКЗадаче" Тогда
		ОписаниеВыбора = Новый ОписаниеОповещения("ОбработатьВыборЗадачи", ЭтаФорма, );
		ОткрытьФорму("Справочник.Задачи.ФормаВыбора",,,,,, ОписаниеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		НомерНовойЗадачи = "";
		
		Обещание = ВвестиСтрокуАсинх(НомерНовойЗадачи, НСтр("ru = 'Введите номер задачи разработки'"));
		НомерНовойЗадачи = Ждать Обещание;
		Если Не ЗначениеЗаполнено(НомерНовойЗадачи) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Номер задачи не указан!'"));
			Возврат;
		КонецЕсли;
		ВариантСоздания = ВыбранныйЭлемент.Значение;
		НоваяЗадача = НоваяЗадачаНаСервере(ТекущийПользователь, База, НомерНовойЗадачи, ВариантСоздания);
		Если НоваяЗадача = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", НоваяЗадача);
		
		ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы,,,,,
			Новый ОписаниеОповещения("ПослеСозданияНовойЗадачи", ЭтотОбъект));
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ИнициализироватьЗначенияФормыНаКлиенте", 15, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборЗадачи(ВыбранныйЭлемент, Параметры) Экспорт

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗадачаХотфиксКЗадачеНаСервере(ВыбранныйЭлемент);
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = НСтр("ru='Задача создана, скоро появится в списке'");
	Сообщение.Сообщить();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьИзменения(Команда)

	Элементы.ГруппаПодробныеЛоги.ЦветТекстаЗаголовка = Новый Цвет();
	Элементы.СтатусВыполнения.ЦветТекста = WebЦвета.Зеленый;
	
	ТекстКоммита = "";
	
	Обещание = ВвестиСтрокуАсинх(ТекстКоммита, НСтр("ru='Введите текст коммита'"));
	ТекстКоммита = Ждать Обещание;
	ТекстКоммита = РаботаСGit.СтандартизацияТекста(ТекстКоммита);
	ТекстКоммита = СтрШаблон("%1 %2", НомерЗадачи(), ТекстКоммита);
	Если ЗначениеЗаполнено(ТекстКоммита) Тогда
		ЗафиксироватьИзмененияПослеВводаКоммита(ТекстКоммита);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Изменения не зафиксированы. Отсутствует коммит!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НомерЗадачи()
	//todo перенести в нужные места
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяЗадача, "НомерЗадачи");
КонецФункции

&НаСервереБезКонтекста
Функция ИмяВетки(ТекущаяЗадача)
	
	//todo перенести в нужные места
	ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущаяЗадача, "ИмяВетки, ПрефиксВетки");
	Возврат СтрШаблон("%1/%2", ДанныеЗадачи.ПрефиксВетки, ДанныеЗадачи.ИмяВетки);

КонецФункции

&НаКлиенте
Процедура ОткрытьТекущуюЗадачу(Команда)
	Если ЗначениеЗаполнено(ЭтотОбъект.ТекущаяЗадача) Тогда
		ПоказатьЗначение(,ЭтотОбъект.ТекущаяЗадача);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТекущийПользователь(Команда)
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеНастройкиПользователя.Настройка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбработки(Команда)	
	
	НастройкиБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	КаталогБилдаРепозитория = РаботаСGit.КаталогБилдаРепозитория(НастройкиБазы.КаталогБазыШара);
	Если КаталогБилдаРепозитория = "" Тогда
		ПоказатьПредупреждение(, "Не найден каталог обработок");
		Возврат;
	КонецЕсли;
	ЗапуститьПриложение(КаталогБилдаРепозитория);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаВетку(Команда)
	
	Если Элементы.Задачи.ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Получите и выберите задачу в списке!'"));
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаПодробныеЛоги.ЦветТекстаЗаголовка = Новый Цвет();
	Элементы.СтатусВыполнения.ЦветТекста =  WebЦвета.Зеленый;
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ПереходНаВеткуОповещение", ЭтаФорма, Неопределено);
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Перейти на ветку %1?'"), Элементы.Задачи.ТекущиеДанные.Задача);
	ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Переход на ветку для разработки'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаСлияние(Команда)

	Элементы.ГруппаПодробныеЛоги.ЦветТекстаЗаголовка = Новый Цвет();
	Элементы.СтатусВыполнения.ЦветТекста =  WebЦвета.Зеленый;
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат;
	КонецЕсли;
		
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("СоздатьЗаявкуНаСлияниеОповещение", ЭтаФорма, Неопределено);
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Создать заявку на слияние ветки %1?'"), ТекущаяЗадача);
	ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Заявка на слияние'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестирование(Команда)
	
	ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗапуститьТестированиеОповещение", ЭтаФорма, Неопределено);
	ТекстСообщения = СтрШаблон(НСтр("ru = 'Запустить тестирование ветки %1?'"), Элементы.Задачи.ТекущиеДанные.Задача);
	ПоказатьВопрос(ОбработчикОповещенияОЗакрытии, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Запуск тестирования'"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокПоЗадаче(Команда)
	УстановитьЗаголовокПоЗадачеНаСервере(База, ТекущаяЗадача);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Элементы.Задачи.ТекущиеДанные.Задача);
	
	ОткрытьФорму("Справочник.Задачи.Форма.ФормаЭлемента", ПараметрыФормы,
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	// ПоказатьЗначение(, Элементы.Задачи.ТекущиеДанные.Задача);
КонецПроцедуры

#КонецОбласти

#Область ЗапросыКСервису

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура ИнициализироватьЗначенияФормыНаКлиенте() Экспорт
	
	ИнициализироватьЗначенияФормы();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьЗначенияФормы(ПервыйЗапуск = Ложь) Экспорт
	
	Если ПервыйЗапуск Тогда
		ТекущийПользователь = Пользователи.АвторизованныйПользователь();
		Элементы.ТекущийПользователь.Заголовок = СтрШаблон("%1", ТекущийПользователь);
		ЗагруженныеНастройки = ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормЗагрузить("УправлениеЗадачами",
		    "УправлениеЗадачами",
		    Новый Структура);
		
		Если ЗагруженныеНастройки.Свойство("ОтображениеКраткихЛогов") Тогда
			Если ЗагруженныеНастройки.ОтображениеКраткихЛогов Тогда
				Элементы.ГруппаКраткиеЛоги.Показать();
			Иначе
				Элементы.ГруппаКраткиеЛоги.Скрыть();
			КонецЕсли;
		КонецЕсли;
		Если ЗагруженныеНастройки.Свойство("ОтображениеПодробныхЛогов") Тогда
			Если ЗагруженныеНастройки.ОтображениеПодробныхЛогов Тогда
				Элементы.ГруппаПодробныеЛоги.Показать();
			Иначе
				Элементы.ГруппаПодробныеЛоги.Скрыть();
			КонецЕсли;
		КонецЕсли;
		Если ЗагруженныеНастройки.Свойство("ПоказыватьЗавершенныеЗадачи") Тогда
			ПоказыватьЗавершенныеЗадачи = ЗагруженныеНастройки.ПоказыватьЗавершенныеЗадачи;
		КонецЕсли;
		Если ЗагруженныеНастройки.Свойство("Проект") Тогда
			Проект = ЗагруженныеНастройки.Проект;
		КонецЕсли;
		Если ЗагруженныеНастройки.Свойство("База") Тогда
			База = ЗагруженныеНастройки.База;
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
	КонецЕсли;
	ПроверкаБазыПоПравам(Ложь);
	ТекущаяЗадача();
	УстановитьДоступностьЭлементов(ТекущиеНастройкиПользователя);
	ОбновитьСписокЗадач();
	УстановитьВидимостьЭлементов();
	УстановитьПараметрыЗапуска();
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапуска()
	ОбщегоНазначенияУправлениеРазработкой.НастроитьПараметрыКомандЗапуска(База, ТекущийПользователь, ТекущаяЗадача);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ТекущаяЗадача.Заголовок = ОтобразитьТекущуюЗадачу(ТекущаяЗадача);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов(ТекущиеНастройкиПользователя = Неопределено)
	
	Если ВыполняетсяПакетноеЗадание Тогда
		ДоступностьЭлементов = Ложь;
	Иначе
		Если ТекущиеНастройкиПользователя = Неопределено Тогда
			ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
		КонецЕсли;
		ДоступностьЭлементов = ТекущиеНастройкиПользователя <> Неопределено;
		Если ДоступностьЭлементов Тогда
			ДоступностьЭлементов = РаботаСGit.РепозиторийСуществует(РаботаСGit.КаталогРепозиторияБазыШара(База), Ложь);
		КонецЕсли;
	КонецЕсли;
	Элементы.Обновить.Доступность                    = Не ВыполняетсяПакетноеЗадание;
	Элементы.СохранитьНастройки.Доступность          = Не ВыполняетсяПакетноеЗадание;
	Элементы.ПоказыватьЗавершенныеЗадачи.Доступность = Не ВыполняетсяПакетноеЗадание;
	Элементы.База.Доступность                        = Не ВыполняетсяПакетноеЗадание;
	Элементы.ПоказыватьЧужиеЗадачи.Доступность       = Не ВыполняетсяПакетноеЗадание;
	Элементы.Проект.Доступность                      = Не ВыполняетсяПакетноеЗадание;
	Элементы.УстановитьЗаголовокПоЗадаче.Доступность = Не ВыполняетсяПакетноеЗадание;
	Элементы.Задачи.Доступность                      = Не ВыполняетсяПакетноеЗадание;
	Если ПравоДоступаКМенеджеруРелизов() Тогда
		Элементы.МенеджерРелизов.Доступность         = Не ВыполняетсяПакетноеЗадание;
	КонецЕсли;
	Если ДоступностьЭлементов = Истина Тогда
		Элементы.ЗафиксироватьИзменения.Доступность = РазрешеноФиксироватьИзмененеия(База);
		Элементы.ПерейтиНаВетку.Доступность         = РазрешеноПереходитьНаВетку(База);
		Элементы.НоваяЗадача.Доступность            = РазрешеноСоздаватьНовуюЗадачу(База);
		Элементы.СоздатьЗаявкуНаСлияние.Доступность = Элементы.ЗафиксироватьИзменения.Доступность;
		Элементы.ЗапуститьТестирование.Доступность  = Элементы.ЗафиксироватьИзменения.Доступность;
	Иначе
		Элементы.ЗафиксироватьИзменения.Доступность = ДоступностьЭлементов;
		Элементы.ПерейтиНаВетку.Доступность         = ДоступностьЭлементов;
		Элементы.НоваяЗадача.Доступность            = ДоступностьЭлементов;
		Элементы.СоздатьЗаявкуНаСлияние.Доступность = ДоступностьЭлементов;
		Элементы.ЗапуститьТестирование.Доступность  = ДоступностьЭлементов;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтобразитьТекущуюЗадачу(Знач Задача)
	
	Если ЗначениеЗаполнено(Задача) Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Наименование, НомерЗадачи");
		Возврат СтрШаблон("[%1]  %2", РеквизитыЗадачи.НомерЗадачи, РеквизитыЗадачи.Наименование); 
	КонецЕсли;
	
	Возврат "Текущая задача не выбрана";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПроект(ОбъектБаза)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектБаза, "Владелец");
	
КонецФункции

&НаКлиенте
Процедура ЗапускПриложения(КомандаЗапуска, ДополнительнаяКоманда = "")
	
	Если Не ПроверитьЗаполнение() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не все обязательные реквизиты заполнены'"));
		Возврат;
	КонецЕсли;
		
	ВыполняетсяПакетноеЗадание = Истина;
	УстановитьДоступностьЭлементов();
	
	Если Не СохранитьЛоги Тогда
		//Логи          = "";
		//ЛогиПодробные = "";
	КонецЕсли;
	
	ЗапускПриложенияНаСервере(КомандаЗапуска, ДополнительнаяКоманда);
	ПодключитьОбработчикОжидания("ВыводЛогов", 2);
	
КонецПроцедуры

&НаСервере
Процедура ЗапускПриложенияНаСервере(КомандаЗапуска, ДополнительнаяКоманда = "")
	
	Индикатор = 0;
	Элементы.СтатусВыполнения.Заголовок = СтрШаблон(НСтр("ru = 'Начало - %1'"), БазовыйТекстСообщения);
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазы(База);

	ПараметрыЗапуска = СтратегияЗапускаСкриптов.ПодготовкаПараметровИЗапускПриложения(База, КомандаЗапуска,, ДополнительнаяКоманда);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускПриложенияJenkins(КомандаЗапуска)
	
	Если Не ПроверитьЗаполнение() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не все обязательные реквизиты заполнены'"));
		Возврат;
	КонецЕсли;
		
	ВыполняетсяПакетноеЗадание = Истина;
	УстановитьДоступностьЭлементов();
	Логи          = "";
	ЛогиПодробные = "";
	
	ЗапускПриложенияJenkinsНаСервере(КомандаЗапуска);
	ПодключитьОбработчикОжидания("ВыводЛогов", 2);
	
КонецПроцедуры

&НаСервере
Процедура ЗапускПриложенияJenkinsНаСервере(КомандаЗапуска, Фоново = Ложь)
	
	Если Не Фоново Тогда
		Индикатор = 0;
		Элементы.СтатусВыполнения.Заголовок = СтрШаблон(НСтр("ru = 'Начало - %1'"), БазовыйТекстСообщения);
	КонецЕсли;
	
	ПараметрыЗапуска = ЗапускПриложенияЧерезJENKINS.ПодготовкаПараметровИЗапускПриложения(База, ТекущаяЗадача, КомандаЗапуска);
	
КонецПроцедуры

&НаСервере
Функция ВыводЛоговНаСервере()
	
	ДанныеЛогов = СтратегияЗапускаСкриптов.ДанныеЛоговБезОжидания(ПараметрыЗапуска);
	
	ЛогиПодробные = СтрШаблон("%1%2%3", ДанныеЛогов.ПодробныйЛогСтрокой,
		Символы.ПС,
		ДанныеСохраненныхЛогов.ЛогиПодробные
	);

	Логи = СтрШаблон("%1%2%3", ДанныеЛогов.КраткийЛогСтрокой,
		Символы.ПС,
		ДанныеСохраненныхЛогов.Логи
	);	

	Индикатор     = ДанныеЛогов.Индикатор;
	
	Элементы.СтатусВыполнения.Заголовок = ДанныеЛогов.СтатусВыполнения;
	Если ДанныеЛогов.ЕстьОшибки Тогда
		Элементы.ГруппаПодробныеЛоги.ЦветТекстаЗаголовка = WebЦвета.Красный;
		Элементы.СтатусВыполнения.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
	Если Не ДанныеЛогов.Выполнено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЛогов.АдресМерджРеквеста) Тогда
		АдресМерджРеквеста = ДанныеЛогов.АдресМерджРеквеста;
		Элементы.АдресМерджРеквеста.Видимость = Истина;
		Комментарий = НСтр("ru='Создан Мердж реквест'");
		
		РаботаСBitrix.СоздатьЗадачуНаРевьюКЗадаче(ТекущаяЗадача);
		ДобавитьКомментарийКЗадаче(ТекущаяЗадача, СтрШаблон("%1%2%3", Комментарий, Символы.ПС, АдресМерджРеквеста));
		Справочники.Задачи.УстановитьАдресМерджРеквеста(ТекущаяЗадача, АдресМерджРеквеста);
	Иначе
		Элементы.АдресМерджРеквеста.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапуска.НомерJob) Тогда
		АдресAllure = РаботаСJenkins.СсылкаAllure(
			ПараметрыЗапуска.URLJenkins,
			ПараметрыЗапуска.ИмяJobJenkins,
			ПараметрыЗапуска.НомерJob
		);
		
		Элементы.АдресAllure.Видимость = Истина;
	Иначе
		Элементы.АдресAllure.Видимость = Ложь;
	КонецЕсли;
	
	ДанныеЛогов.СтатусВыполнения = СтрШаблон(НСтр("ru = 'Завешено - %1'"), БазовыйТекстСообщения);
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыводЛогов() Экспорт

	Если ВыводЛоговНаСервере() Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВременныеФайлы();
	ОтключитьОбработчикОжидания("ВыводЛогов");
	Индикатор = 100;
	Элементы.СтатусВыполнения.Заголовок = ДанныеЛогов.СтатусВыполнения;
	ВыполняетсяПакетноеЗадание = Ложь;
	ИнициализироватьЗначенияФормы();
	
	Если ЗначениеЗаполнено(ОбработчикВыполненияСледующейКоманды) Тогда
		//СохранитьЛоги = Истина;
		//ЗаполнитьЗначенияСвойств(ДанныеСохраненныхЛогов, ЭтаФорма);
		
		ПодключитьОбработчикОжидания(ОбработчикВыполненияСледующейКоманды, 0.1, Истина);
		ОбработчикВыполненияСледующейКоманды = "";
	Иначе
		СохранитьЛоги = Ложь;
		ДанныеСохраненныхЛогов = НовыйДанныеСохраненныхЛогов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныеФайлы()
	
	РаботаСЛогами.УдалитьВременныеФайлы(ДанныеЛогов);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьВеткиНаСервере()
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат;
	КонецЕсли;
	
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазы(База);
	Если Не ЗначениеЗаполнено(КаталогРепозиторияБазы) Тогда
		Возврат;
	КонецЕсли;

	РаботаСGit.ИзвлечениеИзменений(КаталогРепозиторияБазы, База);
	ТаблицаЗадач = РаботаСGit.ТаблицаВетокРепозитория(ТекущиеНастройкиПользователя,
		КаталогРепозиторияБазы, ПоказыватьЗавершенныеЗадачи, ПоказыватьЧужиеЗадачи, База);
	СписокЗадачи.Загрузить(ТаблицаЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходНаВеткуОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Элементы.Задачи.ТекущиеДанные.Задача;
	Если Не ЗначениеЗаполнено(Задача) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указана задача на которую необходимо перейти!'"));
		Возврат;
	КонецЕсли;
	
	КомандаЗапуска = КомандаЗапускаПерейтиНаВетку(Задача, ТекущийПользователь, База);
	Если КомандаЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элементы.ТекущаяЗадача.Заголовок = СтрШаблон(НСтр("ru = 'Переход на задачу: %1'"), ОтобразитьТекущуюЗадачу(Задача));
	БазовыйТекстСообщения = СтрШаблон(" переход на задачу: %1'", ОтобразитьТекущуюЗадачу(Задача));

	ЗапускПриложения(КомандаЗапуска);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаСлияниеОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстМерджРеквеста", ЗаголовокМерджРеквеста(ТекущаяЗадача));
	ДополнительныеПараметры.Вставить("ИмяВетки", ИмяВетки(ТекущаяЗадача));
	КомандаЗапуска = КомандаЗапускаЗаявкаНаСлияние(ТекущиеНастройкиПользователя, База, ДополнительныеПараметры);
	Если КомандаЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//TODO разные системы gitlab/github
	Элементы.ТекущаяЗадача.Заголовок = СтрШаблон(НСтр("ru = 'Создание мердж-ревеста : %1'"), ОтобразитьТекущуюЗадачу(ТекущаяЗадача));
	БазовыйТекстСообщения = СтрШаблон(" создание мердж-ревеста: %1'", ОтобразитьТекущуюЗадачу(ТекущаяЗадача));
	
	ДополнительнаяКоманда = СтрШаблон("set GH_TOKEN=%1", ТекущиеНастройкиПользователя.ТокенGit);
	
	ЗапускПриложения(КомандаЗапуска, ДополнительнаяКоманда);	
	
	ЗапуститьПайплайн(ТекущаяЗадача)
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗапуститьПайплайн(ТекущаяЗадача)
	
	//todo перенестить в др место
	Сборка = Справочники.Сборки.НайтиПоРеквизиту("Задача", ТекущаяЗадача);
	Если Не ЗначениеЗаполнено(Сборка) Тогда
		Объект = Справочники.Сборки.СоздатьЭлемент();
		Объект.Заполнить(Неопределено);
		Объект.Задача = ТекущаяЗадача;
		Объект.Записать();
		Сборка = Объект.Ссылка;
	КонецЕсли;
	
	РегистрыСведений.Пайплайны.ДобавитьПайплайн(Сборка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестированиеОповещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
		
	ЗапускТестов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестов() Экспорт
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	
	КомандаЗапуска = КомандаЗапускаЗапуститьТестирование(ТекущаяЗадача, База);
	Если КомандаЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ТекущаяЗадача.Заголовок = СтрШаблон(НСтр("ru = 'Тестирование ветки: %1'"), ОтобразитьТекущуюЗадачу(ТекущаяЗадача));
	БазовыйТекстСообщения = СтрШаблон(" тестирование ветки: %1'", ОтобразитьТекущуюЗадачу(ТекущаяЗадача));
	ЗапускПриложенияJenkins(КомандаЗапуска);

КонецПроцедуры

&НаКлиенте
Процедура ЗапускТестовФоново() Экспорт
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	
	КомандаЗапуска = КомандаЗапускаЗапуститьТестирование(ТекущаяЗадача, База);
	Если КомандаЗапуска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапускПриложенияJenkinsНаСервере(КомандаЗапуска, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьКомментарийКЗадаче(Задача, Комментарий)
	
	Справочники.Задачи.ДобавитьКомментарийКЗадаче(Задача, Комментарий);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаголовокМерджРеквеста(Задача)

	ДанныеЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "ИмяВетки, Наименование");
	
	Возврат СтрШаблон("%1 %2", ДанныеЗадачи.ИмяВетки, ДанныеЗадачи.Наименование);
	
КонецФункции

&НаСервереБезКонтекста
Функция КомандаЗапускаПерейтиНаВетку(Задача, ТекущийПользователь, База)
	
	НастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если НастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат Неопределено;
	КонецЕсли;
	ПараметрыЗадачи        = Справочники.Задачи.РеквизитыЗадачи(Задача);
	ПараметрыБазы          = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	
	КомандаЗапуска  = КомандыЗапускаПриложения.НовыйКомандаПереходаНаВетку(ПараметрыБазы, ПараметрыЗадачи);

	Возврат КомандаЗапуска;
	
КонецФункции	

&НаСервереБезКонтекста
Функция КомандаЗапускаЗафиксироватьИзменения(ТекущаяЗадача, НастройкиПользователя, База, ДополнительныеПараметры)
	
	УправлениеСвойствамиСлужебный.УдалитьНедопустимыеСимволы(ДополнительныеПараметры.ТекстКоммита);

	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(ТекущаяЗадача);
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(База);
	Если Не РаботаСGit.РепозиторийСуществует(КаталогРепозиторияБазы, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаФиксацияИзменений(ПараметрыБазы, 
		НастройкиПользователя, ПараметрыЗадачи, ДополнительныеПараметры);

	Возврат КомандаЗапуска;
	
КонецФункции

&НаСервере
Функция КомандаЗапускаНоваяОбработка(НазваниеОбработки)
	
	УправлениеСвойствамиСлужебный.УдалитьНедопустимыеСимволы(НазваниеОбработки);
	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("NamesDataProcessors", НазваниеОбработки);
	ОбщегоНазначенияУправлениеРазработкой.ИзменитьЗначенияКлючей(НовыеЗначения);
	
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаСоздатьНовуюОбработку();

	Возврат КомандаЗапуска;
	
КонецФункции

Процедура СоздатьОбработку(НазваниеОбработки)

	ОбработкаОбъект = Справочники.ОбъектыРазработки.СоздатьЭлемент();
	ОбработкаОбъект.Заполнить(Неопределено);
	ОбработкаОбъект.УстановитьНовыйКод();
	ОбработкаОбъект.Владелец = Проект;
	ОбработкаОбъект.Наименование = НазваниеОбработки;
	ОбработкаОбъект.ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Обработка;
	ОбработкаОбъект.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	ОбработкаОбъект.Записать();

КонецПроцедуры

&НаСервереБезКонтекста
Функция КомандаЗапускаЗаявкаНаСлияние(НастройкиПользователя, База, ДополнительныеПараметры)
	
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(База);
	Если Не РаботаСGit.РепозиторийСуществует(КаталогРепозиторияБазы, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	//todo переделать на значение из проекта гитхаб/гитлаб
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаЗаявкаНаСлияниеGitHub(ПараметрыБазы,
		НастройкиПользователя,
		ДополнительныеПараметры);
	
	Возврат КомандаЗапуска;
	
КонецФункции

&НаСервереБезКонтекста
Функция КомандаЗапускаЗапуститьТестирование(ТекущаяЗадача, База)
	
	ПараметрыЗадачи = Справочники.Задачи.РеквизитыЗадачи(ТекущаяЗадача);
	ПараметрыБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	КаталогРепозиторияБазы = РаботаСGit.КаталогРепозиторияБазыШара(База);
	Если Не РаботаСGit.РепозиторийСуществует(КаталогРепозиторияБазы, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	КомандаЗапуска = КомандыЗапускаПриложения.НовыйКомандаЗапуститьПайплайнДженкинс(
		ПараметрыБазы,
		ПараметрыЗадачи
	);
	
	Возврат КомандаЗапуска;
	
КонецФункции

&НаКлиенте
Процедура ЗафиксироватьИзмененияПослеВводаКоммита(ТекстКоммита)
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекстКоммита", ТекстКоммита);
	
	КомандаЗапуска = КомандаЗапускаЗафиксироватьИзменения(ТекущаяЗадача, ТекущиеНастройкиПользователя, База,
		ДополнительныеПараметры);
		
	ТекстТекущейЗадачи = ОтобразитьТекущуюЗадачу(ТекущаяЗадача);
	Элементы.ТекущаяЗадача.Заголовок = СтрШаблон(НСтр("ru = 'Фиксация изменений по задаче: %1'"), ТекстТекущейЗадачи);
	БазовыйТекстСообщения = СтрШаблон(" фиксация изменений по задаче: %1'", ТекстТекущейЗадачи);
	ЗапускПриложения(КомандаЗапуска);
	
	РаботаСОбъектамиВызовСервера.ДобавитьНомерВерсииОбработкамЗадачи(ТекущаяЗадача, ТекущийПользователь, ТекстКоммита);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяЗадачаНаСервере(ТекущийПользователь, База, НомерНовойЗадачи, ВариантСозданияЗадачи)
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Справочники.Задачи.СоздатьЗадачуИВеткуКНей(ТекущиеНастройкиПользователя, База, НомерНовойЗадачи, ВариантСозданияЗадачи);
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияНовойЗадачи(Результат, Параметры) Экспорт
	
	ИнициализироватьЗначенияФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииБазыНаСервере()
	
	ПроверкаБазыПоПравам(Истина);
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	
	ТекущаяЗадача();
	
	УстановитьДоступностьЭлементов(ТекущиеНастройкиПользователя);
	ОбновитьСписокЗадач();
	
	УстановитьВидимостьЭлементов();
	УстановитьПараметрыЗапуска();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаБазыПоПравам(ВыводитьСообщение = Ложь)
	
	Если ЗначениеЗаполнено(База) Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "Ответственный") <> ТекущийПользователь Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'В данной базе вы не являетесь ответственным!'"), , "База");
			Элементы.База.ЦветФона = WebЦвета.СветлоКоралловый;
			Возврат;
		КонецЕсли;
		Элементы.База.ЦветФона = WebЦвета.Роса;
		Возврат;
	КонецЕсли;
	Элементы.База.ЦветФона = WebЦвета.СветлоКоралловый;

КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадач()
	
	СписокЗадачи.Очистить();
	ПолучитьВеткиНаСервере();
	СписокЗадачи.Сортировать("Номер УБЫВ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешеноФиксироватьИзмененеия(База)
	
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(База, "РазрешеноФиксироватьИзменения") Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РаботаСGit.РольДоступнаЗапросСервера("Программист")
	        Или РаботаСGit.РольДоступнаЗапросСервера("Релизер")
	        Или РаботаСGit.РольДоступнаЗапросСервера("АдминистраторСистемы");
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноПереходитьНаВетку(База)
	
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РаботаСGit.РольДоступнаЗапросСервера("Программист")
	        Или РаботаСGit.РольДоступнаЗапросСервера("Релизер")
	        Или РаботаСGit.РольДоступнаЗапросСервера("БизнесАналитик")
	        Или РаботаСGit.РольДоступнаЗапросСервера("АдминистраторСистемы");
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноСоздаватьНовуюЗадачу(База)
	
	Если Не ЗначениеЗаполнено(База) Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат РаботаСGit.РольДоступнаЗапросСервера("Программист")
	    Или РаботаСGit.РольДоступнаЗапросСервера("Релизер")
	    Или РаботаСGit.РольДоступнаЗапросСервера("АдминистраторСистемы");
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекущиеНастройкиПользователя(ТекущийПользователь)
	
	Возврат Справочники.НастройкиПользователей.НастройкиТекущегоПользователя(ТекущийПользователь);
	
КонецФункции

&НаСервере
Функция СохраняемыеНастройки()
	
	СохраняемыеНастройки = Новый Структура;
	СохраняемыеНастройки.Вставить("ОтображениеКраткихЛогов", Не Элементы.ГруппаКраткиеЛоги.Скрыта());
	СохраняемыеНастройки.Вставить("ОтображениеПодробныхЛогов", Не Элементы.ГруппаПодробныеЛоги.Скрыта());
	СохраняемыеНастройки.Вставить("ПоказыватьЗавершенныеЗадачи", ПоказыватьЗавершенныеЗадачи);
	СохраняемыеНастройки.Вставить("Проект", Проект);
	СохраняемыеНастройки.Вставить("База", База);
	Возврат СохраняемыеНастройки;
	
КонецФункции

&НаСервере
Процедура ТекущаяЗадача()
	
	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ТекущаяЗадача = Справочники.Задачи.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(База) Тогда
		ТекущаяЗадача = Справочники.Задачи.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	НастройкиБазы = РаботаСGitAPIПовтИсп.НастройкиБазы(База);
	Если Не ЗначениеЗаполнено(НастройкиБазы.КаталогБазыШара) Тогда
		ТекущаяЗадача = Справочники.Задачи.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущаяЗадача = РаботаСGit.ТекущаяЗадача(База, ТекущиеНастройкиПользователя);
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекущаяЗадача = Справочники.Задачи.ПустаяСсылка();
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоДоступаКМенеджеруРелизов()
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.МенеджерРелизов);
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьЗаголовокПоЗадачеНаСервере(Знач База, Знач ТекущаяЗадача)
	
	РаботаСБазами.УстановитьЗаголовокБазыПоЗадаче(База, ТекущаяЗадача);

КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйДанныеСохраненныхЛогов()
	
	ДанныеСохраненныхЛогов = Новый Структура;
	ДанныеСохраненныхЛогов.Вставить("Логи", "");
	ДанныеСохраненныхЛогов.Вставить("ЛогиПодробные", "");
	
	Возврат ДанныеСохраненныхЛогов;
	
КонецФункции

&НаСервере
Функция НоваяЗадачаХотфиксКЗадачеНаСервере(Задача)

	ТекущиеНастройкиПользователя = ТекущиеНастройкиПользователя(ТекущийПользователь);
	Если ТекущиеНастройкиПользователя = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны настройки пользователя!'"));
		Возврат Неопределено;
	КонецЕсли;
	ВеткаХотфикс = Справочники.ПрефиксыЗадач.hotfix;
	Возврат Справочники.Задачи.СоздатьЗадачуИВеткуКНей(ТекущиеНастройкиПользователя, База, Задача.НомерЗадачи, "ХотфиксКЗадаче");

КонецФункции

&НаКлиенте
Асинх Функция ПоместитьТекстВБуфераОбмена()
	
	Если СредстваБуфераОбмена.ИспользованиеДоступно() Тогда
		ФорматДанных = СтандартныйФорматДанныхБуфераОбмена.Текст;
		Если Ждать СредстваБуфераОбмена.ПоддерживаетсяФорматДанных(ФорматДанных) Тогда
			ПомещаемыеДанные = Новый ЭлементБуфераОбмена(ФорматДанных, ЛогиПодробные);
			Возврат Ждать СредстваБуфераОбмена.ПоместитьДанныеАсинх(ПомещаемыеДанные);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПутьРепозиторию()

	Результат = Новый Структура;
	НастройкиБазы = Справочники.Базы.НастройкиБазы(База);
	Результат.Вставить("КаталогБазы", НастройкиБазы.КаталогБазы);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НоваяОбработкаПродолжение(НазваниеОбработки)
	
	ДобавитьНовуюОбработкуКЗадаче(НазваниеОбработки);
	КомандаЗапуска = КомандаЗапускаНоваяОбработка(НазваниеОбработки);
	ЗапускПриложения(КомандаЗапуска);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НоваяОбработка(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ВызватьИсключение НСтр("ru='Новую обработку можно создать только тогда когда выбрана задача'");	
	КонецЕсли;
	Элементы.ГруппаПодробныеЛоги.ЦветТекстаЗаголовка = Новый Цвет();
	Элементы.СтатусВыполнения.ЦветТекста = WebЦвета.Зеленый;
	
	НазваниеОбработки = "";
	
	Обещание = ВвестиСтрокуАсинх(НазваниеОбработки, НСтр("ru='Введите название обработки'"));
	НазваниеОбработки = Ждать Обещание;
	Если ЗначениеЗаполнено(НазваниеОбработки) Тогда
		НоваяОбработкаПродолжение(НазваниеОбработки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюОбработкуКЗадаче(НазваниеОбработки)
	
	ОбработкаСсылка = Справочники.ОбъектыРазработки.НайтиПоНаименованию(НазваниеОбработки, Истина, , Проект);
	Если ОбработкаСсылка <> Справочники.ОбъектыРазработки.ПустаяСсылка() Тогда
		ВызватьИсключение(НСтр("ru='Вы создаете обработку которая уже существует'"));	
	КонецЕсли;
	
	ОбработкаОбъект = Справочники.ОбъектыРазработки.СоздатьЭлемент();
	ОбработкаОбъект.Заполнить(Неопределено);
	ОбработкаОбъект.УстановитьНовыйКод();
	ОбработкаОбъект.Владелец = Проект;
	ОбработкаОбъект.Наименование = НазваниеОбработки;
	ОбработкаОбъект.ТипОбъектаРазработки = Перечисления.ТипыОбъектовРазработки.Обработка;
	ОбработкаОбъект.Версия = Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd");
	ОбработкаОбъект.Записать();
	
	ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	ЗадачаОбъект.ВнешниеФайлы.Добавить().Обработка = ОбработкаОбъект.Ссылка;
	ЗадачаОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти